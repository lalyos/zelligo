// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.0
// source: event.proto

package zelligo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type EventType int32

const (
	// / The input mode or relevant metadata changed
	EventType_ModeUpdate EventType = 0
	// / The tab state in the app was changed
	EventType_TabUpdate EventType = 1
	// / The pane state in the app was changed
	EventType_PaneUpdate EventType = 2
	// / A key was pressed while the user is focused on this plugin's pane
	EventType_Key EventType = 3
	// / A mouse event happened while the user is focused on this plugin's pane
	EventType_Mouse EventType = 4
	// / A timer expired set by the `set_timeout` method exported by `zellij-tile`.
	EventType_Timer EventType = 5
	// / Text was copied to the clipboard anywhere in the app
	EventType_CopyToClipboard EventType = 6
	// / Failed to copy text to clipboard anywhere in the app
	EventType_SystemClipboardFailure EventType = 7
	// / Input was received anywhere in the app
	EventType_InputReceived EventType = 8
	// / This plugin became visible or invisible
	EventType_Visible EventType = 9
	// / A message from one of the plugin's workers
	EventType_CustomMessage EventType = 10
	// / A file was created somewhere in the Zellij CWD folder
	EventType_FileSystemCreate EventType = 11
	// / A file was accessed somewhere in the Zellij CWD folder
	EventType_FileSystemRead EventType = 12
	// / A file was modified somewhere in the Zellij CWD folder
	EventType_FileSystemUpdate EventType = 13
	// / A file was deleted somewhere in the Zellij CWD folder
	EventType_FileSystemDelete        EventType = 14
	EventType_PermissionRequestResult EventType = 15
	EventType_SessionUpdate           EventType = 16
	EventType_RunCommandResult        EventType = 17
	EventType_WebRequestResult        EventType = 18
)

// Enum value maps for EventType.
var (
	EventType_name = map[int32]string{
		0:  "ModeUpdate",
		1:  "TabUpdate",
		2:  "PaneUpdate",
		3:  "Key",
		4:  "Mouse",
		5:  "Timer",
		6:  "CopyToClipboard",
		7:  "SystemClipboardFailure",
		8:  "InputReceived",
		9:  "Visible",
		10: "CustomMessage",
		11: "FileSystemCreate",
		12: "FileSystemRead",
		13: "FileSystemUpdate",
		14: "FileSystemDelete",
		15: "PermissionRequestResult",
		16: "SessionUpdate",
		17: "RunCommandResult",
		18: "WebRequestResult",
	}
	EventType_value = map[string]int32{
		"ModeUpdate":              0,
		"TabUpdate":               1,
		"PaneUpdate":              2,
		"Key":                     3,
		"Mouse":                   4,
		"Timer":                   5,
		"CopyToClipboard":         6,
		"SystemClipboardFailure":  7,
		"InputReceived":           8,
		"Visible":                 9,
		"CustomMessage":           10,
		"FileSystemCreate":        11,
		"FileSystemRead":          12,
		"FileSystemUpdate":        13,
		"FileSystemDelete":        14,
		"PermissionRequestResult": 15,
		"SessionUpdate":           16,
		"RunCommandResult":        17,
		"WebRequestResult":        18,
	}
)

func (x EventType) Enum() *EventType {
	p := new(EventType)
	*p = x
	return p
}

func (x EventType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventType) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[0].Descriptor()
}

func (EventType) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[0]
}

func (x EventType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventType.Descriptor instead.
func (EventType) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

type CopyDestination int32

const (
	CopyDestination_Command CopyDestination = 0
	CopyDestination_Primary CopyDestination = 1
	CopyDestination_System  CopyDestination = 2
)

// Enum value maps for CopyDestination.
var (
	CopyDestination_name = map[int32]string{
		0: "Command",
		1: "Primary",
		2: "System",
	}
	CopyDestination_value = map[string]int32{
		"Command": 0,
		"Primary": 1,
		"System":  2,
	}
)

func (x CopyDestination) Enum() *CopyDestination {
	p := new(CopyDestination)
	*p = x
	return p
}

func (x CopyDestination) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CopyDestination) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[1].Descriptor()
}

func (CopyDestination) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[1]
}

func (x CopyDestination) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CopyDestination.Descriptor instead.
func (CopyDestination) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

type MouseEventName int32

const (
	MouseEventName_MouseScrollUp   MouseEventName = 0
	MouseEventName_MouseScrollDown MouseEventName = 1
	MouseEventName_MouseLeftClick  MouseEventName = 2
	MouseEventName_MouseRightClick MouseEventName = 3
	MouseEventName_MouseHold       MouseEventName = 4
	MouseEventName_MouseRelease    MouseEventName = 5
)

// Enum value maps for MouseEventName.
var (
	MouseEventName_name = map[int32]string{
		0: "MouseScrollUp",
		1: "MouseScrollDown",
		2: "MouseLeftClick",
		3: "MouseRightClick",
		4: "MouseHold",
		5: "MouseRelease",
	}
	MouseEventName_value = map[string]int32{
		"MouseScrollUp":   0,
		"MouseScrollDown": 1,
		"MouseLeftClick":  2,
		"MouseRightClick": 3,
		"MouseHold":       4,
		"MouseRelease":    5,
	}
)

func (x MouseEventName) Enum() *MouseEventName {
	p := new(MouseEventName)
	*p = x
	return p
}

func (x MouseEventName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MouseEventName) Descriptor() protoreflect.EnumDescriptor {
	return file_event_proto_enumTypes[2].Descriptor()
}

func (MouseEventName) Type() protoreflect.EnumType {
	return &file_event_proto_enumTypes[2]
}

func (x MouseEventName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MouseEventName.Descriptor instead.
func (MouseEventName) EnumDescriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

type EventNameList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventTypes []EventType `protobuf:"varint,1,rep,packed,name=event_types,json=eventTypes,proto3,enum=api.event.EventType" json:"event_types,omitempty"`
}

func (x *EventNameList) Reset() {
	*x = EventNameList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventNameList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventNameList) ProtoMessage() {}

func (x *EventNameList) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventNameList.ProtoReflect.Descriptor instead.
func (*EventNameList) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{0}
}

func (x *EventNameList) GetEventTypes() []EventType {
	if x != nil {
		return x.EventTypes
	}
	return nil
}

type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name EventType `protobuf:"varint,1,opt,name=name,proto3,enum=api.event.EventType" json:"name,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Event_ModeUpdatePayload
	//	*Event_TabUpdatePayload
	//	*Event_PaneUpdatePayload
	//	*Event_KeyPayload
	//	*Event_MouseEventPayload
	//	*Event_TimerPayload
	//	*Event_CopyToClipboardPayload
	//	*Event_VisiblePayload
	//	*Event_CustomMessagePayload
	//	*Event_FileListPayload
	//	*Event_PermissionRequestResultPayload
	//	*Event_SessionUpdatePayload
	//	*Event_RunCommandResultPayload
	//	*Event_WebRequestResultPayload
	Payload isEvent_Payload `protobuf_oneof:"payload"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{1}
}

func (x *Event) GetName() EventType {
	if x != nil {
		return x.Name
	}
	return EventType_ModeUpdate
}

func (m *Event) GetPayload() isEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Event) GetModeUpdatePayload() *ModeUpdatePayload {
	if x, ok := x.GetPayload().(*Event_ModeUpdatePayload); ok {
		return x.ModeUpdatePayload
	}
	return nil
}

func (x *Event) GetTabUpdatePayload() *TabUpdatePayload {
	if x, ok := x.GetPayload().(*Event_TabUpdatePayload); ok {
		return x.TabUpdatePayload
	}
	return nil
}

func (x *Event) GetPaneUpdatePayload() *PaneUpdatePayload {
	if x, ok := x.GetPayload().(*Event_PaneUpdatePayload); ok {
		return x.PaneUpdatePayload
	}
	return nil
}

func (x *Event) GetKeyPayload() *Key {
	if x, ok := x.GetPayload().(*Event_KeyPayload); ok {
		return x.KeyPayload
	}
	return nil
}

func (x *Event) GetMouseEventPayload() *MouseEventPayload {
	if x, ok := x.GetPayload().(*Event_MouseEventPayload); ok {
		return x.MouseEventPayload
	}
	return nil
}

func (x *Event) GetTimerPayload() float32 {
	if x, ok := x.GetPayload().(*Event_TimerPayload); ok {
		return x.TimerPayload
	}
	return 0
}

func (x *Event) GetCopyToClipboardPayload() CopyDestination {
	if x, ok := x.GetPayload().(*Event_CopyToClipboardPayload); ok {
		return x.CopyToClipboardPayload
	}
	return CopyDestination_Command
}

func (x *Event) GetVisiblePayload() bool {
	if x, ok := x.GetPayload().(*Event_VisiblePayload); ok {
		return x.VisiblePayload
	}
	return false
}

func (x *Event) GetCustomMessagePayload() *CustomMessagePayload {
	if x, ok := x.GetPayload().(*Event_CustomMessagePayload); ok {
		return x.CustomMessagePayload
	}
	return nil
}

func (x *Event) GetFileListPayload() *FileListPayload {
	if x, ok := x.GetPayload().(*Event_FileListPayload); ok {
		return x.FileListPayload
	}
	return nil
}

func (x *Event) GetPermissionRequestResultPayload() *PermissionRequestResultPayload {
	if x, ok := x.GetPayload().(*Event_PermissionRequestResultPayload); ok {
		return x.PermissionRequestResultPayload
	}
	return nil
}

func (x *Event) GetSessionUpdatePayload() *SessionUpdatePayload {
	if x, ok := x.GetPayload().(*Event_SessionUpdatePayload); ok {
		return x.SessionUpdatePayload
	}
	return nil
}

func (x *Event) GetRunCommandResultPayload() *RunCommandResultPayload {
	if x, ok := x.GetPayload().(*Event_RunCommandResultPayload); ok {
		return x.RunCommandResultPayload
	}
	return nil
}

func (x *Event) GetWebRequestResultPayload() *WebRequestResultPayload {
	if x, ok := x.GetPayload().(*Event_WebRequestResultPayload); ok {
		return x.WebRequestResultPayload
	}
	return nil
}

type isEvent_Payload interface {
	isEvent_Payload()
}

type Event_ModeUpdatePayload struct {
	ModeUpdatePayload *ModeUpdatePayload `protobuf:"bytes,2,opt,name=mode_update_payload,json=modeUpdatePayload,proto3,oneof"`
}

type Event_TabUpdatePayload struct {
	TabUpdatePayload *TabUpdatePayload `protobuf:"bytes,3,opt,name=tab_update_payload,json=tabUpdatePayload,proto3,oneof"`
}

type Event_PaneUpdatePayload struct {
	PaneUpdatePayload *PaneUpdatePayload `protobuf:"bytes,4,opt,name=pane_update_payload,json=paneUpdatePayload,proto3,oneof"`
}

type Event_KeyPayload struct {
	KeyPayload *Key `protobuf:"bytes,5,opt,name=key_payload,json=keyPayload,proto3,oneof"`
}

type Event_MouseEventPayload struct {
	MouseEventPayload *MouseEventPayload `protobuf:"bytes,6,opt,name=mouse_event_payload,json=mouseEventPayload,proto3,oneof"`
}

type Event_TimerPayload struct {
	TimerPayload float32 `protobuf:"fixed32,7,opt,name=timer_payload,json=timerPayload,proto3,oneof"`
}

type Event_CopyToClipboardPayload struct {
	CopyToClipboardPayload CopyDestination `protobuf:"varint,8,opt,name=copy_to_clipboard_payload,json=copyToClipboardPayload,proto3,enum=api.event.CopyDestination,oneof"`
}

type Event_VisiblePayload struct {
	VisiblePayload bool `protobuf:"varint,9,opt,name=visible_payload,json=visiblePayload,proto3,oneof"`
}

type Event_CustomMessagePayload struct {
	CustomMessagePayload *CustomMessagePayload `protobuf:"bytes,10,opt,name=custom_message_payload,json=customMessagePayload,proto3,oneof"`
}

type Event_FileListPayload struct {
	FileListPayload *FileListPayload `protobuf:"bytes,11,opt,name=file_list_payload,json=fileListPayload,proto3,oneof"`
}

type Event_PermissionRequestResultPayload struct {
	PermissionRequestResultPayload *PermissionRequestResultPayload `protobuf:"bytes,12,opt,name=permission_request_result_payload,json=permissionRequestResultPayload,proto3,oneof"`
}

type Event_SessionUpdatePayload struct {
	SessionUpdatePayload *SessionUpdatePayload `protobuf:"bytes,13,opt,name=session_update_payload,json=sessionUpdatePayload,proto3,oneof"`
}

type Event_RunCommandResultPayload struct {
	RunCommandResultPayload *RunCommandResultPayload `protobuf:"bytes,14,opt,name=run_command_result_payload,json=runCommandResultPayload,proto3,oneof"`
}

type Event_WebRequestResultPayload struct {
	WebRequestResultPayload *WebRequestResultPayload `protobuf:"bytes,15,opt,name=web_request_result_payload,json=webRequestResultPayload,proto3,oneof"`
}

func (*Event_ModeUpdatePayload) isEvent_Payload() {}

func (*Event_TabUpdatePayload) isEvent_Payload() {}

func (*Event_PaneUpdatePayload) isEvent_Payload() {}

func (*Event_KeyPayload) isEvent_Payload() {}

func (*Event_MouseEventPayload) isEvent_Payload() {}

func (*Event_TimerPayload) isEvent_Payload() {}

func (*Event_CopyToClipboardPayload) isEvent_Payload() {}

func (*Event_VisiblePayload) isEvent_Payload() {}

func (*Event_CustomMessagePayload) isEvent_Payload() {}

func (*Event_FileListPayload) isEvent_Payload() {}

func (*Event_PermissionRequestResultPayload) isEvent_Payload() {}

func (*Event_SessionUpdatePayload) isEvent_Payload() {}

func (*Event_RunCommandResultPayload) isEvent_Payload() {}

func (*Event_WebRequestResultPayload) isEvent_Payload() {}

type SessionUpdatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionManifests      []*SessionManifest      `protobuf:"bytes,1,rep,name=session_manifests,json=sessionManifests,proto3" json:"session_manifests,omitempty"`
	ResurrectableSessions []*ResurrectableSession `protobuf:"bytes,2,rep,name=resurrectable_sessions,json=resurrectableSessions,proto3" json:"resurrectable_sessions,omitempty"`
}

func (x *SessionUpdatePayload) Reset() {
	*x = SessionUpdatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionUpdatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionUpdatePayload) ProtoMessage() {}

func (x *SessionUpdatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionUpdatePayload.ProtoReflect.Descriptor instead.
func (*SessionUpdatePayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{2}
}

func (x *SessionUpdatePayload) GetSessionManifests() []*SessionManifest {
	if x != nil {
		return x.SessionManifests
	}
	return nil
}

func (x *SessionUpdatePayload) GetResurrectableSessions() []*ResurrectableSession {
	if x != nil {
		return x.ResurrectableSessions
	}
	return nil
}

type RunCommandResultPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExitCode *int32         `protobuf:"varint,1,opt,name=exit_code,json=exitCode,proto3,oneof" json:"exit_code,omitempty"`
	Stdout   []byte         `protobuf:"bytes,2,opt,name=stdout,proto3" json:"stdout,omitempty"`
	Stderr   []byte         `protobuf:"bytes,3,opt,name=stderr,proto3" json:"stderr,omitempty"`
	Context  []*ContextItem `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *RunCommandResultPayload) Reset() {
	*x = RunCommandResultPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandResultPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandResultPayload) ProtoMessage() {}

func (x *RunCommandResultPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandResultPayload.ProtoReflect.Descriptor instead.
func (*RunCommandResultPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{3}
}

func (x *RunCommandResultPayload) GetExitCode() int32 {
	if x != nil && x.ExitCode != nil {
		return *x.ExitCode
	}
	return 0
}

func (x *RunCommandResultPayload) GetStdout() []byte {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *RunCommandResultPayload) GetStderr() []byte {
	if x != nil {
		return x.Stderr
	}
	return nil
}

func (x *RunCommandResultPayload) GetContext() []*ContextItem {
	if x != nil {
		return x.Context
	}
	return nil
}

type WebRequestResultPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status  int32          `protobuf:"varint,1,opt,name=status,proto3" json:"status,omitempty"`
	Headers []*Header      `protobuf:"bytes,2,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    []byte         `protobuf:"bytes,3,opt,name=body,proto3" json:"body,omitempty"`
	Context []*ContextItem `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *WebRequestResultPayload) Reset() {
	*x = WebRequestResultPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRequestResultPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRequestResultPayload) ProtoMessage() {}

func (x *WebRequestResultPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRequestResultPayload.ProtoReflect.Descriptor instead.
func (*WebRequestResultPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{4}
}

func (x *WebRequestResultPayload) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *WebRequestResultPayload) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *WebRequestResultPayload) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *WebRequestResultPayload) GetContext() []*ContextItem {
	if x != nil {
		return x.Context
	}
	return nil
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{5}
}

func (x *Header) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PermissionRequestResultPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Granted bool `protobuf:"varint,1,opt,name=granted,proto3" json:"granted,omitempty"`
}

func (x *PermissionRequestResultPayload) Reset() {
	*x = PermissionRequestResultPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionRequestResultPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRequestResultPayload) ProtoMessage() {}

func (x *PermissionRequestResultPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRequestResultPayload.ProtoReflect.Descriptor instead.
func (*PermissionRequestResultPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{6}
}

func (x *PermissionRequestResultPayload) GetGranted() bool {
	if x != nil {
		return x.Granted
	}
	return false
}

type FileListPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Paths         []string        `protobuf:"bytes,1,rep,name=paths,proto3" json:"paths,omitempty"`
	PathsMetadata []*FileMetadata `protobuf:"bytes,2,rep,name=paths_metadata,json=pathsMetadata,proto3" json:"paths_metadata,omitempty"`
}

func (x *FileListPayload) Reset() {
	*x = FileListPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileListPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileListPayload) ProtoMessage() {}

func (x *FileListPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileListPayload.ProtoReflect.Descriptor instead.
func (*FileListPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{7}
}

func (x *FileListPayload) GetPaths() []string {
	if x != nil {
		return x.Paths
	}
	return nil
}

func (x *FileListPayload) GetPathsMetadata() []*FileMetadata {
	if x != nil {
		return x.PathsMetadata
	}
	return nil
}

type FileMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MetadataIsSet bool   `protobuf:"varint,1,opt,name=metadata_is_set,json=metadataIsSet,proto3" json:"metadata_is_set,omitempty"` // if this is false, the metadata for this file has not been read
	IsDir         bool   `protobuf:"varint,2,opt,name=is_dir,json=isDir,proto3" json:"is_dir,omitempty"`
	IsFile        bool   `protobuf:"varint,3,opt,name=is_file,json=isFile,proto3" json:"is_file,omitempty"`
	IsSymlink     bool   `protobuf:"varint,4,opt,name=is_symlink,json=isSymlink,proto3" json:"is_symlink,omitempty"`
	Len           uint64 `protobuf:"varint,5,opt,name=len,proto3" json:"len,omitempty"`
}

func (x *FileMetadata) Reset() {
	*x = FileMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FileMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FileMetadata) ProtoMessage() {}

func (x *FileMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FileMetadata.ProtoReflect.Descriptor instead.
func (*FileMetadata) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{8}
}

func (x *FileMetadata) GetMetadataIsSet() bool {
	if x != nil {
		return x.MetadataIsSet
	}
	return false
}

func (x *FileMetadata) GetIsDir() bool {
	if x != nil {
		return x.IsDir
	}
	return false
}

func (x *FileMetadata) GetIsFile() bool {
	if x != nil {
		return x.IsFile
	}
	return false
}

func (x *FileMetadata) GetIsSymlink() bool {
	if x != nil {
		return x.IsSymlink
	}
	return false
}

func (x *FileMetadata) GetLen() uint64 {
	if x != nil {
		return x.Len
	}
	return 0
}

type CustomMessagePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MessageName string `protobuf:"bytes,1,opt,name=message_name,json=messageName,proto3" json:"message_name,omitempty"`
	Payload     string `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *CustomMessagePayload) Reset() {
	*x = CustomMessagePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CustomMessagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CustomMessagePayload) ProtoMessage() {}

func (x *CustomMessagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CustomMessagePayload.ProtoReflect.Descriptor instead.
func (*CustomMessagePayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{9}
}

func (x *CustomMessagePayload) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *CustomMessagePayload) GetPayload() string {
	if x != nil {
		return x.Payload
	}
	return ""
}

type MouseEventPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MouseEventName MouseEventName `protobuf:"varint,1,opt,name=mouse_event_name,json=mouseEventName,proto3,enum=api.event.MouseEventName" json:"mouse_event_name,omitempty"`
	// Types that are assignable to MouseEventPayload:
	//
	//	*MouseEventPayload_LineCount
	//	*MouseEventPayload_Position
	MouseEventPayload isMouseEventPayload_MouseEventPayload `protobuf_oneof:"mouse_event_payload"`
}

func (x *MouseEventPayload) Reset() {
	*x = MouseEventPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MouseEventPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MouseEventPayload) ProtoMessage() {}

func (x *MouseEventPayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MouseEventPayload.ProtoReflect.Descriptor instead.
func (*MouseEventPayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{10}
}

func (x *MouseEventPayload) GetMouseEventName() MouseEventName {
	if x != nil {
		return x.MouseEventName
	}
	return MouseEventName_MouseScrollUp
}

func (m *MouseEventPayload) GetMouseEventPayload() isMouseEventPayload_MouseEventPayload {
	if m != nil {
		return m.MouseEventPayload
	}
	return nil
}

func (x *MouseEventPayload) GetLineCount() uint32 {
	if x, ok := x.GetMouseEventPayload().(*MouseEventPayload_LineCount); ok {
		return x.LineCount
	}
	return 0
}

func (x *MouseEventPayload) GetPosition() *Position {
	if x, ok := x.GetMouseEventPayload().(*MouseEventPayload_Position); ok {
		return x.Position
	}
	return nil
}

type isMouseEventPayload_MouseEventPayload interface {
	isMouseEventPayload_MouseEventPayload()
}

type MouseEventPayload_LineCount struct {
	LineCount uint32 `protobuf:"varint,2,opt,name=line_count,json=lineCount,proto3,oneof"`
}

type MouseEventPayload_Position struct {
	Position *Position `protobuf:"bytes,3,opt,name=position,proto3,oneof"`
}

func (*MouseEventPayload_LineCount) isMouseEventPayload_MouseEventPayload() {}

func (*MouseEventPayload_Position) isMouseEventPayload_MouseEventPayload() {}

type TabUpdatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabInfo []*TabInfo `protobuf:"bytes,1,rep,name=tab_info,json=tabInfo,proto3" json:"tab_info,omitempty"`
}

func (x *TabUpdatePayload) Reset() {
	*x = TabUpdatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabUpdatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabUpdatePayload) ProtoMessage() {}

func (x *TabUpdatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabUpdatePayload.ProtoReflect.Descriptor instead.
func (*TabUpdatePayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{11}
}

func (x *TabUpdatePayload) GetTabInfo() []*TabInfo {
	if x != nil {
		return x.TabInfo
	}
	return nil
}

type PaneUpdatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaneManifest []*PaneManifest `protobuf:"bytes,1,rep,name=pane_manifest,json=paneManifest,proto3" json:"pane_manifest,omitempty"`
}

func (x *PaneUpdatePayload) Reset() {
	*x = PaneUpdatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaneUpdatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaneUpdatePayload) ProtoMessage() {}

func (x *PaneUpdatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaneUpdatePayload.ProtoReflect.Descriptor instead.
func (*PaneUpdatePayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{12}
}

func (x *PaneUpdatePayload) GetPaneManifest() []*PaneManifest {
	if x != nil {
		return x.PaneManifest
	}
	return nil
}

type PaneManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabIndex uint32      `protobuf:"varint,1,opt,name=tab_index,json=tabIndex,proto3" json:"tab_index,omitempty"`
	Panes    []*PaneInfo `protobuf:"bytes,2,rep,name=panes,proto3" json:"panes,omitempty"`
}

func (x *PaneManifest) Reset() {
	*x = PaneManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaneManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaneManifest) ProtoMessage() {}

func (x *PaneManifest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaneManifest.ProtoReflect.Descriptor instead.
func (*PaneManifest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{13}
}

func (x *PaneManifest) GetTabIndex() uint32 {
	if x != nil {
		return x.TabIndex
	}
	return 0
}

func (x *PaneManifest) GetPanes() []*PaneInfo {
	if x != nil {
		return x.Panes
	}
	return nil
}

type SessionManifest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name             string          `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Tabs             []*TabInfo      `protobuf:"bytes,2,rep,name=tabs,proto3" json:"tabs,omitempty"`
	Panes            []*PaneManifest `protobuf:"bytes,3,rep,name=panes,proto3" json:"panes,omitempty"`
	ConnectedClients uint32          `protobuf:"varint,4,opt,name=connected_clients,json=connectedClients,proto3" json:"connected_clients,omitempty"`
	IsCurrentSession bool            `protobuf:"varint,5,opt,name=is_current_session,json=isCurrentSession,proto3" json:"is_current_session,omitempty"`
	AvailableLayouts []*LayoutInfo   `protobuf:"bytes,6,rep,name=available_layouts,json=availableLayouts,proto3" json:"available_layouts,omitempty"`
}

func (x *SessionManifest) Reset() {
	*x = SessionManifest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SessionManifest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SessionManifest) ProtoMessage() {}

func (x *SessionManifest) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SessionManifest.ProtoReflect.Descriptor instead.
func (*SessionManifest) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{14}
}

func (x *SessionManifest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SessionManifest) GetTabs() []*TabInfo {
	if x != nil {
		return x.Tabs
	}
	return nil
}

func (x *SessionManifest) GetPanes() []*PaneManifest {
	if x != nil {
		return x.Panes
	}
	return nil
}

func (x *SessionManifest) GetConnectedClients() uint32 {
	if x != nil {
		return x.ConnectedClients
	}
	return 0
}

func (x *SessionManifest) GetIsCurrentSession() bool {
	if x != nil {
		return x.IsCurrentSession
	}
	return false
}

func (x *SessionManifest) GetAvailableLayouts() []*LayoutInfo {
	if x != nil {
		return x.AvailableLayouts
	}
	return nil
}

type LayoutInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Source string `protobuf:"bytes,2,opt,name=source,proto3" json:"source,omitempty"`
}

func (x *LayoutInfo) Reset() {
	*x = LayoutInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LayoutInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LayoutInfo) ProtoMessage() {}

func (x *LayoutInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LayoutInfo.ProtoReflect.Descriptor instead.
func (*LayoutInfo) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{15}
}

func (x *LayoutInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *LayoutInfo) GetSource() string {
	if x != nil {
		return x.Source
	}
	return ""
}

type ResurrectableSession struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	CreationTime uint64 `protobuf:"varint,2,opt,name=creation_time,json=creationTime,proto3" json:"creation_time,omitempty"`
}

func (x *ResurrectableSession) Reset() {
	*x = ResurrectableSession{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResurrectableSession) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResurrectableSession) ProtoMessage() {}

func (x *ResurrectableSession) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResurrectableSession.ProtoReflect.Descriptor instead.
func (*ResurrectableSession) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{16}
}

func (x *ResurrectableSession) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ResurrectableSession) GetCreationTime() uint64 {
	if x != nil {
		return x.CreationTime
	}
	return 0
}

type PaneInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                      uint32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	IsPlugin                bool      `protobuf:"varint,2,opt,name=is_plugin,json=isPlugin,proto3" json:"is_plugin,omitempty"`
	IsFocused               bool      `protobuf:"varint,3,opt,name=is_focused,json=isFocused,proto3" json:"is_focused,omitempty"`
	IsFullscreen            bool      `protobuf:"varint,4,opt,name=is_fullscreen,json=isFullscreen,proto3" json:"is_fullscreen,omitempty"`
	IsFloating              bool      `protobuf:"varint,5,opt,name=is_floating,json=isFloating,proto3" json:"is_floating,omitempty"`
	IsSuppressed            bool      `protobuf:"varint,6,opt,name=is_suppressed,json=isSuppressed,proto3" json:"is_suppressed,omitempty"`
	Title                   string    `protobuf:"bytes,7,opt,name=title,proto3" json:"title,omitempty"`
	Exited                  bool      `protobuf:"varint,8,opt,name=exited,proto3" json:"exited,omitempty"`
	ExitStatus              *int32    `protobuf:"varint,9,opt,name=exit_status,json=exitStatus,proto3,oneof" json:"exit_status,omitempty"`
	IsHeld                  bool      `protobuf:"varint,10,opt,name=is_held,json=isHeld,proto3" json:"is_held,omitempty"`
	PaneX                   uint32    `protobuf:"varint,11,opt,name=pane_x,json=paneX,proto3" json:"pane_x,omitempty"`
	PaneContentX            uint32    `protobuf:"varint,12,opt,name=pane_content_x,json=paneContentX,proto3" json:"pane_content_x,omitempty"`
	PaneY                   uint32    `protobuf:"varint,13,opt,name=pane_y,json=paneY,proto3" json:"pane_y,omitempty"`
	PaneContentY            uint32    `protobuf:"varint,14,opt,name=pane_content_y,json=paneContentY,proto3" json:"pane_content_y,omitempty"`
	PaneRows                uint32    `protobuf:"varint,15,opt,name=pane_rows,json=paneRows,proto3" json:"pane_rows,omitempty"`
	PaneContentRows         uint32    `protobuf:"varint,16,opt,name=pane_content_rows,json=paneContentRows,proto3" json:"pane_content_rows,omitempty"`
	PaneColumns             uint32    `protobuf:"varint,17,opt,name=pane_columns,json=paneColumns,proto3" json:"pane_columns,omitempty"`
	PaneContentColumns      uint32    `protobuf:"varint,18,opt,name=pane_content_columns,json=paneContentColumns,proto3" json:"pane_content_columns,omitempty"`
	CursorCoordinatesInPane *Position `protobuf:"bytes,19,opt,name=cursor_coordinates_in_pane,json=cursorCoordinatesInPane,proto3,oneof" json:"cursor_coordinates_in_pane,omitempty"`
	TerminalCommand         *string   `protobuf:"bytes,20,opt,name=terminal_command,json=terminalCommand,proto3,oneof" json:"terminal_command,omitempty"`
	PluginUrl               *string   `protobuf:"bytes,21,opt,name=plugin_url,json=pluginUrl,proto3,oneof" json:"plugin_url,omitempty"`
	IsSelectable            bool      `protobuf:"varint,22,opt,name=is_selectable,json=isSelectable,proto3" json:"is_selectable,omitempty"`
}

func (x *PaneInfo) Reset() {
	*x = PaneInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaneInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaneInfo) ProtoMessage() {}

func (x *PaneInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaneInfo.ProtoReflect.Descriptor instead.
func (*PaneInfo) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{17}
}

func (x *PaneInfo) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PaneInfo) GetIsPlugin() bool {
	if x != nil {
		return x.IsPlugin
	}
	return false
}

func (x *PaneInfo) GetIsFocused() bool {
	if x != nil {
		return x.IsFocused
	}
	return false
}

func (x *PaneInfo) GetIsFullscreen() bool {
	if x != nil {
		return x.IsFullscreen
	}
	return false
}

func (x *PaneInfo) GetIsFloating() bool {
	if x != nil {
		return x.IsFloating
	}
	return false
}

func (x *PaneInfo) GetIsSuppressed() bool {
	if x != nil {
		return x.IsSuppressed
	}
	return false
}

func (x *PaneInfo) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *PaneInfo) GetExited() bool {
	if x != nil {
		return x.Exited
	}
	return false
}

func (x *PaneInfo) GetExitStatus() int32 {
	if x != nil && x.ExitStatus != nil {
		return *x.ExitStatus
	}
	return 0
}

func (x *PaneInfo) GetIsHeld() bool {
	if x != nil {
		return x.IsHeld
	}
	return false
}

func (x *PaneInfo) GetPaneX() uint32 {
	if x != nil {
		return x.PaneX
	}
	return 0
}

func (x *PaneInfo) GetPaneContentX() uint32 {
	if x != nil {
		return x.PaneContentX
	}
	return 0
}

func (x *PaneInfo) GetPaneY() uint32 {
	if x != nil {
		return x.PaneY
	}
	return 0
}

func (x *PaneInfo) GetPaneContentY() uint32 {
	if x != nil {
		return x.PaneContentY
	}
	return 0
}

func (x *PaneInfo) GetPaneRows() uint32 {
	if x != nil {
		return x.PaneRows
	}
	return 0
}

func (x *PaneInfo) GetPaneContentRows() uint32 {
	if x != nil {
		return x.PaneContentRows
	}
	return 0
}

func (x *PaneInfo) GetPaneColumns() uint32 {
	if x != nil {
		return x.PaneColumns
	}
	return 0
}

func (x *PaneInfo) GetPaneContentColumns() uint32 {
	if x != nil {
		return x.PaneContentColumns
	}
	return 0
}

func (x *PaneInfo) GetCursorCoordinatesInPane() *Position {
	if x != nil {
		return x.CursorCoordinatesInPane
	}
	return nil
}

func (x *PaneInfo) GetTerminalCommand() string {
	if x != nil && x.TerminalCommand != nil {
		return *x.TerminalCommand
	}
	return ""
}

func (x *PaneInfo) GetPluginUrl() string {
	if x != nil && x.PluginUrl != nil {
		return *x.PluginUrl
	}
	return ""
}

func (x *PaneInfo) GetIsSelectable() bool {
	if x != nil {
		return x.IsSelectable
	}
	return false
}

type TabInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position                uint32   `protobuf:"varint,1,opt,name=position,proto3" json:"position,omitempty"`
	Name                    string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Active                  bool     `protobuf:"varint,3,opt,name=active,proto3" json:"active,omitempty"`
	PanesToHide             uint32   `protobuf:"varint,4,opt,name=panes_to_hide,json=panesToHide,proto3" json:"panes_to_hide,omitempty"`
	IsFullscreenActive      bool     `protobuf:"varint,5,opt,name=is_fullscreen_active,json=isFullscreenActive,proto3" json:"is_fullscreen_active,omitempty"`
	IsSyncPanesActive       bool     `protobuf:"varint,6,opt,name=is_sync_panes_active,json=isSyncPanesActive,proto3" json:"is_sync_panes_active,omitempty"`
	AreFloatingPanesVisible bool     `protobuf:"varint,7,opt,name=are_floating_panes_visible,json=areFloatingPanesVisible,proto3" json:"are_floating_panes_visible,omitempty"`
	OtherFocusedClients     []uint32 `protobuf:"varint,8,rep,packed,name=other_focused_clients,json=otherFocusedClients,proto3" json:"other_focused_clients,omitempty"`
	ActiveSwapLayoutName    *string  `protobuf:"bytes,9,opt,name=active_swap_layout_name,json=activeSwapLayoutName,proto3,oneof" json:"active_swap_layout_name,omitempty"`
	IsSwapLayoutDirty       bool     `protobuf:"varint,10,opt,name=is_swap_layout_dirty,json=isSwapLayoutDirty,proto3" json:"is_swap_layout_dirty,omitempty"`
}

func (x *TabInfo) Reset() {
	*x = TabInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TabInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TabInfo) ProtoMessage() {}

func (x *TabInfo) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TabInfo.ProtoReflect.Descriptor instead.
func (*TabInfo) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{18}
}

func (x *TabInfo) GetPosition() uint32 {
	if x != nil {
		return x.Position
	}
	return 0
}

func (x *TabInfo) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TabInfo) GetActive() bool {
	if x != nil {
		return x.Active
	}
	return false
}

func (x *TabInfo) GetPanesToHide() uint32 {
	if x != nil {
		return x.PanesToHide
	}
	return 0
}

func (x *TabInfo) GetIsFullscreenActive() bool {
	if x != nil {
		return x.IsFullscreenActive
	}
	return false
}

func (x *TabInfo) GetIsSyncPanesActive() bool {
	if x != nil {
		return x.IsSyncPanesActive
	}
	return false
}

func (x *TabInfo) GetAreFloatingPanesVisible() bool {
	if x != nil {
		return x.AreFloatingPanesVisible
	}
	return false
}

func (x *TabInfo) GetOtherFocusedClients() []uint32 {
	if x != nil {
		return x.OtherFocusedClients
	}
	return nil
}

func (x *TabInfo) GetActiveSwapLayoutName() string {
	if x != nil && x.ActiveSwapLayoutName != nil {
		return *x.ActiveSwapLayoutName
	}
	return ""
}

func (x *TabInfo) GetIsSwapLayoutDirty() bool {
	if x != nil {
		return x.IsSwapLayoutDirty
	}
	return false
}

type ModeUpdatePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CurrentMode       InputMode            `protobuf:"varint,1,opt,name=current_mode,json=currentMode,proto3,enum=api.input_mode.InputMode" json:"current_mode,omitempty"`
	Keybinds          []*InputModeKeybinds `protobuf:"bytes,2,rep,name=keybinds,proto3" json:"keybinds,omitempty"`
	Style             *Style               `protobuf:"bytes,3,opt,name=style,proto3" json:"style,omitempty"`
	ArrowFontsSupport bool                 `protobuf:"varint,4,opt,name=arrow_fonts_support,json=arrowFontsSupport,proto3" json:"arrow_fonts_support,omitempty"`
	SessionName       *string              `protobuf:"bytes,5,opt,name=session_name,json=sessionName,proto3,oneof" json:"session_name,omitempty"`
}

func (x *ModeUpdatePayload) Reset() {
	*x = ModeUpdatePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModeUpdatePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModeUpdatePayload) ProtoMessage() {}

func (x *ModeUpdatePayload) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModeUpdatePayload.ProtoReflect.Descriptor instead.
func (*ModeUpdatePayload) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{19}
}

func (x *ModeUpdatePayload) GetCurrentMode() InputMode {
	if x != nil {
		return x.CurrentMode
	}
	return InputMode_Normal
}

func (x *ModeUpdatePayload) GetKeybinds() []*InputModeKeybinds {
	if x != nil {
		return x.Keybinds
	}
	return nil
}

func (x *ModeUpdatePayload) GetStyle() *Style {
	if x != nil {
		return x.Style
	}
	return nil
}

func (x *ModeUpdatePayload) GetArrowFontsSupport() bool {
	if x != nil {
		return x.ArrowFontsSupport
	}
	return false
}

func (x *ModeUpdatePayload) GetSessionName() string {
	if x != nil && x.SessionName != nil {
		return *x.SessionName
	}
	return ""
}

type InputModeKeybinds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mode    InputMode  `protobuf:"varint,1,opt,name=mode,proto3,enum=api.input_mode.InputMode" json:"mode,omitempty"`
	KeyBind []*KeyBind `protobuf:"bytes,2,rep,name=key_bind,json=keyBind,proto3" json:"key_bind,omitempty"`
}

func (x *InputModeKeybinds) Reset() {
	*x = InputModeKeybinds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InputModeKeybinds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InputModeKeybinds) ProtoMessage() {}

func (x *InputModeKeybinds) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InputModeKeybinds.ProtoReflect.Descriptor instead.
func (*InputModeKeybinds) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{20}
}

func (x *InputModeKeybinds) GetMode() InputMode {
	if x != nil {
		return x.Mode
	}
	return InputMode_Normal
}

func (x *InputModeKeybinds) GetKeyBind() []*KeyBind {
	if x != nil {
		return x.KeyBind
	}
	return nil
}

type KeyBind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key    *Key      `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Action []*Action `protobuf:"bytes,2,rep,name=action,proto3" json:"action,omitempty"`
}

func (x *KeyBind) Reset() {
	*x = KeyBind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_event_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyBind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyBind) ProtoMessage() {}

func (x *KeyBind) ProtoReflect() protoreflect.Message {
	mi := &file_event_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyBind.ProtoReflect.Descriptor instead.
func (*KeyBind) Descriptor() ([]byte, []int) {
	return file_event_proto_rawDescGZIP(), []int{21}
}

func (x *KeyBind) GetKey() *Key {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *KeyBind) GetAction() []*Action {
	if x != nil {
		return x.Action
	}
	return nil
}

var File_event_proto protoreflect.FileDescriptor

var file_event_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x1a, 0x10, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6b, 0x65, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x46,
	0x0a, 0x0d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0x8f, 0x09, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x6f,
	0x64, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x74, 0x61,
	0x62, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x62, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x50, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x70, 0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x6b, 0x65,
	0x79, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x48,
	0x00, 0x52, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x57, 0x0a, 0x19, 0x63, 0x6f, 0x70, 0x79, 0x5f, 0x74, 0x6f, 0x5f, 0x63, 0x6c, 0x69, 0x70, 0x62,
	0x6f, 0x61, 0x72, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43,
	0x6f, 0x70, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x16, 0x63, 0x6f, 0x70, 0x79, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x29, 0x0a, 0x0f, 0x76, 0x69, 0x73, 0x69,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x69, 0x73, 0x69, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x16, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x11,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x66, 0x69, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x76, 0x0a, 0x21, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1e,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57,
	0x0a, 0x16, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x1a, 0x72, 0x75, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x1a, 0x77, 0x65,
	0x62, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x17, 0x77, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0xb7, 0x01, 0x0a, 0x14, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x47, 0x0a, 0x11, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x61, 0x6e,
	0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x10, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x73, 0x12, 0x56, 0x0a, 0x16, 0x72, 0x65,
	0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x72, 0x65, 0x73,
	0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x73, 0x22, 0xac, 0x01, 0x0a, 0x17, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x20,
	0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65,
	0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72,
	0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x22, 0xa5, 0x01, 0x0a, 0x17, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x32, 0x0a, 0x06, 0x48, 0x65, 0x61,
	0x64, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x3a, 0x0a,
	0x1e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x18, 0x0a, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x67, 0x72, 0x61, 0x6e, 0x74, 0x65, 0x64, 0x22, 0x67, 0x0a, 0x0f, 0x46, 0x69, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x74,
	0x68, 0x73, 0x12, 0x3e, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x68, 0x73, 0x5f, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x52, 0x0d, 0x70, 0x61, 0x74, 0x68, 0x73, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x22, 0x97, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6c, 0x65, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x26, 0x0a, 0x0f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f,
	0x69, 0x73, 0x5f, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x73, 0x53, 0x65, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x69,
	0x73, 0x5f, 0x64, 0x69, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x69, 0x73, 0x44,
	0x69, 0x72, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x65,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x6c, 0x65, 0x6e, 0x22, 0x53, 0x0a, 0x14,
	0x43, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x22, 0xc4, 0x01, 0x0a, 0x11, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x43, 0x0a, 0x10, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x6f,
	0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x0e, 0x6d, 0x6f,
	0x75, 0x73, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0a,
	0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x09, 0x6c, 0x69, 0x6e, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x15, 0x0a, 0x13, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x41, 0x0a, 0x10, 0x54, 0x61, 0x62, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2d, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x07, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x22, 0x51, 0x0a, 0x11, 0x50,
	0x61, 0x6e, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74,
	0x52, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x22, 0x56,
	0x0a, 0x0c, 0x50, 0x61, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x29, 0x0a, 0x05, 0x70,
	0x61, 0x6e, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x05, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x0f, 0x53, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x04, 0x74, 0x61, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f,
	0x52, 0x04, 0x74, 0x61, 0x62, 0x73, 0x12, 0x2d, 0x0a, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x4d, 0x61, 0x6e, 0x69, 0x66, 0x65, 0x73, 0x74, 0x52, 0x05,
	0x70, 0x61, 0x6e, 0x65, 0x73, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10,
	0x69, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x42, 0x0a, 0x11, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6c, 0x61,
	0x79, 0x6f, 0x75, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x10, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x61, 0x79,
	0x6f, 0x75, 0x74, 0x73, 0x22, 0x38, 0x0a, 0x0a, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x4f,
	0x0a, 0x14, 0x52, 0x65, 0x73, 0x75, 0x72, 0x72, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xea, 0x06, 0x0a, 0x08, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f,
	0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x69,
	0x73, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x66,
	0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x1f, 0x0a,
	0x0b, 0x69, 0x73, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x23,
	0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73, 0x73, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53, 0x75, 0x70, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x78, 0x69,
	0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x78, 0x69, 0x74, 0x65,
	0x64, 0x12, 0x24, 0x0a, 0x0b, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x78, 0x69, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x68, 0x65,
	0x6c, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x48, 0x65, 0x6c, 0x64,
	0x12, 0x15, 0x0a, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x05, 0x70, 0x61, 0x6e, 0x65, 0x58, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x70, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x58, 0x12, 0x15, 0x0a,
	0x06, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x70,
	0x61, 0x6e, 0x65, 0x59, 0x12, 0x24, 0x0a, 0x0e, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x5f, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x61,
	0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x59, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x61,
	0x6e, 0x65, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70,
	0x61, 0x6e, 0x65, 0x52, 0x6f, 0x77, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x72, 0x6f, 0x77, 0x73, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x70, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x77, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x14, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x70, 0x61, 0x6e, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x73, 0x12, 0x56, 0x0a, 0x1a, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x5f, 0x69,
	0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x01, 0x52, 0x17, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6f, 0x72,
	0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73, 0x49, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x10, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x22, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x55, 0x72,
	0x6c, 0x88, 0x01, 0x01, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x53,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x65, 0x78,
	0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x5f, 0x63, 0x75,
	0x72, 0x73, 0x6f, 0x72, 0x5f, 0x63, 0x6f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x74, 0x65, 0x73,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x74, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0d, 0x0a,
	0x0b, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x22, 0xd2, 0x03, 0x0a,
	0x07, 0x54, 0x61, 0x62, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x12, 0x22, 0x0a, 0x0d, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x69, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x54, 0x6f,
	0x48, 0x69, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x66, 0x75, 0x6c, 0x6c, 0x73,
	0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x12, 0x69, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x79, 0x6e,
	0x63, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x79, 0x6e, 0x63, 0x50, 0x61, 0x6e, 0x65,
	0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x3b, 0x0a, 0x1a, 0x61, 0x72, 0x65, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x73, 0x5f, 0x76, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x17, 0x61, 0x72, 0x65,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x73, 0x56, 0x69, 0x73,
	0x69, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x5f, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20,
	0x03, 0x28, 0x0d, 0x52, 0x13, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65,
	0x64, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x3a, 0x0a, 0x17, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x14, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x4e, 0x61, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x2f, 0x0a, 0x14, 0x69, 0x73, 0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f,
	0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x64, 0x69, 0x72, 0x74, 0x79, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x11, 0x69, 0x73, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x44, 0x69, 0x72, 0x74, 0x79, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x5f, 0x73, 0x77, 0x61, 0x70, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x9c, 0x02, 0x0a, 0x11, 0x4d, 0x6f, 0x64, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x62, 0x69, 0x6e, 0x64,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x62, 0x69, 0x6e, 0x64, 0x73, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x62, 0x69, 0x6e, 0x64, 0x73, 0x12,
	0x26, 0x0a, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x53, 0x74, 0x79, 0x6c, 0x65,
	0x52, 0x05, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x61, 0x72, 0x72, 0x6f, 0x77,
	0x5f, 0x66, 0x6f, 0x6e, 0x74, 0x73, 0x5f, 0x73, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x46, 0x6f, 0x6e, 0x74, 0x73,
	0x53, 0x75, 0x70, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x71, 0x0a, 0x11, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x4b, 0x65, 0x79,
	0x62, 0x69, 0x6e, 0x64, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x6d, 0x6f, 0x64, 0x65, 0x12, 0x2d, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x62, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x42,
	0x69, 0x6e, 0x64, 0x22, 0x55, 0x0a, 0x07, 0x4b, 0x65, 0x79, 0x42, 0x69, 0x6e, 0x64, 0x12, 0x1e,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x6b, 0x65, 0x79, 0x2e, 0x4b, 0x65, 0x79, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2a, 0xef, 0x02, 0x0a, 0x09, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x6f, 0x64, 0x65,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x61, 0x62, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x61, 0x6e, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x10, 0x04, 0x12, 0x09, 0x0a, 0x05, 0x54,
	0x69, 0x6d, 0x65, 0x72, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x70, 0x79, 0x54, 0x6f,
	0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x6c, 0x69, 0x70, 0x62, 0x6f, 0x61, 0x72, 0x64, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x52, 0x65, 0x63, 0x65, 0x69, 0x76, 0x65, 0x64, 0x10, 0x08, 0x12, 0x0b, 0x0a, 0x07, 0x56, 0x69,
	0x73, 0x69, 0x62, 0x6c, 0x65, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x10, 0x0a, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x10, 0x0b,
	0x12, 0x12, 0x0a, 0x0e, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x65,
	0x61, 0x64, 0x10, 0x0c, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x0d, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x10, 0x0e,
	0x12, 0x1b, 0x0a, 0x17, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x0f, 0x12, 0x11, 0x0a,
	0x0d, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x10, 0x10,
	0x12, 0x14, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x10, 0x12, 0x2a, 0x37, 0x0a, 0x0f,
	0x43, 0x6f, 0x70, 0x79, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0b, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07,
	0x50, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x10, 0x02, 0x2a, 0x82, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x4d,
	0x6f, 0x75, 0x73, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01,
	0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69,
	0x63, 0x6b, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x6f, 0x75, 0x73,
	0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_event_proto_rawDescOnce sync.Once
	file_event_proto_rawDescData = file_event_proto_rawDesc
)

func file_event_proto_rawDescGZIP() []byte {
	file_event_proto_rawDescOnce.Do(func() {
		file_event_proto_rawDescData = protoimpl.X.CompressGZIP(file_event_proto_rawDescData)
	})
	return file_event_proto_rawDescData
}

var file_event_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_event_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_event_proto_goTypes = []interface{}{
	(EventType)(0),                         // 0: api.event.EventType
	(CopyDestination)(0),                   // 1: api.event.CopyDestination
	(MouseEventName)(0),                    // 2: api.event.MouseEventName
	(*EventNameList)(nil),                  // 3: api.event.EventNameList
	(*Event)(nil),                          // 4: api.event.Event
	(*SessionUpdatePayload)(nil),           // 5: api.event.SessionUpdatePayload
	(*RunCommandResultPayload)(nil),        // 6: api.event.RunCommandResultPayload
	(*WebRequestResultPayload)(nil),        // 7: api.event.WebRequestResultPayload
	(*Header)(nil),                         // 8: api.event.Header
	(*PermissionRequestResultPayload)(nil), // 9: api.event.PermissionRequestResultPayload
	(*FileListPayload)(nil),                // 10: api.event.FileListPayload
	(*FileMetadata)(nil),                   // 11: api.event.FileMetadata
	(*CustomMessagePayload)(nil),           // 12: api.event.CustomMessagePayload
	(*MouseEventPayload)(nil),              // 13: api.event.MouseEventPayload
	(*TabUpdatePayload)(nil),               // 14: api.event.TabUpdatePayload
	(*PaneUpdatePayload)(nil),              // 15: api.event.PaneUpdatePayload
	(*PaneManifest)(nil),                   // 16: api.event.PaneManifest
	(*SessionManifest)(nil),                // 17: api.event.SessionManifest
	(*LayoutInfo)(nil),                     // 18: api.event.LayoutInfo
	(*ResurrectableSession)(nil),           // 19: api.event.ResurrectableSession
	(*PaneInfo)(nil),                       // 20: api.event.PaneInfo
	(*TabInfo)(nil),                        // 21: api.event.TabInfo
	(*ModeUpdatePayload)(nil),              // 22: api.event.ModeUpdatePayload
	(*InputModeKeybinds)(nil),              // 23: api.event.InputModeKeybinds
	(*KeyBind)(nil),                        // 24: api.event.KeyBind
	(*Key)(nil),                            // 25: api.key.Key
	(*ContextItem)(nil),                    // 26: api.shared.ContextItem
	(*Position)(nil),                       // 27: api.action.Position
	(InputMode)(0),                         // 28: api.input_mode.InputMode
	(*Style)(nil),                          // 29: api.style.Style
	(*Action)(nil),                         // 30: api.action.Action
}
var file_event_proto_depIdxs = []int32{
	0,  // 0: api.event.EventNameList.event_types:type_name -> api.event.EventType
	0,  // 1: api.event.Event.name:type_name -> api.event.EventType
	22, // 2: api.event.Event.mode_update_payload:type_name -> api.event.ModeUpdatePayload
	14, // 3: api.event.Event.tab_update_payload:type_name -> api.event.TabUpdatePayload
	15, // 4: api.event.Event.pane_update_payload:type_name -> api.event.PaneUpdatePayload
	25, // 5: api.event.Event.key_payload:type_name -> api.key.Key
	13, // 6: api.event.Event.mouse_event_payload:type_name -> api.event.MouseEventPayload
	1,  // 7: api.event.Event.copy_to_clipboard_payload:type_name -> api.event.CopyDestination
	12, // 8: api.event.Event.custom_message_payload:type_name -> api.event.CustomMessagePayload
	10, // 9: api.event.Event.file_list_payload:type_name -> api.event.FileListPayload
	9,  // 10: api.event.Event.permission_request_result_payload:type_name -> api.event.PermissionRequestResultPayload
	5,  // 11: api.event.Event.session_update_payload:type_name -> api.event.SessionUpdatePayload
	6,  // 12: api.event.Event.run_command_result_payload:type_name -> api.event.RunCommandResultPayload
	7,  // 13: api.event.Event.web_request_result_payload:type_name -> api.event.WebRequestResultPayload
	17, // 14: api.event.SessionUpdatePayload.session_manifests:type_name -> api.event.SessionManifest
	19, // 15: api.event.SessionUpdatePayload.resurrectable_sessions:type_name -> api.event.ResurrectableSession
	26, // 16: api.event.RunCommandResultPayload.context:type_name -> api.shared.ContextItem
	8,  // 17: api.event.WebRequestResultPayload.headers:type_name -> api.event.Header
	26, // 18: api.event.WebRequestResultPayload.context:type_name -> api.shared.ContextItem
	11, // 19: api.event.FileListPayload.paths_metadata:type_name -> api.event.FileMetadata
	2,  // 20: api.event.MouseEventPayload.mouse_event_name:type_name -> api.event.MouseEventName
	27, // 21: api.event.MouseEventPayload.position:type_name -> api.action.Position
	21, // 22: api.event.TabUpdatePayload.tab_info:type_name -> api.event.TabInfo
	16, // 23: api.event.PaneUpdatePayload.pane_manifest:type_name -> api.event.PaneManifest
	20, // 24: api.event.PaneManifest.panes:type_name -> api.event.PaneInfo
	21, // 25: api.event.SessionManifest.tabs:type_name -> api.event.TabInfo
	16, // 26: api.event.SessionManifest.panes:type_name -> api.event.PaneManifest
	18, // 27: api.event.SessionManifest.available_layouts:type_name -> api.event.LayoutInfo
	27, // 28: api.event.PaneInfo.cursor_coordinates_in_pane:type_name -> api.action.Position
	28, // 29: api.event.ModeUpdatePayload.current_mode:type_name -> api.input_mode.InputMode
	23, // 30: api.event.ModeUpdatePayload.keybinds:type_name -> api.event.InputModeKeybinds
	29, // 31: api.event.ModeUpdatePayload.style:type_name -> api.style.Style
	28, // 32: api.event.InputModeKeybinds.mode:type_name -> api.input_mode.InputMode
	24, // 33: api.event.InputModeKeybinds.key_bind:type_name -> api.event.KeyBind
	25, // 34: api.event.KeyBind.key:type_name -> api.key.Key
	30, // 35: api.event.KeyBind.action:type_name -> api.action.Action
	36, // [36:36] is the sub-list for method output_type
	36, // [36:36] is the sub-list for method input_type
	36, // [36:36] is the sub-list for extension type_name
	36, // [36:36] is the sub-list for extension extendee
	0,  // [0:36] is the sub-list for field type_name
}

func init() { file_event_proto_init() }
func file_event_proto_init() {
	if File_event_proto != nil {
		return
	}
	file_input_mode_proto_init()
	file_key_proto_init()
	file_style_proto_init()
	file_action_proto_init()
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_event_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventNameList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionUpdatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandResultPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRequestResultPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Header); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionRequestResultPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileListPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FileMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CustomMessagePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MouseEventPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabUpdatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaneUpdatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaneManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SessionManifest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LayoutInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResurrectableSession); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaneInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TabInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModeUpdatePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InputModeKeybinds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_event_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyBind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_event_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Event_ModeUpdatePayload)(nil),
		(*Event_TabUpdatePayload)(nil),
		(*Event_PaneUpdatePayload)(nil),
		(*Event_KeyPayload)(nil),
		(*Event_MouseEventPayload)(nil),
		(*Event_TimerPayload)(nil),
		(*Event_CopyToClipboardPayload)(nil),
		(*Event_VisiblePayload)(nil),
		(*Event_CustomMessagePayload)(nil),
		(*Event_FileListPayload)(nil),
		(*Event_PermissionRequestResultPayload)(nil),
		(*Event_SessionUpdatePayload)(nil),
		(*Event_RunCommandResultPayload)(nil),
		(*Event_WebRequestResultPayload)(nil),
	}
	file_event_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_event_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*MouseEventPayload_LineCount)(nil),
		(*MouseEventPayload_Position)(nil),
	}
	file_event_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_event_proto_msgTypes[18].OneofWrappers = []interface{}{}
	file_event_proto_msgTypes[19].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_event_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_event_proto_goTypes,
		DependencyIndexes: file_event_proto_depIdxs,
		EnumInfos:         file_event_proto_enumTypes,
		MessageInfos:      file_event_proto_msgTypes,
	}.Build()
	File_event_proto = out.File
	file_event_proto_rawDesc = nil
	file_event_proto_goTypes = nil
	file_event_proto_depIdxs = nil
}
