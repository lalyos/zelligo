// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.0
// source: style.proto

package zelligo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ColorType int32

const (
	ColorType_Rgb      ColorType = 0
	ColorType_EightBit ColorType = 1
)

// Enum value maps for ColorType.
var (
	ColorType_name = map[int32]string{
		0: "Rgb",
		1: "EightBit",
	}
	ColorType_value = map[string]int32{
		"Rgb":      0,
		"EightBit": 1,
	}
)

func (x ColorType) Enum() *ColorType {
	p := new(ColorType)
	*p = x
	return p
}

func (x ColorType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColorType) Descriptor() protoreflect.EnumDescriptor {
	return file_style_proto_enumTypes[0].Descriptor()
}

func (ColorType) Type() protoreflect.EnumType {
	return &file_style_proto_enumTypes[0]
}

func (x ColorType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColorType.Descriptor instead.
func (ColorType) EnumDescriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{0}
}

type ThemeHue int32

const (
	ThemeHue_Dark  ThemeHue = 0
	ThemeHue_Light ThemeHue = 1
)

// Enum value maps for ThemeHue.
var (
	ThemeHue_name = map[int32]string{
		0: "Dark",
		1: "Light",
	}
	ThemeHue_value = map[string]int32{
		"Dark":  0,
		"Light": 1,
	}
)

func (x ThemeHue) Enum() *ThemeHue {
	p := new(ThemeHue)
	*p = x
	return p
}

func (x ThemeHue) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ThemeHue) Descriptor() protoreflect.EnumDescriptor {
	return file_style_proto_enumTypes[1].Descriptor()
}

func (ThemeHue) Type() protoreflect.EnumType {
	return &file_style_proto_enumTypes[1]
}

func (x ThemeHue) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ThemeHue.Descriptor instead.
func (ThemeHue) EnumDescriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{1}
}

type Style struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Palette         *Palette `protobuf:"bytes,1,opt,name=palette,proto3" json:"palette,omitempty"`
	RoundedCorners  bool     `protobuf:"varint,2,opt,name=rounded_corners,json=roundedCorners,proto3" json:"rounded_corners,omitempty"`
	HideSessionName bool     `protobuf:"varint,3,opt,name=hide_session_name,json=hideSessionName,proto3" json:"hide_session_name,omitempty"`
}

func (x *Style) Reset() {
	*x = Style{}
	if protoimpl.UnsafeEnabled {
		mi := &file_style_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Style) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Style) ProtoMessage() {}

func (x *Style) ProtoReflect() protoreflect.Message {
	mi := &file_style_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Style.ProtoReflect.Descriptor instead.
func (*Style) Descriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{0}
}

func (x *Style) GetPalette() *Palette {
	if x != nil {
		return x.Palette
	}
	return nil
}

func (x *Style) GetRoundedCorners() bool {
	if x != nil {
		return x.RoundedCorners
	}
	return false
}

func (x *Style) GetHideSessionName() bool {
	if x != nil {
		return x.HideSessionName
	}
	return false
}

type Palette struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ThemeHue ThemeHue `protobuf:"varint,1,opt,name=theme_hue,json=themeHue,proto3,enum=api.style.ThemeHue" json:"theme_hue,omitempty"`
	Fg       *Color   `protobuf:"bytes,2,opt,name=fg,proto3" json:"fg,omitempty"`
	Bg       *Color   `protobuf:"bytes,3,opt,name=bg,proto3" json:"bg,omitempty"`
	Black    *Color   `protobuf:"bytes,4,opt,name=black,proto3" json:"black,omitempty"`
	Red      *Color   `protobuf:"bytes,5,opt,name=red,proto3" json:"red,omitempty"`
	Green    *Color   `protobuf:"bytes,6,opt,name=green,proto3" json:"green,omitempty"`
	Yellow   *Color   `protobuf:"bytes,7,opt,name=yellow,proto3" json:"yellow,omitempty"`
	Blue     *Color   `protobuf:"bytes,8,opt,name=blue,proto3" json:"blue,omitempty"`
	Magenta  *Color   `protobuf:"bytes,9,opt,name=magenta,proto3" json:"magenta,omitempty"`
	Cyan     *Color   `protobuf:"bytes,10,opt,name=cyan,proto3" json:"cyan,omitempty"`
	White    *Color   `protobuf:"bytes,11,opt,name=white,proto3" json:"white,omitempty"`
	Orange   *Color   `protobuf:"bytes,12,opt,name=orange,proto3" json:"orange,omitempty"`
	Gray     *Color   `protobuf:"bytes,13,opt,name=gray,proto3" json:"gray,omitempty"`
	Purple   *Color   `protobuf:"bytes,14,opt,name=purple,proto3" json:"purple,omitempty"`
	Gold     *Color   `protobuf:"bytes,15,opt,name=gold,proto3" json:"gold,omitempty"`
	Silver   *Color   `protobuf:"bytes,16,opt,name=silver,proto3" json:"silver,omitempty"`
	Pink     *Color   `protobuf:"bytes,17,opt,name=pink,proto3" json:"pink,omitempty"`
	Brown    *Color   `protobuf:"bytes,18,opt,name=brown,proto3" json:"brown,omitempty"`
}

func (x *Palette) Reset() {
	*x = Palette{}
	if protoimpl.UnsafeEnabled {
		mi := &file_style_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Palette) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Palette) ProtoMessage() {}

func (x *Palette) ProtoReflect() protoreflect.Message {
	mi := &file_style_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Palette.ProtoReflect.Descriptor instead.
func (*Palette) Descriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{1}
}

func (x *Palette) GetThemeHue() ThemeHue {
	if x != nil {
		return x.ThemeHue
	}
	return ThemeHue_Dark
}

func (x *Palette) GetFg() *Color {
	if x != nil {
		return x.Fg
	}
	return nil
}

func (x *Palette) GetBg() *Color {
	if x != nil {
		return x.Bg
	}
	return nil
}

func (x *Palette) GetBlack() *Color {
	if x != nil {
		return x.Black
	}
	return nil
}

func (x *Palette) GetRed() *Color {
	if x != nil {
		return x.Red
	}
	return nil
}

func (x *Palette) GetGreen() *Color {
	if x != nil {
		return x.Green
	}
	return nil
}

func (x *Palette) GetYellow() *Color {
	if x != nil {
		return x.Yellow
	}
	return nil
}

func (x *Palette) GetBlue() *Color {
	if x != nil {
		return x.Blue
	}
	return nil
}

func (x *Palette) GetMagenta() *Color {
	if x != nil {
		return x.Magenta
	}
	return nil
}

func (x *Palette) GetCyan() *Color {
	if x != nil {
		return x.Cyan
	}
	return nil
}

func (x *Palette) GetWhite() *Color {
	if x != nil {
		return x.White
	}
	return nil
}

func (x *Palette) GetOrange() *Color {
	if x != nil {
		return x.Orange
	}
	return nil
}

func (x *Palette) GetGray() *Color {
	if x != nil {
		return x.Gray
	}
	return nil
}

func (x *Palette) GetPurple() *Color {
	if x != nil {
		return x.Purple
	}
	return nil
}

func (x *Palette) GetGold() *Color {
	if x != nil {
		return x.Gold
	}
	return nil
}

func (x *Palette) GetSilver() *Color {
	if x != nil {
		return x.Silver
	}
	return nil
}

func (x *Palette) GetPink() *Color {
	if x != nil {
		return x.Pink
	}
	return nil
}

func (x *Palette) GetBrown() *Color {
	if x != nil {
		return x.Brown
	}
	return nil
}

type Color struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ColorType ColorType `protobuf:"varint,1,opt,name=color_type,json=colorType,proto3,enum=api.style.ColorType" json:"color_type,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*Color_RgbColorPayload
	//	*Color_EightBitColorPayload
	Payload isColor_Payload `protobuf_oneof:"payload"`
}

func (x *Color) Reset() {
	*x = Color{}
	if protoimpl.UnsafeEnabled {
		mi := &file_style_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Color) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Color) ProtoMessage() {}

func (x *Color) ProtoReflect() protoreflect.Message {
	mi := &file_style_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Color.ProtoReflect.Descriptor instead.
func (*Color) Descriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{2}
}

func (x *Color) GetColorType() ColorType {
	if x != nil {
		return x.ColorType
	}
	return ColorType_Rgb
}

func (m *Color) GetPayload() isColor_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *Color) GetRgbColorPayload() *RgbColorPayload {
	if x, ok := x.GetPayload().(*Color_RgbColorPayload); ok {
		return x.RgbColorPayload
	}
	return nil
}

func (x *Color) GetEightBitColorPayload() uint32 {
	if x, ok := x.GetPayload().(*Color_EightBitColorPayload); ok {
		return x.EightBitColorPayload
	}
	return 0
}

type isColor_Payload interface {
	isColor_Payload()
}

type Color_RgbColorPayload struct {
	RgbColorPayload *RgbColorPayload `protobuf:"bytes,2,opt,name=rgb_color_payload,json=rgbColorPayload,proto3,oneof"`
}

type Color_EightBitColorPayload struct {
	EightBitColorPayload uint32 `protobuf:"varint,3,opt,name=eight_bit_color_payload,json=eightBitColorPayload,proto3,oneof"`
}

func (*Color_RgbColorPayload) isColor_Payload() {}

func (*Color_EightBitColorPayload) isColor_Payload() {}

type RgbColorPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Red   uint32 `protobuf:"varint,1,opt,name=red,proto3" json:"red,omitempty"`
	Green uint32 `protobuf:"varint,2,opt,name=green,proto3" json:"green,omitempty"`
	Blue  uint32 `protobuf:"varint,3,opt,name=blue,proto3" json:"blue,omitempty"`
}

func (x *RgbColorPayload) Reset() {
	*x = RgbColorPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_style_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RgbColorPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RgbColorPayload) ProtoMessage() {}

func (x *RgbColorPayload) ProtoReflect() protoreflect.Message {
	mi := &file_style_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RgbColorPayload.ProtoReflect.Descriptor instead.
func (*RgbColorPayload) Descriptor() ([]byte, []int) {
	return file_style_proto_rawDescGZIP(), []int{3}
}

func (x *RgbColorPayload) GetRed() uint32 {
	if x != nil {
		return x.Red
	}
	return 0
}

func (x *RgbColorPayload) GetGreen() uint32 {
	if x != nil {
		return x.Green
	}
	return 0
}

func (x *RgbColorPayload) GetBlue() uint32 {
	if x != nil {
		return x.Blue
	}
	return 0
}

var File_style_proto protoreflect.FileDescriptor

var file_style_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x22, 0x8a, 0x01, 0x0a, 0x05, 0x53, 0x74, 0x79,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,
	0x50, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65, 0x52, 0x07, 0x70, 0x61, 0x6c, 0x65, 0x74, 0x74, 0x65,
	0x12, 0x27, 0x0a, 0x0f, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x72, 0x6e,
	0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x72, 0x6f, 0x75, 0x6e, 0x64,
	0x65, 0x64, 0x43, 0x6f, 0x72, 0x6e, 0x65, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x11, 0x68, 0x69, 0x64,
	0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x68, 0x69, 0x64, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0xd5, 0x05, 0x0a, 0x07, 0x50, 0x61, 0x6c, 0x65, 0x74, 0x74,
	0x65, 0x12, 0x30, 0x0a, 0x09, 0x74, 0x68, 0x65, 0x6d, 0x65, 0x5f, 0x68, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x2e, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x75, 0x65, 0x52, 0x08, 0x74, 0x68, 0x65, 0x6d, 0x65,
	0x48, 0x75, 0x65, 0x12, 0x20, 0x0a, 0x02, 0x66, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f,
	0x72, 0x52, 0x02, 0x66, 0x67, 0x12, 0x20, 0x0a, 0x02, 0x62, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f,
	0x6c, 0x6f, 0x72, 0x52, 0x02, 0x62, 0x67, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79,
	0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x62, 0x6c, 0x61, 0x63, 0x6b, 0x12,
	0x22, 0x0a, 0x03, 0x72, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x03,
	0x72, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43,
	0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x28, 0x0a, 0x06, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x79,
	0x65, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x6d,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x07,
	0x6d, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x61, 0x12, 0x24, 0x0a, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x04, 0x63, 0x79, 0x61, 0x6e, 0x12, 0x26, 0x0a,
	0x05, 0x77, 0x68, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05,
	0x77, 0x68, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x6f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x67, 0x72, 0x61, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x04, 0x67, 0x72, 0x61, 0x79, 0x12, 0x28, 0x0a, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x70, 0x75, 0x72, 0x70, 0x6c, 0x65, 0x12,
	0x24, 0x0a, 0x04, 0x67, 0x6f, 0x6c, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x04, 0x67, 0x6f, 0x6c, 0x64, 0x12, 0x28, 0x0a, 0x06, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c,
	0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x06, 0x73, 0x69, 0x6c, 0x76, 0x65, 0x72, 0x12,
	0x24, 0x0a, 0x04, 0x70, 0x69, 0x6e, 0x6b, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52,
	0x04, 0x70, 0x69, 0x6e, 0x6b, 0x12, 0x26, 0x0a, 0x05, 0x62, 0x72, 0x6f, 0x77, 0x6e, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65,
	0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x52, 0x05, 0x62, 0x72, 0x6f, 0x77, 0x6e, 0x22, 0xca, 0x01,
	0x0a, 0x05, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x6f, 0x72,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x73, 0x74, 0x79, 0x6c, 0x65, 0x2e, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x48, 0x0a, 0x11,
	0x72, 0x67, 0x62, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x74,
	0x79, 0x6c, 0x65, 0x2e, 0x52, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x72, 0x67, 0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x65, 0x69, 0x67, 0x68, 0x74, 0x5f,
	0x62, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x14, 0x65, 0x69, 0x67, 0x68, 0x74,
	0x42, 0x69, 0x74, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42,
	0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4d, 0x0a, 0x0f, 0x52, 0x67,
	0x62, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x03, 0x72, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x67, 0x72, 0x65, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05,
	0x67, 0x72, 0x65, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x62, 0x6c, 0x75, 0x65, 0x2a, 0x22, 0x0a, 0x09, 0x43, 0x6f, 0x6c,
	0x6f, 0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x52, 0x67, 0x62, 0x10, 0x00, 0x12,
	0x0c, 0x0a, 0x08, 0x45, 0x69, 0x67, 0x68, 0x74, 0x42, 0x69, 0x74, 0x10, 0x01, 0x2a, 0x1f, 0x0a,
	0x08, 0x54, 0x68, 0x65, 0x6d, 0x65, 0x48, 0x75, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x61, 0x72,
	0x6b, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x69, 0x67, 0x68, 0x74, 0x10, 0x01, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_style_proto_rawDescOnce sync.Once
	file_style_proto_rawDescData = file_style_proto_rawDesc
)

func file_style_proto_rawDescGZIP() []byte {
	file_style_proto_rawDescOnce.Do(func() {
		file_style_proto_rawDescData = protoimpl.X.CompressGZIP(file_style_proto_rawDescData)
	})
	return file_style_proto_rawDescData
}

var file_style_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_style_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_style_proto_goTypes = []interface{}{
	(ColorType)(0),          // 0: api.style.ColorType
	(ThemeHue)(0),           // 1: api.style.ThemeHue
	(*Style)(nil),           // 2: api.style.Style
	(*Palette)(nil),         // 3: api.style.Palette
	(*Color)(nil),           // 4: api.style.Color
	(*RgbColorPayload)(nil), // 5: api.style.RgbColorPayload
}
var file_style_proto_depIdxs = []int32{
	3,  // 0: api.style.Style.palette:type_name -> api.style.Palette
	1,  // 1: api.style.Palette.theme_hue:type_name -> api.style.ThemeHue
	4,  // 2: api.style.Palette.fg:type_name -> api.style.Color
	4,  // 3: api.style.Palette.bg:type_name -> api.style.Color
	4,  // 4: api.style.Palette.black:type_name -> api.style.Color
	4,  // 5: api.style.Palette.red:type_name -> api.style.Color
	4,  // 6: api.style.Palette.green:type_name -> api.style.Color
	4,  // 7: api.style.Palette.yellow:type_name -> api.style.Color
	4,  // 8: api.style.Palette.blue:type_name -> api.style.Color
	4,  // 9: api.style.Palette.magenta:type_name -> api.style.Color
	4,  // 10: api.style.Palette.cyan:type_name -> api.style.Color
	4,  // 11: api.style.Palette.white:type_name -> api.style.Color
	4,  // 12: api.style.Palette.orange:type_name -> api.style.Color
	4,  // 13: api.style.Palette.gray:type_name -> api.style.Color
	4,  // 14: api.style.Palette.purple:type_name -> api.style.Color
	4,  // 15: api.style.Palette.gold:type_name -> api.style.Color
	4,  // 16: api.style.Palette.silver:type_name -> api.style.Color
	4,  // 17: api.style.Palette.pink:type_name -> api.style.Color
	4,  // 18: api.style.Palette.brown:type_name -> api.style.Color
	0,  // 19: api.style.Color.color_type:type_name -> api.style.ColorType
	5,  // 20: api.style.Color.rgb_color_payload:type_name -> api.style.RgbColorPayload
	21, // [21:21] is the sub-list for method output_type
	21, // [21:21] is the sub-list for method input_type
	21, // [21:21] is the sub-list for extension type_name
	21, // [21:21] is the sub-list for extension extendee
	0,  // [0:21] is the sub-list for field type_name
}

func init() { file_style_proto_init() }
func file_style_proto_init() {
	if File_style_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_style_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Style); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_style_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Palette); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_style_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Color); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_style_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RgbColorPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_style_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Color_RgbColorPayload)(nil),
		(*Color_EightBitColorPayload)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_style_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_style_proto_goTypes,
		DependencyIndexes: file_style_proto_depIdxs,
		EnumInfos:         file_style_proto_enumTypes,
		MessageInfos:      file_style_proto_msgTypes,
	}.Build()
	File_style_proto = out.File
	file_style_proto_rawDesc = nil
	file_style_proto_goTypes = nil
	file_style_proto_depIdxs = nil
}
