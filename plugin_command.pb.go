// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.0
// source: plugin_command.proto

package zelligo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CommandName int32

const (
	CommandName_Subscribe                CommandName = 0
	CommandName_Unsubscribe              CommandName = 1
	CommandName_SetSelectable            CommandName = 2
	CommandName_GetPluginIds             CommandName = 3
	CommandName_GetZellijVersion         CommandName = 4
	CommandName_OpenFile                 CommandName = 5
	CommandName_OpenFileFloating         CommandName = 6
	CommandName_OpenTerminal             CommandName = 7
	CommandName_OpenTerminalFloating     CommandName = 8
	CommandName_OpenCommandPane          CommandName = 9
	CommandName_OpenCommandPaneFloating  CommandName = 10
	CommandName_SwitchTabTo              CommandName = 11
	CommandName_SetTimeout               CommandName = 12
	CommandName_ExecCmd                  CommandName = 13
	CommandName_PostMessageTo            CommandName = 14
	CommandName_PostMessageToPlugin      CommandName = 15
	CommandName_HideSelf                 CommandName = 16
	CommandName_ShowSelf                 CommandName = 17
	CommandName_SwitchToMode             CommandName = 18
	CommandName_NewTabsWithLayout        CommandName = 19
	CommandName_NewTab                   CommandName = 20
	CommandName_GoToNextTab              CommandName = 21
	CommandName_GoToPreviousTab          CommandName = 22
	CommandName_Resize                   CommandName = 23
	CommandName_ResizeWithDirection      CommandName = 24
	CommandName_FocusNextPane            CommandName = 25
	CommandName_FocusPreviousPane        CommandName = 26
	CommandName_MoveFocus                CommandName = 27
	CommandName_MoveFocusOrTab           CommandName = 28
	CommandName_Detach                   CommandName = 29
	CommandName_EditScrollback           CommandName = 30
	CommandName_Write                    CommandName = 31
	CommandName_WriteChars               CommandName = 32
	CommandName_ToggleTab                CommandName = 33
	CommandName_MovePane                 CommandName = 34
	CommandName_MovePaneWithDirection    CommandName = 35
	CommandName_ClearScreen              CommandName = 36
	CommandName_ScrollUp                 CommandName = 37
	CommandName_ScrollDown               CommandName = 38
	CommandName_ScrollToTop              CommandName = 39
	CommandName_ScrollToBottom           CommandName = 40
	CommandName_PageScrollUp             CommandName = 41
	CommandName_PageScrollDown           CommandName = 42
	CommandName_ToggleFocusFullscreen    CommandName = 43
	CommandName_TogglePaneFrames         CommandName = 44
	CommandName_TogglePaneEmbedOrEject   CommandName = 45
	CommandName_UndoRenamePane           CommandName = 46
	CommandName_CloseFocus               CommandName = 47
	CommandName_ToggleActiveTabSync      CommandName = 48
	CommandName_CloseFocusedTab          CommandName = 49
	CommandName_UndoRenameTab            CommandName = 50
	CommandName_QuitZellij               CommandName = 51
	CommandName_PreviousSwapLayout       CommandName = 52
	CommandName_NextSwapLayout           CommandName = 53
	CommandName_GoToTabName              CommandName = 54
	CommandName_FocusOrCreateTab         CommandName = 55
	CommandName_GoToTab                  CommandName = 56
	CommandName_StartOrReloadPlugin      CommandName = 57
	CommandName_CloseTerminalPane        CommandName = 58
	CommandName_ClosePluginPane          CommandName = 59
	CommandName_FocusTerminalPane        CommandName = 60
	CommandName_FocusPluginPane          CommandName = 61
	CommandName_RenameTerminalPane       CommandName = 62
	CommandName_RenamePluginPane         CommandName = 63
	CommandName_RenameTab                CommandName = 64
	CommandName_ReportCrash              CommandName = 65
	CommandName_RequestPluginPermissions CommandName = 66
	CommandName_SwitchSession            CommandName = 67
	CommandName_OpenTerminalInPlace      CommandName = 68
	CommandName_OpenCommandInPlace       CommandName = 69
	CommandName_OpenFileInPlace          CommandName = 70
	CommandName_RunCommand               CommandName = 71
	CommandName_WebRequest               CommandName = 72
	CommandName_DeleteDeadSession        CommandName = 73
	CommandName_DeleteAllDeadSessions    CommandName = 74
	CommandName_RenameSession            CommandName = 75
	CommandName_UnblockCliPipeInput      CommandName = 76
	CommandName_BlockCliPipeInput        CommandName = 77
	CommandName_CliPipeOutput            CommandName = 78
	CommandName_MessageToPlugin          CommandName = 79
)

// Enum value maps for CommandName.
var (
	CommandName_name = map[int32]string{
		0:  "Subscribe",
		1:  "Unsubscribe",
		2:  "SetSelectable",
		3:  "GetPluginIds",
		4:  "GetZellijVersion",
		5:  "OpenFile",
		6:  "OpenFileFloating",
		7:  "OpenTerminal",
		8:  "OpenTerminalFloating",
		9:  "OpenCommandPane",
		10: "OpenCommandPaneFloating",
		11: "SwitchTabTo",
		12: "SetTimeout",
		13: "ExecCmd",
		14: "PostMessageTo",
		15: "PostMessageToPlugin",
		16: "HideSelf",
		17: "ShowSelf",
		18: "SwitchToMode",
		19: "NewTabsWithLayout",
		20: "NewTab",
		21: "GoToNextTab",
		22: "GoToPreviousTab",
		23: "Resize",
		24: "ResizeWithDirection",
		25: "FocusNextPane",
		26: "FocusPreviousPane",
		27: "MoveFocus",
		28: "MoveFocusOrTab",
		29: "Detach",
		30: "EditScrollback",
		31: "Write",
		32: "WriteChars",
		33: "ToggleTab",
		34: "MovePane",
		35: "MovePaneWithDirection",
		36: "ClearScreen",
		37: "ScrollUp",
		38: "ScrollDown",
		39: "ScrollToTop",
		40: "ScrollToBottom",
		41: "PageScrollUp",
		42: "PageScrollDown",
		43: "ToggleFocusFullscreen",
		44: "TogglePaneFrames",
		45: "TogglePaneEmbedOrEject",
		46: "UndoRenamePane",
		47: "CloseFocus",
		48: "ToggleActiveTabSync",
		49: "CloseFocusedTab",
		50: "UndoRenameTab",
		51: "QuitZellij",
		52: "PreviousSwapLayout",
		53: "NextSwapLayout",
		54: "GoToTabName",
		55: "FocusOrCreateTab",
		56: "GoToTab",
		57: "StartOrReloadPlugin",
		58: "CloseTerminalPane",
		59: "ClosePluginPane",
		60: "FocusTerminalPane",
		61: "FocusPluginPane",
		62: "RenameTerminalPane",
		63: "RenamePluginPane",
		64: "RenameTab",
		65: "ReportCrash",
		66: "RequestPluginPermissions",
		67: "SwitchSession",
		68: "OpenTerminalInPlace",
		69: "OpenCommandInPlace",
		70: "OpenFileInPlace",
		71: "RunCommand",
		72: "WebRequest",
		73: "DeleteDeadSession",
		74: "DeleteAllDeadSessions",
		75: "RenameSession",
		76: "UnblockCliPipeInput",
		77: "BlockCliPipeInput",
		78: "CliPipeOutput",
		79: "MessageToPlugin",
	}
	CommandName_value = map[string]int32{
		"Subscribe":                0,
		"Unsubscribe":              1,
		"SetSelectable":            2,
		"GetPluginIds":             3,
		"GetZellijVersion":         4,
		"OpenFile":                 5,
		"OpenFileFloating":         6,
		"OpenTerminal":             7,
		"OpenTerminalFloating":     8,
		"OpenCommandPane":          9,
		"OpenCommandPaneFloating":  10,
		"SwitchTabTo":              11,
		"SetTimeout":               12,
		"ExecCmd":                  13,
		"PostMessageTo":            14,
		"PostMessageToPlugin":      15,
		"HideSelf":                 16,
		"ShowSelf":                 17,
		"SwitchToMode":             18,
		"NewTabsWithLayout":        19,
		"NewTab":                   20,
		"GoToNextTab":              21,
		"GoToPreviousTab":          22,
		"Resize":                   23,
		"ResizeWithDirection":      24,
		"FocusNextPane":            25,
		"FocusPreviousPane":        26,
		"MoveFocus":                27,
		"MoveFocusOrTab":           28,
		"Detach":                   29,
		"EditScrollback":           30,
		"Write":                    31,
		"WriteChars":               32,
		"ToggleTab":                33,
		"MovePane":                 34,
		"MovePaneWithDirection":    35,
		"ClearScreen":              36,
		"ScrollUp":                 37,
		"ScrollDown":               38,
		"ScrollToTop":              39,
		"ScrollToBottom":           40,
		"PageScrollUp":             41,
		"PageScrollDown":           42,
		"ToggleFocusFullscreen":    43,
		"TogglePaneFrames":         44,
		"TogglePaneEmbedOrEject":   45,
		"UndoRenamePane":           46,
		"CloseFocus":               47,
		"ToggleActiveTabSync":      48,
		"CloseFocusedTab":          49,
		"UndoRenameTab":            50,
		"QuitZellij":               51,
		"PreviousSwapLayout":       52,
		"NextSwapLayout":           53,
		"GoToTabName":              54,
		"FocusOrCreateTab":         55,
		"GoToTab":                  56,
		"StartOrReloadPlugin":      57,
		"CloseTerminalPane":        58,
		"ClosePluginPane":          59,
		"FocusTerminalPane":        60,
		"FocusPluginPane":          61,
		"RenameTerminalPane":       62,
		"RenamePluginPane":         63,
		"RenameTab":                64,
		"ReportCrash":              65,
		"RequestPluginPermissions": 66,
		"SwitchSession":            67,
		"OpenTerminalInPlace":      68,
		"OpenCommandInPlace":       69,
		"OpenFileInPlace":          70,
		"RunCommand":               71,
		"WebRequest":               72,
		"DeleteDeadSession":        73,
		"DeleteAllDeadSessions":    74,
		"RenameSession":            75,
		"UnblockCliPipeInput":      76,
		"BlockCliPipeInput":        77,
		"CliPipeOutput":            78,
		"MessageToPlugin":          79,
	}
)

func (x CommandName) Enum() *CommandName {
	p := new(CommandName)
	*p = x
	return p
}

func (x CommandName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CommandName) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_command_proto_enumTypes[0].Descriptor()
}

func (CommandName) Type() protoreflect.EnumType {
	return &file_plugin_command_proto_enumTypes[0]
}

func (x CommandName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CommandName.Descriptor instead.
func (CommandName) EnumDescriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{0}
}

type PaneType int32

const (
	PaneType_Terminal PaneType = 0
	PaneType_Plugin   PaneType = 1
)

// Enum value maps for PaneType.
var (
	PaneType_name = map[int32]string{
		0: "Terminal",
		1: "Plugin",
	}
	PaneType_value = map[string]int32{
		"Terminal": 0,
		"Plugin":   1,
	}
)

func (x PaneType) Enum() *PaneType {
	p := new(PaneType)
	*p = x
	return p
}

func (x PaneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaneType) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_command_proto_enumTypes[1].Descriptor()
}

func (PaneType) Type() protoreflect.EnumType {
	return &file_plugin_command_proto_enumTypes[1]
}

func (x PaneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaneType.Descriptor instead.
func (PaneType) EnumDescriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{1}
}

type HttpVerb int32

const (
	HttpVerb_Get    HttpVerb = 0
	HttpVerb_Post   HttpVerb = 1
	HttpVerb_Put    HttpVerb = 2
	HttpVerb_Delete HttpVerb = 3
)

// Enum value maps for HttpVerb.
var (
	HttpVerb_name = map[int32]string{
		0: "Get",
		1: "Post",
		2: "Put",
		3: "Delete",
	}
	HttpVerb_value = map[string]int32{
		"Get":    0,
		"Post":   1,
		"Put":    2,
		"Delete": 3,
	}
)

func (x HttpVerb) Enum() *HttpVerb {
	p := new(HttpVerb)
	*p = x
	return p
}

func (x HttpVerb) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HttpVerb) Descriptor() protoreflect.EnumDescriptor {
	return file_plugin_command_proto_enumTypes[2].Descriptor()
}

func (HttpVerb) Type() protoreflect.EnumType {
	return &file_plugin_command_proto_enumTypes[2]
}

func (x HttpVerb) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HttpVerb.Descriptor instead.
func (HttpVerb) EnumDescriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{2}
}

type PluginCommand struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name CommandName `protobuf:"varint,1,opt,name=name,proto3,enum=api.plugin_command.CommandName" json:"name,omitempty"`
	// Types that are assignable to Payload:
	//
	//	*PluginCommand_SubscribePayload
	//	*PluginCommand_UnsubscribePayload
	//	*PluginCommand_SetSelectablePayload
	//	*PluginCommand_OpenFilePayload
	//	*PluginCommand_OpenFileFloatingPayload
	//	*PluginCommand_OpenTerminalPayload
	//	*PluginCommand_OpenTerminalFloatingPayload
	//	*PluginCommand_OpenCommandPanePayload
	//	*PluginCommand_OpenCommandPaneFloatingPayload
	//	*PluginCommand_SwitchTabToPayload
	//	*PluginCommand_SetTimeoutPayload
	//	*PluginCommand_ExecCmdPayload
	//	*PluginCommand_PostMessageToPayload
	//	*PluginCommand_PostMessageToPluginPayload
	//	*PluginCommand_ShowSelfPayload
	//	*PluginCommand_SwitchToModePayload
	//	*PluginCommand_NewTabsWithLayoutPayload
	//	*PluginCommand_ResizePayload
	//	*PluginCommand_ResizeWithDirectionPayload
	//	*PluginCommand_MoveFocusPayload
	//	*PluginCommand_MoveFocusOrTabPayload
	//	*PluginCommand_WritePayload
	//	*PluginCommand_WriteCharsPayload
	//	*PluginCommand_MovePaneWithDirectionPayload
	//	*PluginCommand_GoToTabNamePayload
	//	*PluginCommand_FocusOrCreateTabPayload
	//	*PluginCommand_GoToTabPayload
	//	*PluginCommand_StartOrReloadPluginPayload
	//	*PluginCommand_CloseTerminalPanePayload
	//	*PluginCommand_ClosePluginPanePayload
	//	*PluginCommand_FocusTerminalPanePayload
	//	*PluginCommand_FocusPluginPanePayload
	//	*PluginCommand_RenameTerminalPanePayload
	//	*PluginCommand_RenamePluginPanePayload
	//	*PluginCommand_RenameTabPayload
	//	*PluginCommand_ReportCrashPayload
	//	*PluginCommand_RequestPluginPermissionPayload
	//	*PluginCommand_SwitchSessionPayload
	//	*PluginCommand_OpenFileInPlacePayload
	//	*PluginCommand_OpenTerminalInPlacePayload
	//	*PluginCommand_OpenCommandPaneInPlacePayload
	//	*PluginCommand_RunCommandPayload
	//	*PluginCommand_WebRequestPayload
	//	*PluginCommand_DeleteDeadSessionPayload
	//	*PluginCommand_RenameSessionPayload
	//	*PluginCommand_UnblockCliPipeInputPayload
	//	*PluginCommand_BlockCliPipeInputPayload
	//	*PluginCommand_CliPipeOutputPayload
	//	*PluginCommand_MessageToPluginPayload
	Payload isPluginCommand_Payload `protobuf_oneof:"payload"`
}

func (x *PluginCommand) Reset() {
	*x = PluginCommand{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginCommand) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginCommand) ProtoMessage() {}

func (x *PluginCommand) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginCommand.ProtoReflect.Descriptor instead.
func (*PluginCommand) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{0}
}

func (x *PluginCommand) GetName() CommandName {
	if x != nil {
		return x.Name
	}
	return CommandName_Subscribe
}

func (m *PluginCommand) GetPayload() isPluginCommand_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *PluginCommand) GetSubscribePayload() *SubscribePayload {
	if x, ok := x.GetPayload().(*PluginCommand_SubscribePayload); ok {
		return x.SubscribePayload
	}
	return nil
}

func (x *PluginCommand) GetUnsubscribePayload() *UnsubscribePayload {
	if x, ok := x.GetPayload().(*PluginCommand_UnsubscribePayload); ok {
		return x.UnsubscribePayload
	}
	return nil
}

func (x *PluginCommand) GetSetSelectablePayload() bool {
	if x, ok := x.GetPayload().(*PluginCommand_SetSelectablePayload); ok {
		return x.SetSelectablePayload
	}
	return false
}

func (x *PluginCommand) GetOpenFilePayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenFilePayload); ok {
		return x.OpenFilePayload
	}
	return nil
}

func (x *PluginCommand) GetOpenFileFloatingPayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenFileFloatingPayload); ok {
		return x.OpenFileFloatingPayload
	}
	return nil
}

func (x *PluginCommand) GetOpenTerminalPayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenTerminalPayload); ok {
		return x.OpenTerminalPayload
	}
	return nil
}

func (x *PluginCommand) GetOpenTerminalFloatingPayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenTerminalFloatingPayload); ok {
		return x.OpenTerminalFloatingPayload
	}
	return nil
}

func (x *PluginCommand) GetOpenCommandPanePayload() *OpenCommandPanePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenCommandPanePayload); ok {
		return x.OpenCommandPanePayload
	}
	return nil
}

func (x *PluginCommand) GetOpenCommandPaneFloatingPayload() *OpenCommandPanePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenCommandPaneFloatingPayload); ok {
		return x.OpenCommandPaneFloatingPayload
	}
	return nil
}

func (x *PluginCommand) GetSwitchTabToPayload() *SwitchTabToPayload {
	if x, ok := x.GetPayload().(*PluginCommand_SwitchTabToPayload); ok {
		return x.SwitchTabToPayload
	}
	return nil
}

func (x *PluginCommand) GetSetTimeoutPayload() *SetTimeoutPayload {
	if x, ok := x.GetPayload().(*PluginCommand_SetTimeoutPayload); ok {
		return x.SetTimeoutPayload
	}
	return nil
}

func (x *PluginCommand) GetExecCmdPayload() *ExecCmdPayload {
	if x, ok := x.GetPayload().(*PluginCommand_ExecCmdPayload); ok {
		return x.ExecCmdPayload
	}
	return nil
}

func (x *PluginCommand) GetPostMessageToPayload() *PluginMessagePayload {
	if x, ok := x.GetPayload().(*PluginCommand_PostMessageToPayload); ok {
		return x.PostMessageToPayload
	}
	return nil
}

func (x *PluginCommand) GetPostMessageToPluginPayload() *PluginMessagePayload {
	if x, ok := x.GetPayload().(*PluginCommand_PostMessageToPluginPayload); ok {
		return x.PostMessageToPluginPayload
	}
	return nil
}

func (x *PluginCommand) GetShowSelfPayload() bool {
	if x, ok := x.GetPayload().(*PluginCommand_ShowSelfPayload); ok {
		return x.ShowSelfPayload
	}
	return false
}

func (x *PluginCommand) GetSwitchToModePayload() *SwitchToModePayload {
	if x, ok := x.GetPayload().(*PluginCommand_SwitchToModePayload); ok {
		return x.SwitchToModePayload
	}
	return nil
}

func (x *PluginCommand) GetNewTabsWithLayoutPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_NewTabsWithLayoutPayload); ok {
		return x.NewTabsWithLayoutPayload
	}
	return ""
}

func (x *PluginCommand) GetResizePayload() *ResizePayload {
	if x, ok := x.GetPayload().(*PluginCommand_ResizePayload); ok {
		return x.ResizePayload
	}
	return nil
}

func (x *PluginCommand) GetResizeWithDirectionPayload() *ResizePayload {
	if x, ok := x.GetPayload().(*PluginCommand_ResizeWithDirectionPayload); ok {
		return x.ResizeWithDirectionPayload
	}
	return nil
}

func (x *PluginCommand) GetMoveFocusPayload() *MovePayload {
	if x, ok := x.GetPayload().(*PluginCommand_MoveFocusPayload); ok {
		return x.MoveFocusPayload
	}
	return nil
}

func (x *PluginCommand) GetMoveFocusOrTabPayload() *MovePayload {
	if x, ok := x.GetPayload().(*PluginCommand_MoveFocusOrTabPayload); ok {
		return x.MoveFocusOrTabPayload
	}
	return nil
}

func (x *PluginCommand) GetWritePayload() []byte {
	if x, ok := x.GetPayload().(*PluginCommand_WritePayload); ok {
		return x.WritePayload
	}
	return nil
}

func (x *PluginCommand) GetWriteCharsPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_WriteCharsPayload); ok {
		return x.WriteCharsPayload
	}
	return ""
}

func (x *PluginCommand) GetMovePaneWithDirectionPayload() *MovePayload {
	if x, ok := x.GetPayload().(*PluginCommand_MovePaneWithDirectionPayload); ok {
		return x.MovePaneWithDirectionPayload
	}
	return nil
}

func (x *PluginCommand) GetGoToTabNamePayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_GoToTabNamePayload); ok {
		return x.GoToTabNamePayload
	}
	return ""
}

func (x *PluginCommand) GetFocusOrCreateTabPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_FocusOrCreateTabPayload); ok {
		return x.FocusOrCreateTabPayload
	}
	return ""
}

func (x *PluginCommand) GetGoToTabPayload() uint32 {
	if x, ok := x.GetPayload().(*PluginCommand_GoToTabPayload); ok {
		return x.GoToTabPayload
	}
	return 0
}

func (x *PluginCommand) GetStartOrReloadPluginPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_StartOrReloadPluginPayload); ok {
		return x.StartOrReloadPluginPayload
	}
	return ""
}

func (x *PluginCommand) GetCloseTerminalPanePayload() uint32 {
	if x, ok := x.GetPayload().(*PluginCommand_CloseTerminalPanePayload); ok {
		return x.CloseTerminalPanePayload
	}
	return 0
}

func (x *PluginCommand) GetClosePluginPanePayload() uint32 {
	if x, ok := x.GetPayload().(*PluginCommand_ClosePluginPanePayload); ok {
		return x.ClosePluginPanePayload
	}
	return 0
}

func (x *PluginCommand) GetFocusTerminalPanePayload() *PaneIdAndShouldFloat {
	if x, ok := x.GetPayload().(*PluginCommand_FocusTerminalPanePayload); ok {
		return x.FocusTerminalPanePayload
	}
	return nil
}

func (x *PluginCommand) GetFocusPluginPanePayload() *PaneIdAndShouldFloat {
	if x, ok := x.GetPayload().(*PluginCommand_FocusPluginPanePayload); ok {
		return x.FocusPluginPanePayload
	}
	return nil
}

func (x *PluginCommand) GetRenameTerminalPanePayload() *IdAndNewName {
	if x, ok := x.GetPayload().(*PluginCommand_RenameTerminalPanePayload); ok {
		return x.RenameTerminalPanePayload
	}
	return nil
}

func (x *PluginCommand) GetRenamePluginPanePayload() *IdAndNewName {
	if x, ok := x.GetPayload().(*PluginCommand_RenamePluginPanePayload); ok {
		return x.RenamePluginPanePayload
	}
	return nil
}

func (x *PluginCommand) GetRenameTabPayload() *IdAndNewName {
	if x, ok := x.GetPayload().(*PluginCommand_RenameTabPayload); ok {
		return x.RenameTabPayload
	}
	return nil
}

func (x *PluginCommand) GetReportCrashPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_ReportCrashPayload); ok {
		return x.ReportCrashPayload
	}
	return ""
}

func (x *PluginCommand) GetRequestPluginPermissionPayload() *RequestPluginPermissionPayload {
	if x, ok := x.GetPayload().(*PluginCommand_RequestPluginPermissionPayload); ok {
		return x.RequestPluginPermissionPayload
	}
	return nil
}

func (x *PluginCommand) GetSwitchSessionPayload() *SwitchSessionPayload {
	if x, ok := x.GetPayload().(*PluginCommand_SwitchSessionPayload); ok {
		return x.SwitchSessionPayload
	}
	return nil
}

func (x *PluginCommand) GetOpenFileInPlacePayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenFileInPlacePayload); ok {
		return x.OpenFileInPlacePayload
	}
	return nil
}

func (x *PluginCommand) GetOpenTerminalInPlacePayload() *OpenFilePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenTerminalInPlacePayload); ok {
		return x.OpenTerminalInPlacePayload
	}
	return nil
}

func (x *PluginCommand) GetOpenCommandPaneInPlacePayload() *OpenCommandPanePayload {
	if x, ok := x.GetPayload().(*PluginCommand_OpenCommandPaneInPlacePayload); ok {
		return x.OpenCommandPaneInPlacePayload
	}
	return nil
}

func (x *PluginCommand) GetRunCommandPayload() *RunCommandPayload {
	if x, ok := x.GetPayload().(*PluginCommand_RunCommandPayload); ok {
		return x.RunCommandPayload
	}
	return nil
}

func (x *PluginCommand) GetWebRequestPayload() *WebRequestPayload {
	if x, ok := x.GetPayload().(*PluginCommand_WebRequestPayload); ok {
		return x.WebRequestPayload
	}
	return nil
}

func (x *PluginCommand) GetDeleteDeadSessionPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_DeleteDeadSessionPayload); ok {
		return x.DeleteDeadSessionPayload
	}
	return ""
}

func (x *PluginCommand) GetRenameSessionPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_RenameSessionPayload); ok {
		return x.RenameSessionPayload
	}
	return ""
}

func (x *PluginCommand) GetUnblockCliPipeInputPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_UnblockCliPipeInputPayload); ok {
		return x.UnblockCliPipeInputPayload
	}
	return ""
}

func (x *PluginCommand) GetBlockCliPipeInputPayload() string {
	if x, ok := x.GetPayload().(*PluginCommand_BlockCliPipeInputPayload); ok {
		return x.BlockCliPipeInputPayload
	}
	return ""
}

func (x *PluginCommand) GetCliPipeOutputPayload() *CliPipeOutputPayload {
	if x, ok := x.GetPayload().(*PluginCommand_CliPipeOutputPayload); ok {
		return x.CliPipeOutputPayload
	}
	return nil
}

func (x *PluginCommand) GetMessageToPluginPayload() *MessageToPluginPayload {
	if x, ok := x.GetPayload().(*PluginCommand_MessageToPluginPayload); ok {
		return x.MessageToPluginPayload
	}
	return nil
}

type isPluginCommand_Payload interface {
	isPluginCommand_Payload()
}

type PluginCommand_SubscribePayload struct {
	SubscribePayload *SubscribePayload `protobuf:"bytes,2,opt,name=subscribe_payload,json=subscribePayload,proto3,oneof"`
}

type PluginCommand_UnsubscribePayload struct {
	UnsubscribePayload *UnsubscribePayload `protobuf:"bytes,3,opt,name=unsubscribe_payload,json=unsubscribePayload,proto3,oneof"`
}

type PluginCommand_SetSelectablePayload struct {
	SetSelectablePayload bool `protobuf:"varint,4,opt,name=set_selectable_payload,json=setSelectablePayload,proto3,oneof"`
}

type PluginCommand_OpenFilePayload struct {
	OpenFilePayload *OpenFilePayload `protobuf:"bytes,5,opt,name=open_file_payload,json=openFilePayload,proto3,oneof"`
}

type PluginCommand_OpenFileFloatingPayload struct {
	OpenFileFloatingPayload *OpenFilePayload `protobuf:"bytes,6,opt,name=open_file_floating_payload,json=openFileFloatingPayload,proto3,oneof"`
}

type PluginCommand_OpenTerminalPayload struct {
	OpenTerminalPayload *OpenFilePayload `protobuf:"bytes,7,opt,name=open_terminal_payload,json=openTerminalPayload,proto3,oneof"`
}

type PluginCommand_OpenTerminalFloatingPayload struct {
	OpenTerminalFloatingPayload *OpenFilePayload `protobuf:"bytes,8,opt,name=open_terminal_floating_payload,json=openTerminalFloatingPayload,proto3,oneof"`
}

type PluginCommand_OpenCommandPanePayload struct {
	OpenCommandPanePayload *OpenCommandPanePayload `protobuf:"bytes,9,opt,name=open_command_pane_payload,json=openCommandPanePayload,proto3,oneof"`
}

type PluginCommand_OpenCommandPaneFloatingPayload struct {
	OpenCommandPaneFloatingPayload *OpenCommandPanePayload `protobuf:"bytes,10,opt,name=open_command_pane_floating_payload,json=openCommandPaneFloatingPayload,proto3,oneof"`
}

type PluginCommand_SwitchTabToPayload struct {
	SwitchTabToPayload *SwitchTabToPayload `protobuf:"bytes,11,opt,name=switch_tab_to_payload,json=switchTabToPayload,proto3,oneof"`
}

type PluginCommand_SetTimeoutPayload struct {
	SetTimeoutPayload *SetTimeoutPayload `protobuf:"bytes,12,opt,name=set_timeout_payload,json=setTimeoutPayload,proto3,oneof"`
}

type PluginCommand_ExecCmdPayload struct {
	ExecCmdPayload *ExecCmdPayload `protobuf:"bytes,13,opt,name=exec_cmd_payload,json=execCmdPayload,proto3,oneof"`
}

type PluginCommand_PostMessageToPayload struct {
	PostMessageToPayload *PluginMessagePayload `protobuf:"bytes,14,opt,name=post_message_to_payload,json=postMessageToPayload,proto3,oneof"`
}

type PluginCommand_PostMessageToPluginPayload struct {
	PostMessageToPluginPayload *PluginMessagePayload `protobuf:"bytes,15,opt,name=post_message_to_plugin_payload,json=postMessageToPluginPayload,proto3,oneof"`
}

type PluginCommand_ShowSelfPayload struct {
	ShowSelfPayload bool `protobuf:"varint,16,opt,name=show_self_payload,json=showSelfPayload,proto3,oneof"`
}

type PluginCommand_SwitchToModePayload struct {
	SwitchToModePayload *SwitchToModePayload `protobuf:"bytes,17,opt,name=switch_to_mode_payload,json=switchToModePayload,proto3,oneof"`
}

type PluginCommand_NewTabsWithLayoutPayload struct {
	NewTabsWithLayoutPayload string `protobuf:"bytes,18,opt,name=new_tabs_with_layout_payload,json=newTabsWithLayoutPayload,proto3,oneof"`
}

type PluginCommand_ResizePayload struct {
	ResizePayload *ResizePayload `protobuf:"bytes,19,opt,name=resize_payload,json=resizePayload,proto3,oneof"`
}

type PluginCommand_ResizeWithDirectionPayload struct {
	ResizeWithDirectionPayload *ResizePayload `protobuf:"bytes,20,opt,name=resize_with_direction_payload,json=resizeWithDirectionPayload,proto3,oneof"`
}

type PluginCommand_MoveFocusPayload struct {
	MoveFocusPayload *MovePayload `protobuf:"bytes,21,opt,name=move_focus_payload,json=moveFocusPayload,proto3,oneof"`
}

type PluginCommand_MoveFocusOrTabPayload struct {
	MoveFocusOrTabPayload *MovePayload `protobuf:"bytes,22,opt,name=move_focus_or_tab_payload,json=moveFocusOrTabPayload,proto3,oneof"`
}

type PluginCommand_WritePayload struct {
	WritePayload []byte `protobuf:"bytes,23,opt,name=write_payload,json=writePayload,proto3,oneof"`
}

type PluginCommand_WriteCharsPayload struct {
	WriteCharsPayload string `protobuf:"bytes,24,opt,name=write_chars_payload,json=writeCharsPayload,proto3,oneof"`
}

type PluginCommand_MovePaneWithDirectionPayload struct {
	MovePaneWithDirectionPayload *MovePayload `protobuf:"bytes,25,opt,name=move_pane_with_direction_payload,json=movePaneWithDirectionPayload,proto3,oneof"`
}

type PluginCommand_GoToTabNamePayload struct {
	GoToTabNamePayload string `protobuf:"bytes,26,opt,name=go_to_tab_name_payload,json=goToTabNamePayload,proto3,oneof"`
}

type PluginCommand_FocusOrCreateTabPayload struct {
	FocusOrCreateTabPayload string `protobuf:"bytes,27,opt,name=focus_or_create_tab_payload,json=focusOrCreateTabPayload,proto3,oneof"`
}

type PluginCommand_GoToTabPayload struct {
	GoToTabPayload uint32 `protobuf:"varint,28,opt,name=go_to_tab_payload,json=goToTabPayload,proto3,oneof"`
}

type PluginCommand_StartOrReloadPluginPayload struct {
	StartOrReloadPluginPayload string `protobuf:"bytes,29,opt,name=start_or_reload_plugin_payload,json=startOrReloadPluginPayload,proto3,oneof"`
}

type PluginCommand_CloseTerminalPanePayload struct {
	CloseTerminalPanePayload uint32 `protobuf:"varint,30,opt,name=close_terminal_pane_payload,json=closeTerminalPanePayload,proto3,oneof"`
}

type PluginCommand_ClosePluginPanePayload struct {
	ClosePluginPanePayload uint32 `protobuf:"varint,31,opt,name=close_plugin_pane_payload,json=closePluginPanePayload,proto3,oneof"`
}

type PluginCommand_FocusTerminalPanePayload struct {
	FocusTerminalPanePayload *PaneIdAndShouldFloat `protobuf:"bytes,32,opt,name=focus_terminal_pane_payload,json=focusTerminalPanePayload,proto3,oneof"`
}

type PluginCommand_FocusPluginPanePayload struct {
	FocusPluginPanePayload *PaneIdAndShouldFloat `protobuf:"bytes,33,opt,name=focus_plugin_pane_payload,json=focusPluginPanePayload,proto3,oneof"`
}

type PluginCommand_RenameTerminalPanePayload struct {
	RenameTerminalPanePayload *IdAndNewName `protobuf:"bytes,34,opt,name=rename_terminal_pane_payload,json=renameTerminalPanePayload,proto3,oneof"`
}

type PluginCommand_RenamePluginPanePayload struct {
	RenamePluginPanePayload *IdAndNewName `protobuf:"bytes,35,opt,name=rename_plugin_pane_payload,json=renamePluginPanePayload,proto3,oneof"`
}

type PluginCommand_RenameTabPayload struct {
	RenameTabPayload *IdAndNewName `protobuf:"bytes,36,opt,name=rename_tab_payload,json=renameTabPayload,proto3,oneof"`
}

type PluginCommand_ReportCrashPayload struct {
	ReportCrashPayload string `protobuf:"bytes,37,opt,name=report_crash_payload,json=reportCrashPayload,proto3,oneof"`
}

type PluginCommand_RequestPluginPermissionPayload struct {
	RequestPluginPermissionPayload *RequestPluginPermissionPayload `protobuf:"bytes,38,opt,name=request_plugin_permission_payload,json=requestPluginPermissionPayload,proto3,oneof"`
}

type PluginCommand_SwitchSessionPayload struct {
	SwitchSessionPayload *SwitchSessionPayload `protobuf:"bytes,39,opt,name=switch_session_payload,json=switchSessionPayload,proto3,oneof"`
}

type PluginCommand_OpenFileInPlacePayload struct {
	OpenFileInPlacePayload *OpenFilePayload `protobuf:"bytes,40,opt,name=open_file_in_place_payload,json=openFileInPlacePayload,proto3,oneof"`
}

type PluginCommand_OpenTerminalInPlacePayload struct {
	OpenTerminalInPlacePayload *OpenFilePayload `protobuf:"bytes,41,opt,name=open_terminal_in_place_payload,json=openTerminalInPlacePayload,proto3,oneof"`
}

type PluginCommand_OpenCommandPaneInPlacePayload struct {
	OpenCommandPaneInPlacePayload *OpenCommandPanePayload `protobuf:"bytes,42,opt,name=open_command_pane_in_place_payload,json=openCommandPaneInPlacePayload,proto3,oneof"`
}

type PluginCommand_RunCommandPayload struct {
	RunCommandPayload *RunCommandPayload `protobuf:"bytes,43,opt,name=run_command_payload,json=runCommandPayload,proto3,oneof"`
}

type PluginCommand_WebRequestPayload struct {
	WebRequestPayload *WebRequestPayload `protobuf:"bytes,44,opt,name=web_request_payload,json=webRequestPayload,proto3,oneof"`
}

type PluginCommand_DeleteDeadSessionPayload struct {
	DeleteDeadSessionPayload string `protobuf:"bytes,45,opt,name=delete_dead_session_payload,json=deleteDeadSessionPayload,proto3,oneof"`
}

type PluginCommand_RenameSessionPayload struct {
	RenameSessionPayload string `protobuf:"bytes,46,opt,name=rename_session_payload,json=renameSessionPayload,proto3,oneof"`
}

type PluginCommand_UnblockCliPipeInputPayload struct {
	UnblockCliPipeInputPayload string `protobuf:"bytes,47,opt,name=unblock_cli_pipe_input_payload,json=unblockCliPipeInputPayload,proto3,oneof"`
}

type PluginCommand_BlockCliPipeInputPayload struct {
	BlockCliPipeInputPayload string `protobuf:"bytes,48,opt,name=block_cli_pipe_input_payload,json=blockCliPipeInputPayload,proto3,oneof"`
}

type PluginCommand_CliPipeOutputPayload struct {
	CliPipeOutputPayload *CliPipeOutputPayload `protobuf:"bytes,49,opt,name=cli_pipe_output_payload,json=cliPipeOutputPayload,proto3,oneof"`
}

type PluginCommand_MessageToPluginPayload struct {
	MessageToPluginPayload *MessageToPluginPayload `protobuf:"bytes,50,opt,name=message_to_plugin_payload,json=messageToPluginPayload,proto3,oneof"`
}

func (*PluginCommand_SubscribePayload) isPluginCommand_Payload() {}

func (*PluginCommand_UnsubscribePayload) isPluginCommand_Payload() {}

func (*PluginCommand_SetSelectablePayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenFilePayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenFileFloatingPayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenTerminalPayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenTerminalFloatingPayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenCommandPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenCommandPaneFloatingPayload) isPluginCommand_Payload() {}

func (*PluginCommand_SwitchTabToPayload) isPluginCommand_Payload() {}

func (*PluginCommand_SetTimeoutPayload) isPluginCommand_Payload() {}

func (*PluginCommand_ExecCmdPayload) isPluginCommand_Payload() {}

func (*PluginCommand_PostMessageToPayload) isPluginCommand_Payload() {}

func (*PluginCommand_PostMessageToPluginPayload) isPluginCommand_Payload() {}

func (*PluginCommand_ShowSelfPayload) isPluginCommand_Payload() {}

func (*PluginCommand_SwitchToModePayload) isPluginCommand_Payload() {}

func (*PluginCommand_NewTabsWithLayoutPayload) isPluginCommand_Payload() {}

func (*PluginCommand_ResizePayload) isPluginCommand_Payload() {}

func (*PluginCommand_ResizeWithDirectionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_MoveFocusPayload) isPluginCommand_Payload() {}

func (*PluginCommand_MoveFocusOrTabPayload) isPluginCommand_Payload() {}

func (*PluginCommand_WritePayload) isPluginCommand_Payload() {}

func (*PluginCommand_WriteCharsPayload) isPluginCommand_Payload() {}

func (*PluginCommand_MovePaneWithDirectionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_GoToTabNamePayload) isPluginCommand_Payload() {}

func (*PluginCommand_FocusOrCreateTabPayload) isPluginCommand_Payload() {}

func (*PluginCommand_GoToTabPayload) isPluginCommand_Payload() {}

func (*PluginCommand_StartOrReloadPluginPayload) isPluginCommand_Payload() {}

func (*PluginCommand_CloseTerminalPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_ClosePluginPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_FocusTerminalPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_FocusPluginPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_RenameTerminalPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_RenamePluginPanePayload) isPluginCommand_Payload() {}

func (*PluginCommand_RenameTabPayload) isPluginCommand_Payload() {}

func (*PluginCommand_ReportCrashPayload) isPluginCommand_Payload() {}

func (*PluginCommand_RequestPluginPermissionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_SwitchSessionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenFileInPlacePayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenTerminalInPlacePayload) isPluginCommand_Payload() {}

func (*PluginCommand_OpenCommandPaneInPlacePayload) isPluginCommand_Payload() {}

func (*PluginCommand_RunCommandPayload) isPluginCommand_Payload() {}

func (*PluginCommand_WebRequestPayload) isPluginCommand_Payload() {}

func (*PluginCommand_DeleteDeadSessionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_RenameSessionPayload) isPluginCommand_Payload() {}

func (*PluginCommand_UnblockCliPipeInputPayload) isPluginCommand_Payload() {}

func (*PluginCommand_BlockCliPipeInputPayload) isPluginCommand_Payload() {}

func (*PluginCommand_CliPipeOutputPayload) isPluginCommand_Payload() {}

func (*PluginCommand_MessageToPluginPayload) isPluginCommand_Payload() {}

type CliPipeOutputPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PipeName string `protobuf:"bytes,1,opt,name=pipe_name,json=pipeName,proto3" json:"pipe_name,omitempty"`
	Output   string `protobuf:"bytes,2,opt,name=output,proto3" json:"output,omitempty"`
}

func (x *CliPipeOutputPayload) Reset() {
	*x = CliPipeOutputPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CliPipeOutputPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CliPipeOutputPayload) ProtoMessage() {}

func (x *CliPipeOutputPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CliPipeOutputPayload.ProtoReflect.Descriptor instead.
func (*CliPipeOutputPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{1}
}

func (x *CliPipeOutputPayload) GetPipeName() string {
	if x != nil {
		return x.PipeName
	}
	return ""
}

func (x *CliPipeOutputPayload) GetOutput() string {
	if x != nil {
		return x.Output
	}
	return ""
}

type MessageToPluginPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginUrl      *string        `protobuf:"bytes,1,opt,name=plugin_url,json=pluginUrl,proto3,oneof" json:"plugin_url,omitempty"`
	PluginConfig   []*ContextItem `protobuf:"bytes,2,rep,name=plugin_config,json=pluginConfig,proto3" json:"plugin_config,omitempty"`
	MessageName    string         `protobuf:"bytes,3,opt,name=message_name,json=messageName,proto3" json:"message_name,omitempty"`
	MessagePayload *string        `protobuf:"bytes,4,opt,name=message_payload,json=messagePayload,proto3,oneof" json:"message_payload,omitempty"`
	MessageArgs    []*ContextItem `protobuf:"bytes,5,rep,name=message_args,json=messageArgs,proto3" json:"message_args,omitempty"`
	NewPluginArgs  *NewPluginArgs `protobuf:"bytes,6,opt,name=new_plugin_args,json=newPluginArgs,proto3,oneof" json:"new_plugin_args,omitempty"`
}

func (x *MessageToPluginPayload) Reset() {
	*x = MessageToPluginPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageToPluginPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageToPluginPayload) ProtoMessage() {}

func (x *MessageToPluginPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageToPluginPayload.ProtoReflect.Descriptor instead.
func (*MessageToPluginPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{2}
}

func (x *MessageToPluginPayload) GetPluginUrl() string {
	if x != nil && x.PluginUrl != nil {
		return *x.PluginUrl
	}
	return ""
}

func (x *MessageToPluginPayload) GetPluginConfig() []*ContextItem {
	if x != nil {
		return x.PluginConfig
	}
	return nil
}

func (x *MessageToPluginPayload) GetMessageName() string {
	if x != nil {
		return x.MessageName
	}
	return ""
}

func (x *MessageToPluginPayload) GetMessagePayload() string {
	if x != nil && x.MessagePayload != nil {
		return *x.MessagePayload
	}
	return ""
}

func (x *MessageToPluginPayload) GetMessageArgs() []*ContextItem {
	if x != nil {
		return x.MessageArgs
	}
	return nil
}

func (x *MessageToPluginPayload) GetNewPluginArgs() *NewPluginArgs {
	if x != nil {
		return x.NewPluginArgs
	}
	return nil
}

type NewPluginArgs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShouldFloat     *bool   `protobuf:"varint,1,opt,name=should_float,json=shouldFloat,proto3,oneof" json:"should_float,omitempty"`
	PaneIdToReplace *PaneId `protobuf:"bytes,2,opt,name=pane_id_to_replace,json=paneIdToReplace,proto3,oneof" json:"pane_id_to_replace,omitempty"`
	PaneTitle       *string `protobuf:"bytes,3,opt,name=pane_title,json=paneTitle,proto3,oneof" json:"pane_title,omitempty"`
	Cwd             *string `protobuf:"bytes,4,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
	SkipCache       bool    `protobuf:"varint,5,opt,name=skip_cache,json=skipCache,proto3" json:"skip_cache,omitempty"`
}

func (x *NewPluginArgs) Reset() {
	*x = NewPluginArgs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPluginArgs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPluginArgs) ProtoMessage() {}

func (x *NewPluginArgs) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPluginArgs.ProtoReflect.Descriptor instead.
func (*NewPluginArgs) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{3}
}

func (x *NewPluginArgs) GetShouldFloat() bool {
	if x != nil && x.ShouldFloat != nil {
		return *x.ShouldFloat
	}
	return false
}

func (x *NewPluginArgs) GetPaneIdToReplace() *PaneId {
	if x != nil {
		return x.PaneIdToReplace
	}
	return nil
}

func (x *NewPluginArgs) GetPaneTitle() string {
	if x != nil && x.PaneTitle != nil {
		return *x.PaneTitle
	}
	return ""
}

func (x *NewPluginArgs) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

func (x *NewPluginArgs) GetSkipCache() bool {
	if x != nil {
		return x.SkipCache
	}
	return false
}

type PaneId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaneType PaneType `protobuf:"varint,1,opt,name=pane_type,json=paneType,proto3,enum=api.plugin_command.PaneType" json:"pane_type,omitempty"`
	Id       uint32   `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *PaneId) Reset() {
	*x = PaneId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaneId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaneId) ProtoMessage() {}

func (x *PaneId) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaneId.ProtoReflect.Descriptor instead.
func (*PaneId) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{4}
}

func (x *PaneId) GetPaneType() PaneType {
	if x != nil {
		return x.PaneType
	}
	return PaneType_Terminal
}

func (x *PaneId) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type SwitchSessionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name           *string `protobuf:"bytes,1,opt,name=name,proto3,oneof" json:"name,omitempty"`
	TabPosition    *uint32 `protobuf:"varint,2,opt,name=tab_position,json=tabPosition,proto3,oneof" json:"tab_position,omitempty"`
	PaneId         *uint32 `protobuf:"varint,3,opt,name=pane_id,json=paneId,proto3,oneof" json:"pane_id,omitempty"`
	PaneIdIsPlugin *bool   `protobuf:"varint,4,opt,name=pane_id_is_plugin,json=paneIdIsPlugin,proto3,oneof" json:"pane_id_is_plugin,omitempty"`
}

func (x *SwitchSessionPayload) Reset() {
	*x = SwitchSessionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchSessionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchSessionPayload) ProtoMessage() {}

func (x *SwitchSessionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchSessionPayload.ProtoReflect.Descriptor instead.
func (*SwitchSessionPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{5}
}

func (x *SwitchSessionPayload) GetName() string {
	if x != nil && x.Name != nil {
		return *x.Name
	}
	return ""
}

func (x *SwitchSessionPayload) GetTabPosition() uint32 {
	if x != nil && x.TabPosition != nil {
		return *x.TabPosition
	}
	return 0
}

func (x *SwitchSessionPayload) GetPaneId() uint32 {
	if x != nil && x.PaneId != nil {
		return *x.PaneId
	}
	return 0
}

func (x *SwitchSessionPayload) GetPaneIdIsPlugin() bool {
	if x != nil && x.PaneIdIsPlugin != nil {
		return *x.PaneIdIsPlugin
	}
	return false
}

type RequestPluginPermissionPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Permissions []PermissionType `protobuf:"varint,1,rep,packed,name=permissions,proto3,enum=api.plugin_permission.PermissionType" json:"permissions,omitempty"`
}

func (x *RequestPluginPermissionPayload) Reset() {
	*x = RequestPluginPermissionPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RequestPluginPermissionPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RequestPluginPermissionPayload) ProtoMessage() {}

func (x *RequestPluginPermissionPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RequestPluginPermissionPayload.ProtoReflect.Descriptor instead.
func (*RequestPluginPermissionPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{6}
}

func (x *RequestPluginPermissionPayload) GetPermissions() []PermissionType {
	if x != nil {
		return x.Permissions
	}
	return nil
}

type SubscribePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions *EventNameList `protobuf:"bytes,1,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *SubscribePayload) Reset() {
	*x = SubscribePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribePayload) ProtoMessage() {}

func (x *SubscribePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribePayload.ProtoReflect.Descriptor instead.
func (*SubscribePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribePayload) GetSubscriptions() *EventNameList {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type UnsubscribePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Subscriptions *EventNameList `protobuf:"bytes,1,opt,name=subscriptions,proto3" json:"subscriptions,omitempty"`
}

func (x *UnsubscribePayload) Reset() {
	*x = UnsubscribePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnsubscribePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnsubscribePayload) ProtoMessage() {}

func (x *UnsubscribePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnsubscribePayload.ProtoReflect.Descriptor instead.
func (*UnsubscribePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{8}
}

func (x *UnsubscribePayload) GetSubscriptions() *EventNameList {
	if x != nil {
		return x.Subscriptions
	}
	return nil
}

type OpenFilePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileToOpen *File `protobuf:"bytes,1,opt,name=file_to_open,json=fileToOpen,proto3" json:"file_to_open,omitempty"`
}

func (x *OpenFilePayload) Reset() {
	*x = OpenFilePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenFilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenFilePayload) ProtoMessage() {}

func (x *OpenFilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenFilePayload.ProtoReflect.Descriptor instead.
func (*OpenFilePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{9}
}

func (x *OpenFilePayload) GetFileToOpen() *File {
	if x != nil {
		return x.FileToOpen
	}
	return nil
}

type OpenCommandPanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandToRun *Command `protobuf:"bytes,1,opt,name=command_to_run,json=commandToRun,proto3" json:"command_to_run,omitempty"`
}

func (x *OpenCommandPanePayload) Reset() {
	*x = OpenCommandPanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OpenCommandPanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OpenCommandPanePayload) ProtoMessage() {}

func (x *OpenCommandPanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OpenCommandPanePayload.ProtoReflect.Descriptor instead.
func (*OpenCommandPanePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{10}
}

func (x *OpenCommandPanePayload) GetCommandToRun() *Command {
	if x != nil {
		return x.CommandToRun
	}
	return nil
}

type SwitchTabToPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabIndex uint32 `protobuf:"varint,1,opt,name=tab_index,json=tabIndex,proto3" json:"tab_index,omitempty"`
}

func (x *SwitchTabToPayload) Reset() {
	*x = SwitchTabToPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchTabToPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchTabToPayload) ProtoMessage() {}

func (x *SwitchTabToPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchTabToPayload.ProtoReflect.Descriptor instead.
func (*SwitchTabToPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{11}
}

func (x *SwitchTabToPayload) GetTabIndex() uint32 {
	if x != nil {
		return x.TabIndex
	}
	return 0
}

type SetTimeoutPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seconds float64 `protobuf:"fixed64,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
}

func (x *SetTimeoutPayload) Reset() {
	*x = SetTimeoutPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetTimeoutPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetTimeoutPayload) ProtoMessage() {}

func (x *SetTimeoutPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetTimeoutPayload.ProtoReflect.Descriptor instead.
func (*SetTimeoutPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{12}
}

func (x *SetTimeoutPayload) GetSeconds() float64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

type ExecCmdPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandLine []string `protobuf:"bytes,1,rep,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
}

func (x *ExecCmdPayload) Reset() {
	*x = ExecCmdPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecCmdPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecCmdPayload) ProtoMessage() {}

func (x *ExecCmdPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecCmdPayload.ProtoReflect.Descriptor instead.
func (*ExecCmdPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{13}
}

func (x *ExecCmdPayload) GetCommandLine() []string {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

type RunCommandPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CommandLine  []string       `protobuf:"bytes,1,rep,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	EnvVariables []*EnvVariable `protobuf:"bytes,2,rep,name=env_variables,json=envVariables,proto3" json:"env_variables,omitempty"`
	Cwd          string         `protobuf:"bytes,3,opt,name=cwd,proto3" json:"cwd,omitempty"`
	Context      []*ContextItem `protobuf:"bytes,4,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *RunCommandPayload) Reset() {
	*x = RunCommandPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandPayload) ProtoMessage() {}

func (x *RunCommandPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandPayload.ProtoReflect.Descriptor instead.
func (*RunCommandPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{14}
}

func (x *RunCommandPayload) GetCommandLine() []string {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

func (x *RunCommandPayload) GetEnvVariables() []*EnvVariable {
	if x != nil {
		return x.EnvVariables
	}
	return nil
}

func (x *RunCommandPayload) GetCwd() string {
	if x != nil {
		return x.Cwd
	}
	return ""
}

func (x *RunCommandPayload) GetContext() []*ContextItem {
	if x != nil {
		return x.Context
	}
	return nil
}

type WebRequestPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Url     string         `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
	Verb    HttpVerb       `protobuf:"varint,2,opt,name=verb,proto3,enum=api.plugin_command.HttpVerb" json:"verb,omitempty"`
	Headers []*Header      `protobuf:"bytes,3,rep,name=headers,proto3" json:"headers,omitempty"`
	Body    []byte         `protobuf:"bytes,4,opt,name=body,proto3" json:"body,omitempty"`
	Context []*ContextItem `protobuf:"bytes,5,rep,name=context,proto3" json:"context,omitempty"`
}

func (x *WebRequestPayload) Reset() {
	*x = WebRequestPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebRequestPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebRequestPayload) ProtoMessage() {}

func (x *WebRequestPayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebRequestPayload.ProtoReflect.Descriptor instead.
func (*WebRequestPayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{15}
}

func (x *WebRequestPayload) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *WebRequestPayload) GetVerb() HttpVerb {
	if x != nil {
		return x.Verb
	}
	return HttpVerb_Get
}

func (x *WebRequestPayload) GetHeaders() []*Header {
	if x != nil {
		return x.Headers
	}
	return nil
}

func (x *WebRequestPayload) GetBody() []byte {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *WebRequestPayload) GetContext() []*ContextItem {
	if x != nil {
		return x.Context
	}
	return nil
}

type EnvVariable struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *EnvVariable) Reset() {
	*x = EnvVariable{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnvVariable) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnvVariable) ProtoMessage() {}

func (x *EnvVariable) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnvVariable.ProtoReflect.Descriptor instead.
func (*EnvVariable) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{16}
}

func (x *EnvVariable) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EnvVariable) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type PluginMessagePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message *Message `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *PluginMessagePayload) Reset() {
	*x = PluginMessagePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginMessagePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginMessagePayload) ProtoMessage() {}

func (x *PluginMessagePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginMessagePayload.ProtoReflect.Descriptor instead.
func (*PluginMessagePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{17}
}

func (x *PluginMessagePayload) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

type ResizePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Resize *Resize `protobuf:"bytes,1,opt,name=resize,proto3" json:"resize,omitempty"`
}

func (x *ResizePayload) Reset() {
	*x = ResizePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResizePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResizePayload) ProtoMessage() {}

func (x *ResizePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResizePayload.ProtoReflect.Descriptor instead.
func (*ResizePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{18}
}

func (x *ResizePayload) GetResize() *Resize {
	if x != nil {
		return x.Resize
	}
	return nil
}

type MovePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *MoveDirection `protobuf:"bytes,1,opt,name=direction,proto3" json:"direction,omitempty"`
}

func (x *MovePayload) Reset() {
	*x = MovePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePayload) ProtoMessage() {}

func (x *MovePayload) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePayload.ProtoReflect.Descriptor instead.
func (*MovePayload) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{19}
}

func (x *MovePayload) GetDirection() *MoveDirection {
	if x != nil {
		return x.Direction
	}
	return nil
}

type IdAndNewName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      uint32 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"` // pane id or tab index
	NewName string `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3" json:"new_name,omitempty"`
}

func (x *IdAndNewName) Reset() {
	*x = IdAndNewName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_plugin_command_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAndNewName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAndNewName) ProtoMessage() {}

func (x *IdAndNewName) ProtoReflect() protoreflect.Message {
	mi := &file_plugin_command_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAndNewName.ProtoReflect.Descriptor instead.
func (*IdAndNewName) Descriptor() ([]byte, []int) {
	return file_plugin_command_proto_rawDescGZIP(), []int{20}
}

func (x *IdAndNewName) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdAndNewName) GetNewName() string {
	if x != nil {
		return x.NewName
	}
	return ""
}

var File_plugin_command_proto protoreflect.FileDescriptor

var file_plugin_command_proto_rawDesc = []byte{
	0x0a, 0x14, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x1a, 0x0c, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x0d, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x0c, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfd, 0x20, 0x0a, 0x0d, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x53, 0x0a, 0x11, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x59, 0x0a, 0x13, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a, 0x16, 0x73,
	0x65, 0x74, 0x5f, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x11, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x62, 0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x17, 0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x59, 0x0a, 0x15, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x13, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6a, 0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x1b, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e,
	0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x67, 0x0a, 0x19, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x16, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x78, 0x0a, 0x22, 0x6f, 0x70,
	0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x50, 0x61, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b, 0x0a, 0x15, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74,
	0x61, 0x62, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x61, 0x62, 0x54, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x57, 0x0a, 0x13, 0x73, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x73, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x10, 0x65, 0x78,
	0x65, 0x63, 0x5f, 0x63, 0x6d, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6d,
	0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x65, 0x78, 0x65, 0x63,
	0x43, 0x6d, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x17, 0x70, 0x6f,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6e, 0x0a,
	0x1e, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x1a, 0x70, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2c, 0x0a,
	0x11, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x68, 0x6f, 0x77,
	0x53, 0x65, 0x6c, 0x66, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x56, 0x0a, 0x16, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54,
	0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x61, 0x62, 0x73, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x6c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x18, 0x6e, 0x65, 0x77,
	0x54, 0x61, 0x62, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x66, 0x0a, 0x1d, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68,
	0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x12, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b, 0x0a, 0x19, 0x6d, 0x6f,
	0x76, 0x65, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x15, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x72, 0x54, 0x61, 0x62,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x25, 0x0a, 0x0d, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x0c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30,
	0x0a, 0x13, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x11, 0x77,
	0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x69, 0x0a, 0x20, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x77, 0x69,
	0x74, 0x68, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x6d,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69, 0x72, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x34, 0x0a, 0x16, 0x67,
	0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x67,
	0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3e, 0x0a, 0x1b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x17, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x4f,
	0x72, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0e,
	0x67, 0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44,
	0x0a, 0x1e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x72, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61,
	0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x1d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x1b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x19, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x61, 0x0a, 0x1b, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d,
	0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x18, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5d, 0x0a, 0x19, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53,
	0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x16, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x63, 0x0a, 0x1c, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e,
	0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x19,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5f, 0x0a, 0x1a, 0x72, 0x65, 0x6e,
	0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x17, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50,
	0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x50, 0x0a, 0x12, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65, 0x6e, 0x61,
	0x6d, 0x65, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x72, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x63, 0x72, 0x61, 0x73, 0x68, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x61, 0x73, 0x68, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x7f, 0x0a, 0x21, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x1e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x60, 0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65,
	0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x16,
	0x6f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x69, 0x0a, 0x1e, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72, 0x6d, 0x69,
	0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x77, 0x0a, 0x22, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1d, 0x6f, 0x70, 0x65,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x6e, 0x50, 0x6c,
	0x61, 0x63, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x72, 0x75,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x52, 0x75, 0x6e,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x11, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x13, 0x77, 0x65, 0x62, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x57, 0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x77, 0x65, 0x62, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x1b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x64, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36, 0x0a,
	0x16, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x14, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x1e, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b,
	0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x1a, 0x75, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70, 0x65, 0x49,
	0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x40, 0x0a, 0x1c, 0x62,
	0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x69, 0x6e,
	0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x30, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x18, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x61, 0x0a,
	0x17, 0x63, 0x6c, 0x69, 0x5f, 0x70, 0x69, 0x70, 0x65, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x14, 0x63, 0x6c, 0x69, 0x50,
	0x69, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x67, 0x0a, 0x19, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x32, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48,
	0x00, 0x52, 0x16, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x22, 0x4b, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70, 0x65, 0x4f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x70, 0x69, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x69, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x8e, 0x03, 0x0a, 0x16, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x22, 0x0a, 0x0a,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01,
	0x12, 0x3c, 0x0a, 0x0d, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x0c, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x21,
	0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3a, 0x0a, 0x0c, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18,
	0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0b,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x41, 0x72, 0x67, 0x73, 0x12, 0x4e, 0x0a, 0x0f, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x72, 0x67, 0x73, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x48, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x77, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x41, 0x72, 0x67, 0x73, 0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x42, 0x12,
	0x0a, 0x10, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x61, 0x72,
	0x67, 0x73, 0x22, 0x9e, 0x02, 0x0a, 0x0d, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x41, 0x72, 0x67, 0x73, 0x12, 0x26, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x4c, 0x0a, 0x12,
	0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61,
	0x6e, 0x65, 0x49, 0x64, 0x48, 0x01, 0x52, 0x0f, 0x70, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x54, 0x6f,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x70, 0x61,
	0x6e, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02,
	0x52, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x88, 0x01, 0x01, 0x12, 0x15,
	0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x03, 0x63,
	0x77, 0x64, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x6b, 0x69, 0x70, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x42, 0x15, 0x0a, 0x13, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69,
	0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x42, 0x0d, 0x0a, 0x0b,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x5f,
	0x63, 0x77, 0x64, 0x22, 0x53, 0x0a, 0x06, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x39, 0x0a,
	0x09, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x08,
	0x70, 0x61, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0xe1, 0x01, 0x0a, 0x14, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x17, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x26, 0x0a, 0x0c, 0x74, 0x61,
	0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x01, 0x52, 0x0b, 0x74, 0x61, 0x62, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0d, 0x48, 0x02, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x2e, 0x0a, 0x11, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x48, 0x03, 0x52, 0x0e, 0x70,
	0x61, 0x6e, 0x65, 0x49, 0x64, 0x49, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x88, 0x01, 0x01,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x74, 0x61,
	0x62, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x70,
	0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x69, 0x64, 0x5f, 0x69, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x69, 0x0a, 0x1e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x47,
	0x0a, 0x0b, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0b, 0x70, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x52, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0d, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x54, 0x0a, 0x12, 0x55,
	0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x0d, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x22, 0x43, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f,
	0x6f, 0x70, 0x65, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65,
	0x54, 0x6f, 0x4f, 0x70, 0x65, 0x6e, 0x22, 0x54, 0x0a, 0x16, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x3a, 0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x72,
	0x75, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x52, 0x0c,
	0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x54, 0x6f, 0x52, 0x75, 0x6e, 0x22, 0x31, 0x0a, 0x12,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62, 0x54, 0x6f, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x74, 0x61, 0x62, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x22,
	0x2d, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x22, 0x33,
	0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6d, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x22, 0xc1, 0x01, 0x0a, 0x11, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x44, 0x0a, 0x0d,
	0x65, 0x6e, 0x76, 0x5f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x2e, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x77, 0x64, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72,
	0x65, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0xcb, 0x01, 0x0a, 0x11, 0x57, 0x65, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x10, 0x0a,
	0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12,
	0x30, 0x0a, 0x04, 0x76, 0x65, 0x72, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x2e, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x62, 0x52, 0x04, 0x76, 0x65, 0x72,
	0x62, 0x12, 0x2b, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x12, 0x12,
	0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x12, 0x31, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x22, 0x37, 0x0a, 0x0b, 0x45, 0x6e, 0x76, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x46,
	0x0a, 0x14, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x3b, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x2a, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x22, 0x46, 0x0a, 0x0b, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x37, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x39, 0x0a, 0x0c, 0x49,
	0x64, 0x41, 0x6e, 0x64, 0x4e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6e,
	0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x2a, 0xaf, 0x0c, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x65, 0x74, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x65, 0x74,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x49, 0x64, 0x73, 0x10, 0x03, 0x12, 0x14, 0x0a, 0x10, 0x47,
	0x65, 0x74, 0x5a, 0x65, 0x6c, 0x6c, 0x69, 0x6a, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x04, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x05, 0x12,
	0x14, 0x0a, 0x10, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x10, 0x0a, 0x0c, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x10, 0x07, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x70, 0x65, 0x6e, 0x54,
	0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10,
	0x08, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x50, 0x61, 0x6e, 0x65, 0x10, 0x09, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x10, 0x0a, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x61, 0x62,
	0x54, 0x6f, 0x10, 0x0b, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x0c, 0x12, 0x0b, 0x0a, 0x07, 0x45, 0x78, 0x65, 0x63, 0x43, 0x6d, 0x64, 0x10,
	0x0d, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x54, 0x6f, 0x10, 0x0e, 0x12, 0x17, 0x0a, 0x13, 0x50, 0x6f, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x54, 0x6f, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x0f, 0x12, 0x0c, 0x0a,
	0x08, 0x48, 0x69, 0x64, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x53,
	0x68, 0x6f, 0x77, 0x53, 0x65, 0x6c, 0x66, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x4e,
	0x65, 0x77, 0x54, 0x61, 0x62, 0x73, 0x57, 0x69, 0x74, 0x68, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74,
	0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x10, 0x14, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x6f, 0x54, 0x6f, 0x4e, 0x65, 0x78, 0x74, 0x54, 0x61, 0x62, 0x10, 0x15, 0x12,
	0x13, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x6f, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54,
	0x61, 0x62, 0x10, 0x16, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x10, 0x17,
	0x12, 0x17, 0x0a, 0x13, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x18, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x4e, 0x65, 0x78, 0x74, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x19, 0x12, 0x15, 0x0a, 0x11,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x6e,
	0x65, 0x10, 0x1a, 0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x10, 0x1b, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f,
	0x72, 0x54, 0x61, 0x62, 0x10, 0x1c, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68,
	0x10, 0x1d, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c,
	0x62, 0x61, 0x63, 0x6b, 0x10, 0x1e, 0x12, 0x09, 0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10,
	0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x10,
	0x20, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x10, 0x21,
	0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x22, 0x12, 0x19,
	0x0a, 0x15, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x23, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x65,
	0x61, 0x72, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x24, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x10, 0x25, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x63, 0x72,
	0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x28, 0x12, 0x10, 0x0a,
	0x0c, 0x50, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x10, 0x29, 0x12,
	0x12, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77,
	0x6e, 0x10, 0x2a, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x2b, 0x12, 0x14,
	0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x73, 0x10, 0x2c, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61,
	0x6e, 0x65, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x4f, 0x72, 0x45, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x2d,
	0x12, 0x12, 0x0a, 0x0e, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61,
	0x6e, 0x65, 0x10, 0x2e, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x10, 0x2f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x54, 0x61, 0x62, 0x53, 0x79, 0x6e, 0x63, 0x10, 0x30, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x10, 0x31, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x61, 0x62, 0x10, 0x32, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x75, 0x69, 0x74, 0x5a, 0x65, 0x6c,
	0x6c, 0x69, 0x6a, 0x10, 0x33, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x10, 0x34, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x10,
	0x35, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65,
	0x10, 0x36, 0x12, 0x14, 0x0a, 0x10, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x72, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x10, 0x37, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x6f, 0x54, 0x6f,
	0x54, 0x61, 0x62, 0x10, 0x38, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72,
	0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x39, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50,
	0x61, 0x6e, 0x65, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x3b, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x10,
	0x3c, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x50, 0x61, 0x6e, 0x65, 0x10, 0x3d, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65,
	0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x3e, 0x12, 0x14,
	0x0a, 0x10, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x6e, 0x65, 0x10, 0x3f, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61,
	0x62, 0x10, 0x40, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x61,
	0x73, 0x68, 0x10, 0x41, 0x12, 0x1c, 0x0a, 0x18, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x10, 0x42, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x10, 0x43, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x70, 0x65, 0x6e, 0x54, 0x65, 0x72,
	0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x44, 0x12, 0x16,
	0x0a, 0x12, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x50,
	0x6c, 0x61, 0x63, 0x65, 0x10, 0x45, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a, 0x52,
	0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a, 0x57,
	0x65, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x10, 0x48, 0x12, 0x15, 0x0a, 0x11, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x44, 0x65, 0x61, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x10, 0x49, 0x12, 0x19, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x41, 0x6c, 0x6c, 0x44,
	0x65, 0x61, 0x64, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x10, 0x4a, 0x12, 0x11, 0x0a,
	0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x4b,
	0x12, 0x17, 0x0a, 0x13, 0x55, 0x6e, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6c, 0x69, 0x50, 0x69,
	0x70, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x4c, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x6c, 0x6f,
	0x63, 0x6b, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x4d,
	0x12, 0x11, 0x0a, 0x0d, 0x43, 0x6c, 0x69, 0x50, 0x69, 0x70, 0x65, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x10, 0x4e, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x6f,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x4f, 0x2a, 0x24, 0x0a, 0x08, 0x50, 0x61, 0x6e, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x01, 0x2a, 0x32,
	0x0a, 0x08, 0x48, 0x74, 0x74, 0x70, 0x56, 0x65, 0x72, 0x62, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x65,
	0x74, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x6f, 0x73, 0x74, 0x10, 0x01, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x75, 0x74, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x10, 0x03, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_plugin_command_proto_rawDescOnce sync.Once
	file_plugin_command_proto_rawDescData = file_plugin_command_proto_rawDesc
)

func file_plugin_command_proto_rawDescGZIP() []byte {
	file_plugin_command_proto_rawDescOnce.Do(func() {
		file_plugin_command_proto_rawDescData = protoimpl.X.CompressGZIP(file_plugin_command_proto_rawDescData)
	})
	return file_plugin_command_proto_rawDescData
}

var file_plugin_command_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_plugin_command_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_plugin_command_proto_goTypes = []interface{}{
	(CommandName)(0),                       // 0: api.plugin_command.CommandName
	(PaneType)(0),                          // 1: api.plugin_command.PaneType
	(HttpVerb)(0),                          // 2: api.plugin_command.HttpVerb
	(*PluginCommand)(nil),                  // 3: api.plugin_command.PluginCommand
	(*CliPipeOutputPayload)(nil),           // 4: api.plugin_command.CliPipeOutputPayload
	(*MessageToPluginPayload)(nil),         // 5: api.plugin_command.MessageToPluginPayload
	(*NewPluginArgs)(nil),                  // 6: api.plugin_command.NewPluginArgs
	(*PaneId)(nil),                         // 7: api.plugin_command.PaneId
	(*SwitchSessionPayload)(nil),           // 8: api.plugin_command.SwitchSessionPayload
	(*RequestPluginPermissionPayload)(nil), // 9: api.plugin_command.RequestPluginPermissionPayload
	(*SubscribePayload)(nil),               // 10: api.plugin_command.SubscribePayload
	(*UnsubscribePayload)(nil),             // 11: api.plugin_command.UnsubscribePayload
	(*OpenFilePayload)(nil),                // 12: api.plugin_command.OpenFilePayload
	(*OpenCommandPanePayload)(nil),         // 13: api.plugin_command.OpenCommandPanePayload
	(*SwitchTabToPayload)(nil),             // 14: api.plugin_command.SwitchTabToPayload
	(*SetTimeoutPayload)(nil),              // 15: api.plugin_command.SetTimeoutPayload
	(*ExecCmdPayload)(nil),                 // 16: api.plugin_command.ExecCmdPayload
	(*RunCommandPayload)(nil),              // 17: api.plugin_command.RunCommandPayload
	(*WebRequestPayload)(nil),              // 18: api.plugin_command.WebRequestPayload
	(*EnvVariable)(nil),                    // 19: api.plugin_command.EnvVariable
	(*PluginMessagePayload)(nil),           // 20: api.plugin_command.PluginMessagePayload
	(*ResizePayload)(nil),                  // 21: api.plugin_command.ResizePayload
	(*MovePayload)(nil),                    // 22: api.plugin_command.MovePayload
	(*IdAndNewName)(nil),                   // 23: api.plugin_command.IdAndNewName
	(*SwitchToModePayload)(nil),            // 24: api.action.SwitchToModePayload
	(*PaneIdAndShouldFloat)(nil),           // 25: api.action.PaneIdAndShouldFloat
	(*ContextItem)(nil),                    // 26: api.shared.ContextItem
	(PermissionType)(0),                    // 27: api.plugin_permission.PermissionType
	(*EventNameList)(nil),                  // 28: api.event.EventNameList
	(*File)(nil),                           // 29: api.file.File
	(*Command)(nil),                        // 30: api.command.Command
	(*Header)(nil),                         // 31: api.event.Header
	(*Message)(nil),                        // 32: api.message.Message
	(*Resize)(nil),                         // 33: api.resize.Resize
	(*MoveDirection)(nil),                  // 34: api.resize.MoveDirection
}
var file_plugin_command_proto_depIdxs = []int32{
	0,  // 0: api.plugin_command.PluginCommand.name:type_name -> api.plugin_command.CommandName
	10, // 1: api.plugin_command.PluginCommand.subscribe_payload:type_name -> api.plugin_command.SubscribePayload
	11, // 2: api.plugin_command.PluginCommand.unsubscribe_payload:type_name -> api.plugin_command.UnsubscribePayload
	12, // 3: api.plugin_command.PluginCommand.open_file_payload:type_name -> api.plugin_command.OpenFilePayload
	12, // 4: api.plugin_command.PluginCommand.open_file_floating_payload:type_name -> api.plugin_command.OpenFilePayload
	12, // 5: api.plugin_command.PluginCommand.open_terminal_payload:type_name -> api.plugin_command.OpenFilePayload
	12, // 6: api.plugin_command.PluginCommand.open_terminal_floating_payload:type_name -> api.plugin_command.OpenFilePayload
	13, // 7: api.plugin_command.PluginCommand.open_command_pane_payload:type_name -> api.plugin_command.OpenCommandPanePayload
	13, // 8: api.plugin_command.PluginCommand.open_command_pane_floating_payload:type_name -> api.plugin_command.OpenCommandPanePayload
	14, // 9: api.plugin_command.PluginCommand.switch_tab_to_payload:type_name -> api.plugin_command.SwitchTabToPayload
	15, // 10: api.plugin_command.PluginCommand.set_timeout_payload:type_name -> api.plugin_command.SetTimeoutPayload
	16, // 11: api.plugin_command.PluginCommand.exec_cmd_payload:type_name -> api.plugin_command.ExecCmdPayload
	20, // 12: api.plugin_command.PluginCommand.post_message_to_payload:type_name -> api.plugin_command.PluginMessagePayload
	20, // 13: api.plugin_command.PluginCommand.post_message_to_plugin_payload:type_name -> api.plugin_command.PluginMessagePayload
	24, // 14: api.plugin_command.PluginCommand.switch_to_mode_payload:type_name -> api.action.SwitchToModePayload
	21, // 15: api.plugin_command.PluginCommand.resize_payload:type_name -> api.plugin_command.ResizePayload
	21, // 16: api.plugin_command.PluginCommand.resize_with_direction_payload:type_name -> api.plugin_command.ResizePayload
	22, // 17: api.plugin_command.PluginCommand.move_focus_payload:type_name -> api.plugin_command.MovePayload
	22, // 18: api.plugin_command.PluginCommand.move_focus_or_tab_payload:type_name -> api.plugin_command.MovePayload
	22, // 19: api.plugin_command.PluginCommand.move_pane_with_direction_payload:type_name -> api.plugin_command.MovePayload
	25, // 20: api.plugin_command.PluginCommand.focus_terminal_pane_payload:type_name -> api.action.PaneIdAndShouldFloat
	25, // 21: api.plugin_command.PluginCommand.focus_plugin_pane_payload:type_name -> api.action.PaneIdAndShouldFloat
	23, // 22: api.plugin_command.PluginCommand.rename_terminal_pane_payload:type_name -> api.plugin_command.IdAndNewName
	23, // 23: api.plugin_command.PluginCommand.rename_plugin_pane_payload:type_name -> api.plugin_command.IdAndNewName
	23, // 24: api.plugin_command.PluginCommand.rename_tab_payload:type_name -> api.plugin_command.IdAndNewName
	9,  // 25: api.plugin_command.PluginCommand.request_plugin_permission_payload:type_name -> api.plugin_command.RequestPluginPermissionPayload
	8,  // 26: api.plugin_command.PluginCommand.switch_session_payload:type_name -> api.plugin_command.SwitchSessionPayload
	12, // 27: api.plugin_command.PluginCommand.open_file_in_place_payload:type_name -> api.plugin_command.OpenFilePayload
	12, // 28: api.plugin_command.PluginCommand.open_terminal_in_place_payload:type_name -> api.plugin_command.OpenFilePayload
	13, // 29: api.plugin_command.PluginCommand.open_command_pane_in_place_payload:type_name -> api.plugin_command.OpenCommandPanePayload
	17, // 30: api.plugin_command.PluginCommand.run_command_payload:type_name -> api.plugin_command.RunCommandPayload
	18, // 31: api.plugin_command.PluginCommand.web_request_payload:type_name -> api.plugin_command.WebRequestPayload
	4,  // 32: api.plugin_command.PluginCommand.cli_pipe_output_payload:type_name -> api.plugin_command.CliPipeOutputPayload
	5,  // 33: api.plugin_command.PluginCommand.message_to_plugin_payload:type_name -> api.plugin_command.MessageToPluginPayload
	26, // 34: api.plugin_command.MessageToPluginPayload.plugin_config:type_name -> api.shared.ContextItem
	26, // 35: api.plugin_command.MessageToPluginPayload.message_args:type_name -> api.shared.ContextItem
	6,  // 36: api.plugin_command.MessageToPluginPayload.new_plugin_args:type_name -> api.plugin_command.NewPluginArgs
	7,  // 37: api.plugin_command.NewPluginArgs.pane_id_to_replace:type_name -> api.plugin_command.PaneId
	1,  // 38: api.plugin_command.PaneId.pane_type:type_name -> api.plugin_command.PaneType
	27, // 39: api.plugin_command.RequestPluginPermissionPayload.permissions:type_name -> api.plugin_permission.PermissionType
	28, // 40: api.plugin_command.SubscribePayload.subscriptions:type_name -> api.event.EventNameList
	28, // 41: api.plugin_command.UnsubscribePayload.subscriptions:type_name -> api.event.EventNameList
	29, // 42: api.plugin_command.OpenFilePayload.file_to_open:type_name -> api.file.File
	30, // 43: api.plugin_command.OpenCommandPanePayload.command_to_run:type_name -> api.command.Command
	19, // 44: api.plugin_command.RunCommandPayload.env_variables:type_name -> api.plugin_command.EnvVariable
	26, // 45: api.plugin_command.RunCommandPayload.context:type_name -> api.shared.ContextItem
	2,  // 46: api.plugin_command.WebRequestPayload.verb:type_name -> api.plugin_command.HttpVerb
	31, // 47: api.plugin_command.WebRequestPayload.headers:type_name -> api.event.Header
	26, // 48: api.plugin_command.WebRequestPayload.context:type_name -> api.shared.ContextItem
	32, // 49: api.plugin_command.PluginMessagePayload.message:type_name -> api.message.Message
	33, // 50: api.plugin_command.ResizePayload.resize:type_name -> api.resize.Resize
	34, // 51: api.plugin_command.MovePayload.direction:type_name -> api.resize.MoveDirection
	52, // [52:52] is the sub-list for method output_type
	52, // [52:52] is the sub-list for method input_type
	52, // [52:52] is the sub-list for extension type_name
	52, // [52:52] is the sub-list for extension extendee
	0,  // [0:52] is the sub-list for field type_name
}

func init() { file_plugin_command_proto_init() }
func file_plugin_command_proto_init() {
	if File_plugin_command_proto != nil {
		return
	}
	file_action_proto_init()
	file_event_proto_init()
	file_file_proto_init()
	file_command_proto_init()
	file_message_proto_init()
	file_resize_proto_init()
	file_plugin_permission_proto_init()
	file_shared_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_plugin_command_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginCommand); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CliPipeOutputPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageToPluginPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPluginArgs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaneId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchSessionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RequestPluginPermissionPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnsubscribePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenFilePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OpenCommandPanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchTabToPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetTimeoutPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecCmdPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebRequestPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnvVariable); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginMessagePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResizePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_plugin_command_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdAndNewName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_plugin_command_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*PluginCommand_SubscribePayload)(nil),
		(*PluginCommand_UnsubscribePayload)(nil),
		(*PluginCommand_SetSelectablePayload)(nil),
		(*PluginCommand_OpenFilePayload)(nil),
		(*PluginCommand_OpenFileFloatingPayload)(nil),
		(*PluginCommand_OpenTerminalPayload)(nil),
		(*PluginCommand_OpenTerminalFloatingPayload)(nil),
		(*PluginCommand_OpenCommandPanePayload)(nil),
		(*PluginCommand_OpenCommandPaneFloatingPayload)(nil),
		(*PluginCommand_SwitchTabToPayload)(nil),
		(*PluginCommand_SetTimeoutPayload)(nil),
		(*PluginCommand_ExecCmdPayload)(nil),
		(*PluginCommand_PostMessageToPayload)(nil),
		(*PluginCommand_PostMessageToPluginPayload)(nil),
		(*PluginCommand_ShowSelfPayload)(nil),
		(*PluginCommand_SwitchToModePayload)(nil),
		(*PluginCommand_NewTabsWithLayoutPayload)(nil),
		(*PluginCommand_ResizePayload)(nil),
		(*PluginCommand_ResizeWithDirectionPayload)(nil),
		(*PluginCommand_MoveFocusPayload)(nil),
		(*PluginCommand_MoveFocusOrTabPayload)(nil),
		(*PluginCommand_WritePayload)(nil),
		(*PluginCommand_WriteCharsPayload)(nil),
		(*PluginCommand_MovePaneWithDirectionPayload)(nil),
		(*PluginCommand_GoToTabNamePayload)(nil),
		(*PluginCommand_FocusOrCreateTabPayload)(nil),
		(*PluginCommand_GoToTabPayload)(nil),
		(*PluginCommand_StartOrReloadPluginPayload)(nil),
		(*PluginCommand_CloseTerminalPanePayload)(nil),
		(*PluginCommand_ClosePluginPanePayload)(nil),
		(*PluginCommand_FocusTerminalPanePayload)(nil),
		(*PluginCommand_FocusPluginPanePayload)(nil),
		(*PluginCommand_RenameTerminalPanePayload)(nil),
		(*PluginCommand_RenamePluginPanePayload)(nil),
		(*PluginCommand_RenameTabPayload)(nil),
		(*PluginCommand_ReportCrashPayload)(nil),
		(*PluginCommand_RequestPluginPermissionPayload)(nil),
		(*PluginCommand_SwitchSessionPayload)(nil),
		(*PluginCommand_OpenFileInPlacePayload)(nil),
		(*PluginCommand_OpenTerminalInPlacePayload)(nil),
		(*PluginCommand_OpenCommandPaneInPlacePayload)(nil),
		(*PluginCommand_RunCommandPayload)(nil),
		(*PluginCommand_WebRequestPayload)(nil),
		(*PluginCommand_DeleteDeadSessionPayload)(nil),
		(*PluginCommand_RenameSessionPayload)(nil),
		(*PluginCommand_UnblockCliPipeInputPayload)(nil),
		(*PluginCommand_BlockCliPipeInputPayload)(nil),
		(*PluginCommand_CliPipeOutputPayload)(nil),
		(*PluginCommand_MessageToPluginPayload)(nil),
	}
	file_plugin_command_proto_msgTypes[2].OneofWrappers = []interface{}{}
	file_plugin_command_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_plugin_command_proto_msgTypes[5].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_plugin_command_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_plugin_command_proto_goTypes,
		DependencyIndexes: file_plugin_command_proto_depIdxs,
		EnumInfos:         file_plugin_command_proto_enumTypes,
		MessageInfos:      file_plugin_command_proto_msgTypes,
	}.Build()
	File_plugin_command_proto = out.File
	file_plugin_command_proto_rawDesc = nil
	file_plugin_command_proto_goTypes = nil
	file_plugin_command_proto_depIdxs = nil
}
