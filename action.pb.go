// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v4.24.0
// source: action.proto

package zelligo

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SearchDirection int32

const (
	SearchDirection_Up   SearchDirection = 0
	SearchDirection_Down SearchDirection = 1
)

// Enum value maps for SearchDirection.
var (
	SearchDirection_name = map[int32]string{
		0: "Up",
		1: "Down",
	}
	SearchDirection_value = map[string]int32{
		"Up":   0,
		"Down": 1,
	}
)

func (x SearchDirection) Enum() *SearchDirection {
	p := new(SearchDirection)
	*p = x
	return p
}

func (x SearchDirection) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchDirection) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[0].Descriptor()
}

func (SearchDirection) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[0]
}

func (x SearchDirection) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchDirection.Descriptor instead.
func (SearchDirection) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0}
}

type SearchOption int32

const (
	SearchOption_CaseSensitivity SearchOption = 0
	SearchOption_WholeWord       SearchOption = 1
	SearchOption_Wrap            SearchOption = 2
)

// Enum value maps for SearchOption.
var (
	SearchOption_name = map[int32]string{
		0: "CaseSensitivity",
		1: "WholeWord",
		2: "Wrap",
	}
	SearchOption_value = map[string]int32{
		"CaseSensitivity": 0,
		"WholeWord":       1,
		"Wrap":            2,
	}
)

func (x SearchOption) Enum() *SearchOption {
	p := new(SearchOption)
	*p = x
	return p
}

func (x SearchOption) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SearchOption) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[1].Descriptor()
}

func (SearchOption) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[1]
}

func (x SearchOption) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SearchOption.Descriptor instead.
func (SearchOption) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{1}
}

type ActionName int32

const (
	ActionName_Quit                      ActionName = 0
	ActionName_Write                     ActionName = 1
	ActionName_WriteChars                ActionName = 2
	ActionName_SwitchToMode              ActionName = 3
	ActionName_SwitchModeForAllClients   ActionName = 4
	ActionName_Resize                    ActionName = 5
	ActionName_FocusNextPane             ActionName = 6
	ActionName_FocusPreviousPane         ActionName = 7
	ActionName_SwitchFocus               ActionName = 8
	ActionName_MoveFocus                 ActionName = 9
	ActionName_MoveFocusOrTab            ActionName = 10
	ActionName_MovePane                  ActionName = 11
	ActionName_MovePaneBackwards         ActionName = 12
	ActionName_ClearScreen               ActionName = 13
	ActionName_DumpScreen                ActionName = 14
	ActionName_EditScrollback            ActionName = 15
	ActionName_ScrollUp                  ActionName = 16
	ActionName_ScrollUpAt                ActionName = 17
	ActionName_ScrollDown                ActionName = 18
	ActionName_ScrollDownAt              ActionName = 19
	ActionName_ScrollToBottom            ActionName = 20
	ActionName_ScrollToTop               ActionName = 21
	ActionName_PageScrollUp              ActionName = 22
	ActionName_PageScrollDown            ActionName = 23
	ActionName_HalfPageScrollUp          ActionName = 24
	ActionName_HalfPageScrollDown        ActionName = 25
	ActionName_ToggleFocusFullscreen     ActionName = 26
	ActionName_TogglePaneFrames          ActionName = 27
	ActionName_ToggleActiveSyncTab       ActionName = 28
	ActionName_NewPane                   ActionName = 29
	ActionName_EditFile                  ActionName = 30
	ActionName_NewFloatingPane           ActionName = 31
	ActionName_NewTiledPane              ActionName = 32
	ActionName_TogglePaneEmbedOrFloating ActionName = 33
	ActionName_ToggleFloatingPanes       ActionName = 34
	ActionName_CloseFocus                ActionName = 35
	ActionName_PaneNameInput             ActionName = 36
	ActionName_UndoRenamePane            ActionName = 37
	ActionName_NewTab                    ActionName = 38
	ActionName_NoOp                      ActionName = 39
	ActionName_GoToNextTab               ActionName = 40
	ActionName_GoToPreviousTab           ActionName = 41
	ActionName_CloseTab                  ActionName = 42
	ActionName_GoToTab                   ActionName = 43
	ActionName_GoToTabName               ActionName = 44
	ActionName_ToggleTab                 ActionName = 45
	ActionName_TabNameInput              ActionName = 46
	ActionName_UndoRenameTab             ActionName = 47
	ActionName_Run                       ActionName = 48
	ActionName_Detach                    ActionName = 49
	ActionName_LeftClick                 ActionName = 50
	ActionName_RightClick                ActionName = 51
	ActionName_MiddleClick               ActionName = 52
	ActionName_LaunchOrFocusPlugin       ActionName = 53
	ActionName_LeftMouseRelease          ActionName = 54
	ActionName_RightMouseRelease         ActionName = 55
	ActionName_MiddleMouseRelease        ActionName = 56
	ActionName_MouseHoldLeft             ActionName = 57
	ActionName_MouseHoldRight            ActionName = 58
	ActionName_MouseHoldMiddle           ActionName = 59
	ActionName_SearchInput               ActionName = 60
	ActionName_Search                    ActionName = 61
	ActionName_SearchToggleOption        ActionName = 62
	ActionName_ToggleMouseMode           ActionName = 63
	ActionName_PreviousSwapLayout        ActionName = 64
	ActionName_NextSwapLayout            ActionName = 65
	ActionName_QueryTabNames             ActionName = 66
	ActionName_NewTiledPluginPane        ActionName = 67
	ActionName_NewFloatingPluginPane     ActionName = 68
	ActionName_StartOrReloadPlugin       ActionName = 69
	ActionName_CloseTerminalPane         ActionName = 70
	ActionName_ClosePluginPane           ActionName = 71
	ActionName_FocusTerminalPaneWithId   ActionName = 72
	ActionName_FocusPluginPaneWithId     ActionName = 73
	ActionName_RenameTerminalPane        ActionName = 74
	ActionName_RenamePluginPane          ActionName = 75
	ActionName_RenameTab                 ActionName = 76
	ActionName_BreakPane                 ActionName = 77
	ActionName_BreakPaneRight            ActionName = 78
	ActionName_BreakPaneLeft             ActionName = 79
	ActionName_RenameSession             ActionName = 80
	ActionName_LaunchPlugin              ActionName = 81
)

// Enum value maps for ActionName.
var (
	ActionName_name = map[int32]string{
		0:  "Quit",
		1:  "Write",
		2:  "WriteChars",
		3:  "SwitchToMode",
		4:  "SwitchModeForAllClients",
		5:  "Resize",
		6:  "FocusNextPane",
		7:  "FocusPreviousPane",
		8:  "SwitchFocus",
		9:  "MoveFocus",
		10: "MoveFocusOrTab",
		11: "MovePane",
		12: "MovePaneBackwards",
		13: "ClearScreen",
		14: "DumpScreen",
		15: "EditScrollback",
		16: "ScrollUp",
		17: "ScrollUpAt",
		18: "ScrollDown",
		19: "ScrollDownAt",
		20: "ScrollToBottom",
		21: "ScrollToTop",
		22: "PageScrollUp",
		23: "PageScrollDown",
		24: "HalfPageScrollUp",
		25: "HalfPageScrollDown",
		26: "ToggleFocusFullscreen",
		27: "TogglePaneFrames",
		28: "ToggleActiveSyncTab",
		29: "NewPane",
		30: "EditFile",
		31: "NewFloatingPane",
		32: "NewTiledPane",
		33: "TogglePaneEmbedOrFloating",
		34: "ToggleFloatingPanes",
		35: "CloseFocus",
		36: "PaneNameInput",
		37: "UndoRenamePane",
		38: "NewTab",
		39: "NoOp",
		40: "GoToNextTab",
		41: "GoToPreviousTab",
		42: "CloseTab",
		43: "GoToTab",
		44: "GoToTabName",
		45: "ToggleTab",
		46: "TabNameInput",
		47: "UndoRenameTab",
		48: "Run",
		49: "Detach",
		50: "LeftClick",
		51: "RightClick",
		52: "MiddleClick",
		53: "LaunchOrFocusPlugin",
		54: "LeftMouseRelease",
		55: "RightMouseRelease",
		56: "MiddleMouseRelease",
		57: "MouseHoldLeft",
		58: "MouseHoldRight",
		59: "MouseHoldMiddle",
		60: "SearchInput",
		61: "Search",
		62: "SearchToggleOption",
		63: "ToggleMouseMode",
		64: "PreviousSwapLayout",
		65: "NextSwapLayout",
		66: "QueryTabNames",
		67: "NewTiledPluginPane",
		68: "NewFloatingPluginPane",
		69: "StartOrReloadPlugin",
		70: "CloseTerminalPane",
		71: "ClosePluginPane",
		72: "FocusTerminalPaneWithId",
		73: "FocusPluginPaneWithId",
		74: "RenameTerminalPane",
		75: "RenamePluginPane",
		76: "RenameTab",
		77: "BreakPane",
		78: "BreakPaneRight",
		79: "BreakPaneLeft",
		80: "RenameSession",
		81: "LaunchPlugin",
	}
	ActionName_value = map[string]int32{
		"Quit":                      0,
		"Write":                     1,
		"WriteChars":                2,
		"SwitchToMode":              3,
		"SwitchModeForAllClients":   4,
		"Resize":                    5,
		"FocusNextPane":             6,
		"FocusPreviousPane":         7,
		"SwitchFocus":               8,
		"MoveFocus":                 9,
		"MoveFocusOrTab":            10,
		"MovePane":                  11,
		"MovePaneBackwards":         12,
		"ClearScreen":               13,
		"DumpScreen":                14,
		"EditScrollback":            15,
		"ScrollUp":                  16,
		"ScrollUpAt":                17,
		"ScrollDown":                18,
		"ScrollDownAt":              19,
		"ScrollToBottom":            20,
		"ScrollToTop":               21,
		"PageScrollUp":              22,
		"PageScrollDown":            23,
		"HalfPageScrollUp":          24,
		"HalfPageScrollDown":        25,
		"ToggleFocusFullscreen":     26,
		"TogglePaneFrames":          27,
		"ToggleActiveSyncTab":       28,
		"NewPane":                   29,
		"EditFile":                  30,
		"NewFloatingPane":           31,
		"NewTiledPane":              32,
		"TogglePaneEmbedOrFloating": 33,
		"ToggleFloatingPanes":       34,
		"CloseFocus":                35,
		"PaneNameInput":             36,
		"UndoRenamePane":            37,
		"NewTab":                    38,
		"NoOp":                      39,
		"GoToNextTab":               40,
		"GoToPreviousTab":           41,
		"CloseTab":                  42,
		"GoToTab":                   43,
		"GoToTabName":               44,
		"ToggleTab":                 45,
		"TabNameInput":              46,
		"UndoRenameTab":             47,
		"Run":                       48,
		"Detach":                    49,
		"LeftClick":                 50,
		"RightClick":                51,
		"MiddleClick":               52,
		"LaunchOrFocusPlugin":       53,
		"LeftMouseRelease":          54,
		"RightMouseRelease":         55,
		"MiddleMouseRelease":        56,
		"MouseHoldLeft":             57,
		"MouseHoldRight":            58,
		"MouseHoldMiddle":           59,
		"SearchInput":               60,
		"Search":                    61,
		"SearchToggleOption":        62,
		"ToggleMouseMode":           63,
		"PreviousSwapLayout":        64,
		"NextSwapLayout":            65,
		"QueryTabNames":             66,
		"NewTiledPluginPane":        67,
		"NewFloatingPluginPane":     68,
		"StartOrReloadPlugin":       69,
		"CloseTerminalPane":         70,
		"ClosePluginPane":           71,
		"FocusTerminalPaneWithId":   72,
		"FocusPluginPaneWithId":     73,
		"RenameTerminalPane":        74,
		"RenamePluginPane":          75,
		"RenameTab":                 76,
		"BreakPane":                 77,
		"BreakPaneRight":            78,
		"BreakPaneLeft":             79,
		"RenameSession":             80,
		"LaunchPlugin":              81,
	}
)

func (x ActionName) Enum() *ActionName {
	p := new(ActionName)
	*p = x
	return p
}

func (x ActionName) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ActionName) Descriptor() protoreflect.EnumDescriptor {
	return file_action_proto_enumTypes[2].Descriptor()
}

func (ActionName) Type() protoreflect.EnumType {
	return &file_action_proto_enumTypes[2]
}

func (x ActionName) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ActionName.Descriptor instead.
func (ActionName) EnumDescriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{2}
}

type Action struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name ActionName `protobuf:"varint,1,opt,name=name,proto3,enum=api.action.ActionName" json:"name,omitempty"`
	// Types that are assignable to OptionalPayload:
	//
	//	*Action_SwitchToModePayload
	//	*Action_WritePayload
	//	*Action_WriteCharsPayload
	//	*Action_SwitchModeForAllClientsPayload
	//	*Action_ResizePayload
	//	*Action_MoveFocusPayload
	//	*Action_MoveFocusOrTabPayload
	//	*Action_MovePanePayload
	//	*Action_DumpScreenPayload
	//	*Action_ScrollUpAtPayload
	//	*Action_ScrollDownAtPayload
	//	*Action_NewPanePayload
	//	*Action_EditFilePayload
	//	*Action_NewFloatingPanePayload
	//	*Action_NewTiledPanePayload
	//	*Action_PaneNameInputPayload
	//	*Action_GoToTabPayload
	//	*Action_GoToTabNamePayload
	//	*Action_TabNameInputPayload
	//	*Action_RunPayload
	//	*Action_LeftClickPayload
	//	*Action_RightClickPayload
	//	*Action_MiddleClickPayload
	//	*Action_LaunchOrFocusPluginPayload
	//	*Action_LeftMouseReleasePayload
	//	*Action_RightMouseReleasePayload
	//	*Action_MiddleMouseReleasePayload
	//	*Action_MouseHoldLeftPayload
	//	*Action_MouseHoldRightPayload
	//	*Action_MouseHoldMiddlePayload
	//	*Action_SearchInputPayload
	//	*Action_SearchPayload
	//	*Action_SearchToggleOptionPayload
	//	*Action_NewTiledPluginPanePayload
	//	*Action_NewFloatingPluginPanePayload
	//	*Action_StartOrReloadPluginPayload
	//	*Action_CloseTerminalPanePayload
	//	*Action_ClosePluginPanePayload
	//	*Action_FocusTerminalPaneWithIdPayload
	//	*Action_FocusPluginPaneWithIdPayload
	//	*Action_RenameTerminalPanePayload
	//	*Action_RenamePluginPanePayload
	//	*Action_RenameTabPayload
	//	*Action_RenameSessionPayload
	//	*Action_LaunchPluginPayload
	OptionalPayload isAction_OptionalPayload `protobuf_oneof:"optional_payload"`
}

func (x *Action) Reset() {
	*x = Action{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Action) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Action) ProtoMessage() {}

func (x *Action) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Action.ProtoReflect.Descriptor instead.
func (*Action) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{0}
}

func (x *Action) GetName() ActionName {
	if x != nil {
		return x.Name
	}
	return ActionName_Quit
}

func (m *Action) GetOptionalPayload() isAction_OptionalPayload {
	if m != nil {
		return m.OptionalPayload
	}
	return nil
}

func (x *Action) GetSwitchToModePayload() *SwitchToModePayload {
	if x, ok := x.GetOptionalPayload().(*Action_SwitchToModePayload); ok {
		return x.SwitchToModePayload
	}
	return nil
}

func (x *Action) GetWritePayload() *WritePayload {
	if x, ok := x.GetOptionalPayload().(*Action_WritePayload); ok {
		return x.WritePayload
	}
	return nil
}

func (x *Action) GetWriteCharsPayload() *WriteCharsPayload {
	if x, ok := x.GetOptionalPayload().(*Action_WriteCharsPayload); ok {
		return x.WriteCharsPayload
	}
	return nil
}

func (x *Action) GetSwitchModeForAllClientsPayload() *SwitchToModePayload {
	if x, ok := x.GetOptionalPayload().(*Action_SwitchModeForAllClientsPayload); ok {
		return x.SwitchModeForAllClientsPayload
	}
	return nil
}

func (x *Action) GetResizePayload() *Resize {
	if x, ok := x.GetOptionalPayload().(*Action_ResizePayload); ok {
		return x.ResizePayload
	}
	return nil
}

func (x *Action) GetMoveFocusPayload() ResizeDirection {
	if x, ok := x.GetOptionalPayload().(*Action_MoveFocusPayload); ok {
		return x.MoveFocusPayload
	}
	return ResizeDirection_Left
}

func (x *Action) GetMoveFocusOrTabPayload() ResizeDirection {
	if x, ok := x.GetOptionalPayload().(*Action_MoveFocusOrTabPayload); ok {
		return x.MoveFocusOrTabPayload
	}
	return ResizeDirection_Left
}

func (x *Action) GetMovePanePayload() *MovePanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_MovePanePayload); ok {
		return x.MovePanePayload
	}
	return nil
}

func (x *Action) GetDumpScreenPayload() *DumpScreenPayload {
	if x, ok := x.GetOptionalPayload().(*Action_DumpScreenPayload); ok {
		return x.DumpScreenPayload
	}
	return nil
}

func (x *Action) GetScrollUpAtPayload() *ScrollAtPayload {
	if x, ok := x.GetOptionalPayload().(*Action_ScrollUpAtPayload); ok {
		return x.ScrollUpAtPayload
	}
	return nil
}

func (x *Action) GetScrollDownAtPayload() *ScrollAtPayload {
	if x, ok := x.GetOptionalPayload().(*Action_ScrollDownAtPayload); ok {
		return x.ScrollDownAtPayload
	}
	return nil
}

func (x *Action) GetNewPanePayload() *NewPanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_NewPanePayload); ok {
		return x.NewPanePayload
	}
	return nil
}

func (x *Action) GetEditFilePayload() *EditFilePayload {
	if x, ok := x.GetOptionalPayload().(*Action_EditFilePayload); ok {
		return x.EditFilePayload
	}
	return nil
}

func (x *Action) GetNewFloatingPanePayload() *NewFloatingPanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_NewFloatingPanePayload); ok {
		return x.NewFloatingPanePayload
	}
	return nil
}

func (x *Action) GetNewTiledPanePayload() *NewTiledPanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_NewTiledPanePayload); ok {
		return x.NewTiledPanePayload
	}
	return nil
}

func (x *Action) GetPaneNameInputPayload() []byte {
	if x, ok := x.GetOptionalPayload().(*Action_PaneNameInputPayload); ok {
		return x.PaneNameInputPayload
	}
	return nil
}

func (x *Action) GetGoToTabPayload() uint32 {
	if x, ok := x.GetOptionalPayload().(*Action_GoToTabPayload); ok {
		return x.GoToTabPayload
	}
	return 0
}

func (x *Action) GetGoToTabNamePayload() *GoToTabNamePayload {
	if x, ok := x.GetOptionalPayload().(*Action_GoToTabNamePayload); ok {
		return x.GoToTabNamePayload
	}
	return nil
}

func (x *Action) GetTabNameInputPayload() []byte {
	if x, ok := x.GetOptionalPayload().(*Action_TabNameInputPayload); ok {
		return x.TabNameInputPayload
	}
	return nil
}

func (x *Action) GetRunPayload() *RunCommandAction {
	if x, ok := x.GetOptionalPayload().(*Action_RunPayload); ok {
		return x.RunPayload
	}
	return nil
}

func (x *Action) GetLeftClickPayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_LeftClickPayload); ok {
		return x.LeftClickPayload
	}
	return nil
}

func (x *Action) GetRightClickPayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_RightClickPayload); ok {
		return x.RightClickPayload
	}
	return nil
}

func (x *Action) GetMiddleClickPayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_MiddleClickPayload); ok {
		return x.MiddleClickPayload
	}
	return nil
}

func (x *Action) GetLaunchOrFocusPluginPayload() *LaunchOrFocusPluginPayload {
	if x, ok := x.GetOptionalPayload().(*Action_LaunchOrFocusPluginPayload); ok {
		return x.LaunchOrFocusPluginPayload
	}
	return nil
}

func (x *Action) GetLeftMouseReleasePayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_LeftMouseReleasePayload); ok {
		return x.LeftMouseReleasePayload
	}
	return nil
}

func (x *Action) GetRightMouseReleasePayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_RightMouseReleasePayload); ok {
		return x.RightMouseReleasePayload
	}
	return nil
}

func (x *Action) GetMiddleMouseReleasePayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_MiddleMouseReleasePayload); ok {
		return x.MiddleMouseReleasePayload
	}
	return nil
}

func (x *Action) GetMouseHoldLeftPayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_MouseHoldLeftPayload); ok {
		return x.MouseHoldLeftPayload
	}
	return nil
}

func (x *Action) GetMouseHoldRightPayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_MouseHoldRightPayload); ok {
		return x.MouseHoldRightPayload
	}
	return nil
}

func (x *Action) GetMouseHoldMiddlePayload() *Position {
	if x, ok := x.GetOptionalPayload().(*Action_MouseHoldMiddlePayload); ok {
		return x.MouseHoldMiddlePayload
	}
	return nil
}

func (x *Action) GetSearchInputPayload() []byte {
	if x, ok := x.GetOptionalPayload().(*Action_SearchInputPayload); ok {
		return x.SearchInputPayload
	}
	return nil
}

func (x *Action) GetSearchPayload() SearchDirection {
	if x, ok := x.GetOptionalPayload().(*Action_SearchPayload); ok {
		return x.SearchPayload
	}
	return SearchDirection_Up
}

func (x *Action) GetSearchToggleOptionPayload() SearchOption {
	if x, ok := x.GetOptionalPayload().(*Action_SearchToggleOptionPayload); ok {
		return x.SearchToggleOptionPayload
	}
	return SearchOption_CaseSensitivity
}

func (x *Action) GetNewTiledPluginPanePayload() *NewPluginPanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_NewTiledPluginPanePayload); ok {
		return x.NewTiledPluginPanePayload
	}
	return nil
}

func (x *Action) GetNewFloatingPluginPanePayload() *NewPluginPanePayload {
	if x, ok := x.GetOptionalPayload().(*Action_NewFloatingPluginPanePayload); ok {
		return x.NewFloatingPluginPanePayload
	}
	return nil
}

func (x *Action) GetStartOrReloadPluginPayload() string {
	if x, ok := x.GetOptionalPayload().(*Action_StartOrReloadPluginPayload); ok {
		return x.StartOrReloadPluginPayload
	}
	return ""
}

func (x *Action) GetCloseTerminalPanePayload() uint32 {
	if x, ok := x.GetOptionalPayload().(*Action_CloseTerminalPanePayload); ok {
		return x.CloseTerminalPanePayload
	}
	return 0
}

func (x *Action) GetClosePluginPanePayload() uint32 {
	if x, ok := x.GetOptionalPayload().(*Action_ClosePluginPanePayload); ok {
		return x.ClosePluginPanePayload
	}
	return 0
}

func (x *Action) GetFocusTerminalPaneWithIdPayload() *PaneIdAndShouldFloat {
	if x, ok := x.GetOptionalPayload().(*Action_FocusTerminalPaneWithIdPayload); ok {
		return x.FocusTerminalPaneWithIdPayload
	}
	return nil
}

func (x *Action) GetFocusPluginPaneWithIdPayload() *PaneIdAndShouldFloat {
	if x, ok := x.GetOptionalPayload().(*Action_FocusPluginPaneWithIdPayload); ok {
		return x.FocusPluginPaneWithIdPayload
	}
	return nil
}

func (x *Action) GetRenameTerminalPanePayload() *IdAndName {
	if x, ok := x.GetOptionalPayload().(*Action_RenameTerminalPanePayload); ok {
		return x.RenameTerminalPanePayload
	}
	return nil
}

func (x *Action) GetRenamePluginPanePayload() *IdAndName {
	if x, ok := x.GetOptionalPayload().(*Action_RenamePluginPanePayload); ok {
		return x.RenamePluginPanePayload
	}
	return nil
}

func (x *Action) GetRenameTabPayload() *IdAndName {
	if x, ok := x.GetOptionalPayload().(*Action_RenameTabPayload); ok {
		return x.RenameTabPayload
	}
	return nil
}

func (x *Action) GetRenameSessionPayload() string {
	if x, ok := x.GetOptionalPayload().(*Action_RenameSessionPayload); ok {
		return x.RenameSessionPayload
	}
	return ""
}

func (x *Action) GetLaunchPluginPayload() *LaunchOrFocusPluginPayload {
	if x, ok := x.GetOptionalPayload().(*Action_LaunchPluginPayload); ok {
		return x.LaunchPluginPayload
	}
	return nil
}

type isAction_OptionalPayload interface {
	isAction_OptionalPayload()
}

type Action_SwitchToModePayload struct {
	SwitchToModePayload *SwitchToModePayload `protobuf:"bytes,2,opt,name=switch_to_mode_payload,json=switchToModePayload,proto3,oneof"`
}

type Action_WritePayload struct {
	WritePayload *WritePayload `protobuf:"bytes,3,opt,name=write_payload,json=writePayload,proto3,oneof"`
}

type Action_WriteCharsPayload struct {
	WriteCharsPayload *WriteCharsPayload `protobuf:"bytes,4,opt,name=write_chars_payload,json=writeCharsPayload,proto3,oneof"`
}

type Action_SwitchModeForAllClientsPayload struct {
	SwitchModeForAllClientsPayload *SwitchToModePayload `protobuf:"bytes,5,opt,name=switch_mode_for_all_clients_payload,json=switchModeForAllClientsPayload,proto3,oneof"`
}

type Action_ResizePayload struct {
	ResizePayload *Resize `protobuf:"bytes,6,opt,name=resize_payload,json=resizePayload,proto3,oneof"`
}

type Action_MoveFocusPayload struct {
	MoveFocusPayload ResizeDirection `protobuf:"varint,7,opt,name=move_focus_payload,json=moveFocusPayload,proto3,enum=api.resize.ResizeDirection,oneof"`
}

type Action_MoveFocusOrTabPayload struct {
	MoveFocusOrTabPayload ResizeDirection `protobuf:"varint,8,opt,name=move_focus_or_tab_payload,json=moveFocusOrTabPayload,proto3,enum=api.resize.ResizeDirection,oneof"`
}

type Action_MovePanePayload struct {
	MovePanePayload *MovePanePayload `protobuf:"bytes,9,opt,name=move_pane_payload,json=movePanePayload,proto3,oneof"`
}

type Action_DumpScreenPayload struct {
	DumpScreenPayload *DumpScreenPayload `protobuf:"bytes,10,opt,name=dump_screen_payload,json=dumpScreenPayload,proto3,oneof"`
}

type Action_ScrollUpAtPayload struct {
	ScrollUpAtPayload *ScrollAtPayload `protobuf:"bytes,11,opt,name=scroll_up_at_payload,json=scrollUpAtPayload,proto3,oneof"`
}

type Action_ScrollDownAtPayload struct {
	ScrollDownAtPayload *ScrollAtPayload `protobuf:"bytes,12,opt,name=scroll_down_at_payload,json=scrollDownAtPayload,proto3,oneof"`
}

type Action_NewPanePayload struct {
	NewPanePayload *NewPanePayload `protobuf:"bytes,13,opt,name=new_pane_payload,json=newPanePayload,proto3,oneof"`
}

type Action_EditFilePayload struct {
	EditFilePayload *EditFilePayload `protobuf:"bytes,14,opt,name=edit_file_payload,json=editFilePayload,proto3,oneof"`
}

type Action_NewFloatingPanePayload struct {
	NewFloatingPanePayload *NewFloatingPanePayload `protobuf:"bytes,15,opt,name=new_floating_pane_payload,json=newFloatingPanePayload,proto3,oneof"`
}

type Action_NewTiledPanePayload struct {
	NewTiledPanePayload *NewTiledPanePayload `protobuf:"bytes,16,opt,name=new_tiled_pane_payload,json=newTiledPanePayload,proto3,oneof"`
}

type Action_PaneNameInputPayload struct {
	PaneNameInputPayload []byte `protobuf:"bytes,17,opt,name=pane_name_input_payload,json=paneNameInputPayload,proto3,oneof"`
}

type Action_GoToTabPayload struct {
	GoToTabPayload uint32 `protobuf:"varint,18,opt,name=go_to_tab_payload,json=goToTabPayload,proto3,oneof"`
}

type Action_GoToTabNamePayload struct {
	GoToTabNamePayload *GoToTabNamePayload `protobuf:"bytes,19,opt,name=go_to_tab_name_payload,json=goToTabNamePayload,proto3,oneof"`
}

type Action_TabNameInputPayload struct {
	TabNameInputPayload []byte `protobuf:"bytes,20,opt,name=tab_name_input_payload,json=tabNameInputPayload,proto3,oneof"`
}

type Action_RunPayload struct {
	RunPayload *RunCommandAction `protobuf:"bytes,21,opt,name=run_payload,json=runPayload,proto3,oneof"`
}

type Action_LeftClickPayload struct {
	LeftClickPayload *Position `protobuf:"bytes,22,opt,name=left_click_payload,json=leftClickPayload,proto3,oneof"`
}

type Action_RightClickPayload struct {
	RightClickPayload *Position `protobuf:"bytes,23,opt,name=right_click_payload,json=rightClickPayload,proto3,oneof"`
}

type Action_MiddleClickPayload struct {
	MiddleClickPayload *Position `protobuf:"bytes,24,opt,name=middle_click_payload,json=middleClickPayload,proto3,oneof"`
}

type Action_LaunchOrFocusPluginPayload struct {
	LaunchOrFocusPluginPayload *LaunchOrFocusPluginPayload `protobuf:"bytes,25,opt,name=launch_or_focus_plugin_payload,json=launchOrFocusPluginPayload,proto3,oneof"`
}

type Action_LeftMouseReleasePayload struct {
	LeftMouseReleasePayload *Position `protobuf:"bytes,26,opt,name=left_mouse_release_payload,json=leftMouseReleasePayload,proto3,oneof"`
}

type Action_RightMouseReleasePayload struct {
	RightMouseReleasePayload *Position `protobuf:"bytes,27,opt,name=right_mouse_release_payload,json=rightMouseReleasePayload,proto3,oneof"`
}

type Action_MiddleMouseReleasePayload struct {
	MiddleMouseReleasePayload *Position `protobuf:"bytes,28,opt,name=middle_mouse_release_payload,json=middleMouseReleasePayload,proto3,oneof"`
}

type Action_MouseHoldLeftPayload struct {
	MouseHoldLeftPayload *Position `protobuf:"bytes,29,opt,name=mouse_hold_left_payload,json=mouseHoldLeftPayload,proto3,oneof"`
}

type Action_MouseHoldRightPayload struct {
	MouseHoldRightPayload *Position `protobuf:"bytes,30,opt,name=mouse_hold_right_payload,json=mouseHoldRightPayload,proto3,oneof"`
}

type Action_MouseHoldMiddlePayload struct {
	MouseHoldMiddlePayload *Position `protobuf:"bytes,31,opt,name=mouse_hold_middle_payload,json=mouseHoldMiddlePayload,proto3,oneof"`
}

type Action_SearchInputPayload struct {
	SearchInputPayload []byte `protobuf:"bytes,32,opt,name=search_input_payload,json=searchInputPayload,proto3,oneof"`
}

type Action_SearchPayload struct {
	SearchPayload SearchDirection `protobuf:"varint,33,opt,name=search_payload,json=searchPayload,proto3,enum=api.action.SearchDirection,oneof"`
}

type Action_SearchToggleOptionPayload struct {
	SearchToggleOptionPayload SearchOption `protobuf:"varint,34,opt,name=search_toggle_option_payload,json=searchToggleOptionPayload,proto3,enum=api.action.SearchOption,oneof"`
}

type Action_NewTiledPluginPanePayload struct {
	NewTiledPluginPanePayload *NewPluginPanePayload `protobuf:"bytes,35,opt,name=new_tiled_plugin_pane_payload,json=newTiledPluginPanePayload,proto3,oneof"`
}

type Action_NewFloatingPluginPanePayload struct {
	NewFloatingPluginPanePayload *NewPluginPanePayload `protobuf:"bytes,36,opt,name=new_floating_plugin_pane_payload,json=newFloatingPluginPanePayload,proto3,oneof"`
}

type Action_StartOrReloadPluginPayload struct {
	StartOrReloadPluginPayload string `protobuf:"bytes,37,opt,name=start_or_reload_plugin_payload,json=startOrReloadPluginPayload,proto3,oneof"`
}

type Action_CloseTerminalPanePayload struct {
	CloseTerminalPanePayload uint32 `protobuf:"varint,38,opt,name=close_terminal_pane_payload,json=closeTerminalPanePayload,proto3,oneof"`
}

type Action_ClosePluginPanePayload struct {
	ClosePluginPanePayload uint32 `protobuf:"varint,39,opt,name=close_plugin_pane_payload,json=closePluginPanePayload,proto3,oneof"`
}

type Action_FocusTerminalPaneWithIdPayload struct {
	FocusTerminalPaneWithIdPayload *PaneIdAndShouldFloat `protobuf:"bytes,40,opt,name=focus_terminal_pane_with_id_payload,json=focusTerminalPaneWithIdPayload,proto3,oneof"`
}

type Action_FocusPluginPaneWithIdPayload struct {
	FocusPluginPaneWithIdPayload *PaneIdAndShouldFloat `protobuf:"bytes,41,opt,name=focus_plugin_pane_with_id_payload,json=focusPluginPaneWithIdPayload,proto3,oneof"`
}

type Action_RenameTerminalPanePayload struct {
	RenameTerminalPanePayload *IdAndName `protobuf:"bytes,42,opt,name=rename_terminal_pane_payload,json=renameTerminalPanePayload,proto3,oneof"`
}

type Action_RenamePluginPanePayload struct {
	RenamePluginPanePayload *IdAndName `protobuf:"bytes,43,opt,name=rename_plugin_pane_payload,json=renamePluginPanePayload,proto3,oneof"`
}

type Action_RenameTabPayload struct {
	RenameTabPayload *IdAndName `protobuf:"bytes,44,opt,name=rename_tab_payload,json=renameTabPayload,proto3,oneof"`
}

type Action_RenameSessionPayload struct {
	RenameSessionPayload string `protobuf:"bytes,45,opt,name=rename_session_payload,json=renameSessionPayload,proto3,oneof"`
}

type Action_LaunchPluginPayload struct {
	LaunchPluginPayload *LaunchOrFocusPluginPayload `protobuf:"bytes,46,opt,name=launch_plugin_payload,json=launchPluginPayload,proto3,oneof"`
}

func (*Action_SwitchToModePayload) isAction_OptionalPayload() {}

func (*Action_WritePayload) isAction_OptionalPayload() {}

func (*Action_WriteCharsPayload) isAction_OptionalPayload() {}

func (*Action_SwitchModeForAllClientsPayload) isAction_OptionalPayload() {}

func (*Action_ResizePayload) isAction_OptionalPayload() {}

func (*Action_MoveFocusPayload) isAction_OptionalPayload() {}

func (*Action_MoveFocusOrTabPayload) isAction_OptionalPayload() {}

func (*Action_MovePanePayload) isAction_OptionalPayload() {}

func (*Action_DumpScreenPayload) isAction_OptionalPayload() {}

func (*Action_ScrollUpAtPayload) isAction_OptionalPayload() {}

func (*Action_ScrollDownAtPayload) isAction_OptionalPayload() {}

func (*Action_NewPanePayload) isAction_OptionalPayload() {}

func (*Action_EditFilePayload) isAction_OptionalPayload() {}

func (*Action_NewFloatingPanePayload) isAction_OptionalPayload() {}

func (*Action_NewTiledPanePayload) isAction_OptionalPayload() {}

func (*Action_PaneNameInputPayload) isAction_OptionalPayload() {}

func (*Action_GoToTabPayload) isAction_OptionalPayload() {}

func (*Action_GoToTabNamePayload) isAction_OptionalPayload() {}

func (*Action_TabNameInputPayload) isAction_OptionalPayload() {}

func (*Action_RunPayload) isAction_OptionalPayload() {}

func (*Action_LeftClickPayload) isAction_OptionalPayload() {}

func (*Action_RightClickPayload) isAction_OptionalPayload() {}

func (*Action_MiddleClickPayload) isAction_OptionalPayload() {}

func (*Action_LaunchOrFocusPluginPayload) isAction_OptionalPayload() {}

func (*Action_LeftMouseReleasePayload) isAction_OptionalPayload() {}

func (*Action_RightMouseReleasePayload) isAction_OptionalPayload() {}

func (*Action_MiddleMouseReleasePayload) isAction_OptionalPayload() {}

func (*Action_MouseHoldLeftPayload) isAction_OptionalPayload() {}

func (*Action_MouseHoldRightPayload) isAction_OptionalPayload() {}

func (*Action_MouseHoldMiddlePayload) isAction_OptionalPayload() {}

func (*Action_SearchInputPayload) isAction_OptionalPayload() {}

func (*Action_SearchPayload) isAction_OptionalPayload() {}

func (*Action_SearchToggleOptionPayload) isAction_OptionalPayload() {}

func (*Action_NewTiledPluginPanePayload) isAction_OptionalPayload() {}

func (*Action_NewFloatingPluginPanePayload) isAction_OptionalPayload() {}

func (*Action_StartOrReloadPluginPayload) isAction_OptionalPayload() {}

func (*Action_CloseTerminalPanePayload) isAction_OptionalPayload() {}

func (*Action_ClosePluginPanePayload) isAction_OptionalPayload() {}

func (*Action_FocusTerminalPaneWithIdPayload) isAction_OptionalPayload() {}

func (*Action_FocusPluginPaneWithIdPayload) isAction_OptionalPayload() {}

func (*Action_RenameTerminalPanePayload) isAction_OptionalPayload() {}

func (*Action_RenamePluginPanePayload) isAction_OptionalPayload() {}

func (*Action_RenameTabPayload) isAction_OptionalPayload() {}

func (*Action_RenameSessionPayload) isAction_OptionalPayload() {}

func (*Action_LaunchPluginPayload) isAction_OptionalPayload() {}

type IdAndName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name []byte `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Id   uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdAndName) Reset() {
	*x = IdAndName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdAndName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdAndName) ProtoMessage() {}

func (x *IdAndName) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdAndName.ProtoReflect.Descriptor instead.
func (*IdAndName) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{1}
}

func (x *IdAndName) GetName() []byte {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *IdAndName) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

type PaneIdAndShouldFloat struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PaneId      uint32 `protobuf:"varint,1,opt,name=pane_id,json=paneId,proto3" json:"pane_id,omitempty"`
	ShouldFloat bool   `protobuf:"varint,2,opt,name=should_float,json=shouldFloat,proto3" json:"should_float,omitempty"`
}

func (x *PaneIdAndShouldFloat) Reset() {
	*x = PaneIdAndShouldFloat{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PaneIdAndShouldFloat) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PaneIdAndShouldFloat) ProtoMessage() {}

func (x *PaneIdAndShouldFloat) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PaneIdAndShouldFloat.ProtoReflect.Descriptor instead.
func (*PaneIdAndShouldFloat) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{2}
}

func (x *PaneIdAndShouldFloat) GetPaneId() uint32 {
	if x != nil {
		return x.PaneId
	}
	return 0
}

func (x *PaneIdAndShouldFloat) GetShouldFloat() bool {
	if x != nil {
		return x.ShouldFloat
	}
	return false
}

type NewPluginPanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginUrl       string  `protobuf:"bytes,1,opt,name=plugin_url,json=pluginUrl,proto3" json:"plugin_url,omitempty"`
	PaneName        *string `protobuf:"bytes,2,opt,name=pane_name,json=paneName,proto3,oneof" json:"pane_name,omitempty"`
	SkipPluginCache bool    `protobuf:"varint,3,opt,name=skip_plugin_cache,json=skipPluginCache,proto3" json:"skip_plugin_cache,omitempty"`
}

func (x *NewPluginPanePayload) Reset() {
	*x = NewPluginPanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPluginPanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPluginPanePayload) ProtoMessage() {}

func (x *NewPluginPanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPluginPanePayload.ProtoReflect.Descriptor instead.
func (*NewPluginPanePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{3}
}

func (x *NewPluginPanePayload) GetPluginUrl() string {
	if x != nil {
		return x.PluginUrl
	}
	return ""
}

func (x *NewPluginPanePayload) GetPaneName() string {
	if x != nil && x.PaneName != nil {
		return *x.PaneName
	}
	return ""
}

func (x *NewPluginPanePayload) GetSkipPluginCache() bool {
	if x != nil {
		return x.SkipPluginCache
	}
	return false
}

type LaunchOrFocusPluginPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PluginUrl           string               `protobuf:"bytes,1,opt,name=plugin_url,json=pluginUrl,proto3" json:"plugin_url,omitempty"`
	ShouldFloat         bool                 `protobuf:"varint,2,opt,name=should_float,json=shouldFloat,proto3" json:"should_float,omitempty"`
	PluginConfiguration *PluginConfiguration `protobuf:"bytes,3,opt,name=plugin_configuration,json=pluginConfiguration,proto3,oneof" json:"plugin_configuration,omitempty"`
	MoveToFocusedTab    bool                 `protobuf:"varint,4,opt,name=move_to_focused_tab,json=moveToFocusedTab,proto3" json:"move_to_focused_tab,omitempty"`
	ShouldOpenInPlace   bool                 `protobuf:"varint,5,opt,name=should_open_in_place,json=shouldOpenInPlace,proto3" json:"should_open_in_place,omitempty"`
	SkipPluginCache     bool                 `protobuf:"varint,6,opt,name=skip_plugin_cache,json=skipPluginCache,proto3" json:"skip_plugin_cache,omitempty"`
}

func (x *LaunchOrFocusPluginPayload) Reset() {
	*x = LaunchOrFocusPluginPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LaunchOrFocusPluginPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LaunchOrFocusPluginPayload) ProtoMessage() {}

func (x *LaunchOrFocusPluginPayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LaunchOrFocusPluginPayload.ProtoReflect.Descriptor instead.
func (*LaunchOrFocusPluginPayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{4}
}

func (x *LaunchOrFocusPluginPayload) GetPluginUrl() string {
	if x != nil {
		return x.PluginUrl
	}
	return ""
}

func (x *LaunchOrFocusPluginPayload) GetShouldFloat() bool {
	if x != nil {
		return x.ShouldFloat
	}
	return false
}

func (x *LaunchOrFocusPluginPayload) GetPluginConfiguration() *PluginConfiguration {
	if x != nil {
		return x.PluginConfiguration
	}
	return nil
}

func (x *LaunchOrFocusPluginPayload) GetMoveToFocusedTab() bool {
	if x != nil {
		return x.MoveToFocusedTab
	}
	return false
}

func (x *LaunchOrFocusPluginPayload) GetShouldOpenInPlace() bool {
	if x != nil {
		return x.ShouldOpenInPlace
	}
	return false
}

func (x *LaunchOrFocusPluginPayload) GetSkipPluginCache() bool {
	if x != nil {
		return x.SkipPluginCache
	}
	return false
}

type GoToTabNamePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TabName string `protobuf:"bytes,1,opt,name=tab_name,json=tabName,proto3" json:"tab_name,omitempty"`
	Create  bool   `protobuf:"varint,2,opt,name=create,proto3" json:"create,omitempty"`
}

func (x *GoToTabNamePayload) Reset() {
	*x = GoToTabNamePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GoToTabNamePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GoToTabNamePayload) ProtoMessage() {}

func (x *GoToTabNamePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GoToTabNamePayload.ProtoReflect.Descriptor instead.
func (*GoToTabNamePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{5}
}

func (x *GoToTabNamePayload) GetTabName() string {
	if x != nil {
		return x.TabName
	}
	return ""
}

func (x *GoToTabNamePayload) GetCreate() bool {
	if x != nil {
		return x.Create
	}
	return false
}

type NewFloatingPanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command *RunCommandAction `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
}

func (x *NewFloatingPanePayload) Reset() {
	*x = NewFloatingPanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewFloatingPanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewFloatingPanePayload) ProtoMessage() {}

func (x *NewFloatingPanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewFloatingPanePayload.ProtoReflect.Descriptor instead.
func (*NewFloatingPanePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{6}
}

func (x *NewFloatingPanePayload) GetCommand() *RunCommandAction {
	if x != nil {
		return x.Command
	}
	return nil
}

type NewTiledPanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command   *RunCommandAction `protobuf:"bytes,1,opt,name=command,proto3,oneof" json:"command,omitempty"`
	Direction *ResizeDirection  `protobuf:"varint,2,opt,name=direction,proto3,enum=api.resize.ResizeDirection,oneof" json:"direction,omitempty"`
}

func (x *NewTiledPanePayload) Reset() {
	*x = NewTiledPanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewTiledPanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewTiledPanePayload) ProtoMessage() {}

func (x *NewTiledPanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewTiledPanePayload.ProtoReflect.Descriptor instead.
func (*NewTiledPanePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{7}
}

func (x *NewTiledPanePayload) GetCommand() *RunCommandAction {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *NewTiledPanePayload) GetDirection() ResizeDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ResizeDirection_Left
}

type MovePanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *ResizeDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=api.resize.ResizeDirection,oneof" json:"direction,omitempty"`
}

func (x *MovePanePayload) Reset() {
	*x = MovePanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MovePanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MovePanePayload) ProtoMessage() {}

func (x *MovePanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MovePanePayload.ProtoReflect.Descriptor instead.
func (*MovePanePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{8}
}

func (x *MovePanePayload) GetDirection() ResizeDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ResizeDirection_Left
}

type EditFilePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FileToEdit  string           `protobuf:"bytes,1,opt,name=file_to_edit,json=fileToEdit,proto3" json:"file_to_edit,omitempty"`
	LineNumber  *uint32          `protobuf:"varint,2,opt,name=line_number,json=lineNumber,proto3,oneof" json:"line_number,omitempty"`
	Cwd         *string          `protobuf:"bytes,3,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
	Direction   *ResizeDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=api.resize.ResizeDirection,oneof" json:"direction,omitempty"`
	ShouldFloat bool             `protobuf:"varint,5,opt,name=should_float,json=shouldFloat,proto3" json:"should_float,omitempty"`
}

func (x *EditFilePayload) Reset() {
	*x = EditFilePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EditFilePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EditFilePayload) ProtoMessage() {}

func (x *EditFilePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EditFilePayload.ProtoReflect.Descriptor instead.
func (*EditFilePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{9}
}

func (x *EditFilePayload) GetFileToEdit() string {
	if x != nil {
		return x.FileToEdit
	}
	return ""
}

func (x *EditFilePayload) GetLineNumber() uint32 {
	if x != nil && x.LineNumber != nil {
		return *x.LineNumber
	}
	return 0
}

func (x *EditFilePayload) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

func (x *EditFilePayload) GetDirection() ResizeDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ResizeDirection_Left
}

func (x *EditFilePayload) GetShouldFloat() bool {
	if x != nil {
		return x.ShouldFloat
	}
	return false
}

type ScrollAtPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Position *Position `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *ScrollAtPayload) Reset() {
	*x = ScrollAtPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScrollAtPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScrollAtPayload) ProtoMessage() {}

func (x *ScrollAtPayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScrollAtPayload.ProtoReflect.Descriptor instead.
func (*ScrollAtPayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{10}
}

func (x *ScrollAtPayload) GetPosition() *Position {
	if x != nil {
		return x.Position
	}
	return nil
}

type NewPanePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Direction *ResizeDirection `protobuf:"varint,1,opt,name=direction,proto3,enum=api.resize.ResizeDirection,oneof" json:"direction,omitempty"`
	PaneName  *string          `protobuf:"bytes,2,opt,name=pane_name,json=paneName,proto3,oneof" json:"pane_name,omitempty"`
}

func (x *NewPanePayload) Reset() {
	*x = NewPanePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewPanePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewPanePayload) ProtoMessage() {}

func (x *NewPanePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewPanePayload.ProtoReflect.Descriptor instead.
func (*NewPanePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{11}
}

func (x *NewPanePayload) GetDirection() ResizeDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ResizeDirection_Left
}

func (x *NewPanePayload) GetPaneName() string {
	if x != nil && x.PaneName != nil {
		return *x.PaneName
	}
	return ""
}

type SwitchToModePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InputMode InputMode `protobuf:"varint,1,opt,name=input_mode,json=inputMode,proto3,enum=api.input_mode.InputMode" json:"input_mode,omitempty"`
}

func (x *SwitchToModePayload) Reset() {
	*x = SwitchToModePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SwitchToModePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchToModePayload) ProtoMessage() {}

func (x *SwitchToModePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchToModePayload.ProtoReflect.Descriptor instead.
func (*SwitchToModePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{12}
}

func (x *SwitchToModePayload) GetInputMode() InputMode {
	if x != nil {
		return x.InputMode
	}
	return InputMode_Normal
}

type WritePayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BytesToWrite []byte `protobuf:"bytes,1,opt,name=bytes_to_write,json=bytesToWrite,proto3" json:"bytes_to_write,omitempty"`
}

func (x *WritePayload) Reset() {
	*x = WritePayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WritePayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WritePayload) ProtoMessage() {}

func (x *WritePayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WritePayload.ProtoReflect.Descriptor instead.
func (*WritePayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{13}
}

func (x *WritePayload) GetBytesToWrite() []byte {
	if x != nil {
		return x.BytesToWrite
	}
	return nil
}

type WriteCharsPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Chars string `protobuf:"bytes,1,opt,name=chars,proto3" json:"chars,omitempty"`
}

func (x *WriteCharsPayload) Reset() {
	*x = WriteCharsPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WriteCharsPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WriteCharsPayload) ProtoMessage() {}

func (x *WriteCharsPayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WriteCharsPayload.ProtoReflect.Descriptor instead.
func (*WriteCharsPayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{14}
}

func (x *WriteCharsPayload) GetChars() string {
	if x != nil {
		return x.Chars
	}
	return ""
}

type DumpScreenPayload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath          string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	IncludeScrollback bool   `protobuf:"varint,2,opt,name=include_scrollback,json=includeScrollback,proto3" json:"include_scrollback,omitempty"`
}

func (x *DumpScreenPayload) Reset() {
	*x = DumpScreenPayload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DumpScreenPayload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DumpScreenPayload) ProtoMessage() {}

func (x *DumpScreenPayload) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DumpScreenPayload.ProtoReflect.Descriptor instead.
func (*DumpScreenPayload) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{15}
}

func (x *DumpScreenPayload) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *DumpScreenPayload) GetIncludeScrollback() bool {
	if x != nil {
		return x.IncludeScrollback
	}
	return false
}

type Position struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Line   int64 `protobuf:"varint,1,opt,name=line,proto3" json:"line,omitempty"`
	Column int64 `protobuf:"varint,2,opt,name=column,proto3" json:"column,omitempty"`
}

func (x *Position) Reset() {
	*x = Position{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Position) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Position) ProtoMessage() {}

func (x *Position) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Position.ProtoReflect.Descriptor instead.
func (*Position) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{16}
}

func (x *Position) GetLine() int64 {
	if x != nil {
		return x.Line
	}
	return 0
}

func (x *Position) GetColumn() int64 {
	if x != nil {
		return x.Column
	}
	return 0
}

type RunCommandAction struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command     string           `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Args        []string         `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
	Cwd         *string          `protobuf:"bytes,3,opt,name=cwd,proto3,oneof" json:"cwd,omitempty"`
	Direction   *ResizeDirection `protobuf:"varint,4,opt,name=direction,proto3,enum=api.resize.ResizeDirection,oneof" json:"direction,omitempty"`
	PaneName    *string          `protobuf:"bytes,5,opt,name=pane_name,json=paneName,proto3,oneof" json:"pane_name,omitempty"`
	HoldOnClose bool             `protobuf:"varint,6,opt,name=hold_on_close,json=holdOnClose,proto3" json:"hold_on_close,omitempty"`
	HoldOnStart bool             `protobuf:"varint,7,opt,name=hold_on_start,json=holdOnStart,proto3" json:"hold_on_start,omitempty"`
}

func (x *RunCommandAction) Reset() {
	*x = RunCommandAction{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RunCommandAction) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RunCommandAction) ProtoMessage() {}

func (x *RunCommandAction) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RunCommandAction.ProtoReflect.Descriptor instead.
func (*RunCommandAction) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{17}
}

func (x *RunCommandAction) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *RunCommandAction) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

func (x *RunCommandAction) GetCwd() string {
	if x != nil && x.Cwd != nil {
		return *x.Cwd
	}
	return ""
}

func (x *RunCommandAction) GetDirection() ResizeDirection {
	if x != nil && x.Direction != nil {
		return *x.Direction
	}
	return ResizeDirection_Left
}

func (x *RunCommandAction) GetPaneName() string {
	if x != nil && x.PaneName != nil {
		return *x.PaneName
	}
	return ""
}

func (x *RunCommandAction) GetHoldOnClose() bool {
	if x != nil {
		return x.HoldOnClose
	}
	return false
}

func (x *RunCommandAction) GetHoldOnStart() bool {
	if x != nil {
		return x.HoldOnStart
	}
	return false
}

type PluginConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameAndValue []*NameAndValue `protobuf:"bytes,1,rep,name=name_and_value,json=nameAndValue,proto3" json:"name_and_value,omitempty"`
}

func (x *PluginConfiguration) Reset() {
	*x = PluginConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginConfiguration) ProtoMessage() {}

func (x *PluginConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginConfiguration.ProtoReflect.Descriptor instead.
func (*PluginConfiguration) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{18}
}

func (x *PluginConfiguration) GetNameAndValue() []*NameAndValue {
	if x != nil {
		return x.NameAndValue
	}
	return nil
}

type NameAndValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *NameAndValue) Reset() {
	*x = NameAndValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_action_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameAndValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameAndValue) ProtoMessage() {}

func (x *NameAndValue) ProtoReflect() protoreflect.Message {
	mi := &file_action_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameAndValue.ProtoReflect.Descriptor instead.
func (*NameAndValue) Descriptor() ([]byte, []int) {
	return file_action_proto_rawDescGZIP(), []int{19}
}

func (x *NameAndValue) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameAndValue) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

var File_action_proto protoreflect.FileDescriptor

var file_action_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0a,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x10, 0x69, 0x6e, 0x70, 0x75,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0c, 0x72, 0x65,
	0x73, 0x69, 0x7a, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xdb, 0x1c, 0x0a, 0x06, 0x41,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2a, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x56, 0x0a, 0x16, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x74, 0x6f, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x0d, 0x77, 0x72, 0x69,
	0x74, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x5f, 0x63, 0x68, 0x61, 0x72, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x77, 0x72, 0x69, 0x74, 0x65, 0x43,
	0x68, 0x61, 0x72, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6e, 0x0a, 0x23, 0x73,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61,
	0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f,
	0x64, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4b, 0x0a, 0x12, 0x6d, 0x6f, 0x76, 0x65,
	0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x57, 0x0a, 0x19, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x6f, 0x72, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x15, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x4f, 0x72, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x49,
	0x0a, 0x11, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x61,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x13, 0x64, 0x75, 0x6d,
	0x70, 0x5f, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x64, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x72,
	0x65, 0x65, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4e, 0x0a, 0x14, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x75, 0x70, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x74, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x11, 0x73, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55,
	0x70, 0x41, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x52, 0x0a, 0x16, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x61, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x41, 0x74,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x73, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x46,
	0x0a, 0x10, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x6e, 0x65, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x49, 0x0a, 0x11, 0x65, 0x64, 0x69, 0x74, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x45,
	0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00,
	0x52, 0x0f, 0x65, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x5f, 0x0a, 0x19, 0x6e, 0x65, 0x77, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e,
	0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x16, 0x6e, 0x65, 0x77, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x12, 0x56, 0x0a, 0x16, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x64, 0x5f,
	0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x4e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x13, 0x6e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x50,
	0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x37, 0x0a, 0x17, 0x70, 0x61,
	0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x14, 0x70,
	0x61, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x62,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00,
	0x52, 0x0e, 0x67, 0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x54, 0x0a, 0x16, 0x67, 0x6f, 0x5f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x47, 0x6f,
	0x54, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x48, 0x00, 0x52, 0x12, 0x67, 0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x35, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x13, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a,
	0x0b, 0x72, 0x75, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x0a, 0x72, 0x75, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44,
	0x0a, 0x12, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x10, 0x6c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x46, 0x0a, 0x13, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x63, 0x6c,
	0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x11, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x48, 0x0a, 0x14,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x63, 0x6b, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x12, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6c, 0x0a, 0x1e, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x6f, 0x72, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x75, 0x6e,
	0x63, 0x68, 0x4f, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1a, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x4f, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x53, 0x0a, 0x1a, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x17, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x55, 0x0a, 0x1b, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x18, 0x72, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x57, 0x0a, 0x1c, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x75, 0x73, 0x65,
	0x5f, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19,
	0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4d, 0x0a, 0x17, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x14, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x66,
	0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x4f, 0x0a, 0x18, 0x6d, 0x6f, 0x75, 0x73,
	0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x72, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x15, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x51, 0x0a, 0x19, 0x6d, 0x6f, 0x75,
	0x73, 0x65, 0x5f, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x16, 0x6d, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x4d,
	0x69, 0x64, 0x64, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x32, 0x0a, 0x14,
	0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x12, 0x73, 0x65,
	0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x44, 0x0a, 0x0e, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5b, 0x0a, 0x1c, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x5f, 0x74, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x19, 0x73, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x64, 0x0a, 0x1d, 0x6e, 0x65, 0x77, 0x5f, 0x74, 0x69, 0x6c, 0x65, 0x64,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x19,
	0x6e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6a, 0x0a, 0x20, 0x6e, 0x65, 0x77,
	0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52, 0x1c, 0x6e, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x44, 0x0a, 0x1e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f,
	0x72, 0x5f, 0x72, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x25, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3f, 0x0a, 0x1b, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61,
	0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0d,
	0x48, 0x00, 0x52, 0x18, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x19,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e,
	0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0d, 0x48,
	0x00, 0x52, 0x16, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61,
	0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6f, 0x0a, 0x23, 0x66, 0x6f, 0x63,
	0x75, 0x73, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65,
	0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f,
	0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x1e, 0x66, 0x6f, 0x63, 0x75,
	0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x74,
	0x68, 0x49, 0x64, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x6b, 0x0a, 0x21, 0x66, 0x6f,
	0x63, 0x75, 0x73, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x77, 0x69, 0x74, 0x68, 0x5f, 0x69, 0x64, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x50, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x75,
	0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x6f, 0x63, 0x75, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x58, 0x0a, 0x1c, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x12, 0x54, 0x0a, 0x1a, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x17,
	0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x45, 0x0a, 0x12, 0x72, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x5f, 0x74, 0x61, 0x62, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x10, 0x72, 0x65,
	0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x36,
	0x0a, 0x16, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x14, 0x72, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x5c, 0x0a, 0x15, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68,
	0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x48, 0x00, 0x52,
	0x13, 0x6c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x42, 0x12, 0x0a, 0x10, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x5f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x2f, 0x0a, 0x09, 0x49, 0x64, 0x41, 0x6e,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x22, 0x52, 0x0a, 0x14, 0x50, 0x61, 0x6e,
	0x65, 0x49, 0x64, 0x41, 0x6e, 0x64, 0x53, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x70, 0x61, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x22, 0x91, 0x01,
	0x0a, 0x14, 0x4e, 0x65, 0x77, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e,
	0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b, 0x69, 0x70, 0x5f,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0xdc, 0x02, 0x0a, 0x1a, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x46, 0x6f,
	0x63, 0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x55, 0x72, 0x6c, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x12, 0x57, 0x0a, 0x14, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x13, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x2d, 0x0a, 0x13, 0x6d,
	0x6f, 0x76, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x66, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x5f, 0x74,
	0x61, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x6d, 0x6f, 0x76, 0x65, 0x54, 0x6f,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x65, 0x64, 0x54, 0x61, 0x62, 0x12, 0x2f, 0x0a, 0x14, 0x73, 0x68,
	0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x69, 0x6e, 0x5f, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64,
	0x4f, 0x70, 0x65, 0x6e, 0x49, 0x6e, 0x50, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x73,
	0x6b, 0x69, 0x70, 0x5f, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x47, 0x0a, 0x12, 0x47, 0x6f, 0x54, 0x6f, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x61, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x16, 0x4e, 0x65, 0x77,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01, 0x01,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xac, 0x01, 0x0a,
	0x13, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3b, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x2e, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x88, 0x01,
	0x01, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a,
	0x65, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x42, 0x0c, 0x0a,
	0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x5f, 0x0a, 0x0f, 0x4d,
	0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x3e,
	0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2e, 0x52,
	0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x01, 0x0a,
	0x0f, 0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x20, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x65, 0x64, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6c, 0x65, 0x54, 0x6f, 0x45, 0x64,
	0x69, 0x74, 0x12, 0x24, 0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e,
	0x75, 0x6d, 0x62, 0x65, 0x72, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x63, 0x77, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x63, 0x77, 0x64, 0x88, 0x01, 0x01, 0x12,
	0x3e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x2e,
	0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12,
	0x21, 0x0a, 0x0c, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x5f, 0x66, 0x6c, 0x6f, 0x61, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x73, 0x68, 0x6f, 0x75, 0x6c, 0x64, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x63, 0x77, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64,
	0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x43, 0x0a, 0x0f, 0x53, 0x63, 0x72, 0x6f,
	0x6c, 0x6c, 0x41, 0x74, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x30, 0x0a, 0x08, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x50, 0x6f, 0x73, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x8e, 0x01,
	0x0a, 0x0e, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73, 0x69, 0x7a, 0x65,
	0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x48, 0x00, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01,
	0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x4f,
	0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d,
	0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x09, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x22,
	0x34, 0x0a, 0x0c, 0x57, 0x72, 0x69, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x24, 0x0a, 0x0e, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x74, 0x6f, 0x5f, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x62, 0x79, 0x74, 0x65, 0x73, 0x54, 0x6f,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x22, 0x29, 0x0a, 0x11, 0x57, 0x72, 0x69, 0x74, 0x65, 0x43, 0x68,
	0x61, 0x72, 0x73, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x68,
	0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x68, 0x61, 0x72, 0x73,
	0x22, 0x5f, 0x0a, 0x11, 0x44, 0x75, 0x6d, 0x70, 0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61,
	0x74, 0x68, 0x12, 0x2d, 0x0a, 0x12, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x73, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x11,
	0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63,
	0x6b, 0x22, 0x36, 0x0a, 0x08, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x6c, 0x69, 0x6e,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x22, 0xa5, 0x02, 0x0a, 0x10, 0x52, 0x75,
	0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x12, 0x15, 0x0a, 0x03,
	0x63, 0x77, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x63, 0x77, 0x64,
	0x88, 0x01, 0x01, 0x12, 0x3e, 0x0a, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x65, 0x73,
	0x69, 0x7a, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x69, 0x7a, 0x65, 0x44, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x09, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x08, 0x70, 0x61, 0x6e, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c, 0x64, 0x5f, 0x6f, 0x6e,
	0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x6f,
	0x6c, 0x64, 0x4f, 0x6e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0d, 0x68, 0x6f, 0x6c,
	0x64, 0x5f, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x68, 0x6f, 0x6c, 0x64, 0x4f, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x42, 0x06, 0x0a,
	0x04, 0x5f, 0x63, 0x77, 0x64, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x70, 0x61, 0x6e, 0x65, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x22, 0x55, 0x0a, 0x13, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x38, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65,
	0x41, 0x6e, 0x64, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x2a, 0x23, 0x0a, 0x0f, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x44, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x06, 0x0a, 0x02, 0x55, 0x70, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x01, 0x2a, 0x3c, 0x0a, 0x0c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x61, 0x73, 0x65, 0x53,
	0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x68, 0x6f, 0x6c, 0x65, 0x57, 0x6f, 0x72, 0x64, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x57,
	0x72, 0x61, 0x70, 0x10, 0x02, 0x2a, 0xa4, 0x0c, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x51, 0x75, 0x69, 0x74, 0x10, 0x00, 0x12, 0x09,
	0x0a, 0x05, 0x57, 0x72, 0x69, 0x74, 0x65, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x57, 0x72, 0x69,
	0x74, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x77, 0x69,
	0x74, 0x63, 0x68, 0x54, 0x6f, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x77, 0x69, 0x74, 0x63, 0x68, 0x4d, 0x6f, 0x64, 0x65, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x65, 0x73, 0x69,
	0x7a, 0x65, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4e, 0x65, 0x78,
	0x74, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x6f, 0x63, 0x75, 0x73,
	0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x07, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x10, 0x08, 0x12,
	0x0d, 0x0a, 0x09, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x10, 0x09, 0x12, 0x12,
	0x0a, 0x0e, 0x4d, 0x6f, 0x76, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x4f, 0x72, 0x54, 0x61, 0x62,
	0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x0b,
	0x12, 0x15, 0x0a, 0x11, 0x4d, 0x6f, 0x76, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x42, 0x61, 0x63, 0x6b,
	0x77, 0x61, 0x72, 0x64, 0x73, 0x10, 0x0c, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x6c, 0x65, 0x61, 0x72,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x44, 0x75, 0x6d, 0x70,
	0x53, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x0e, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x64, 0x69, 0x74,
	0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x62, 0x61, 0x63, 0x6b, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08,
	0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x10, 0x10, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x41, 0x74, 0x10, 0x11, 0x12, 0x0e, 0x0a, 0x0a, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x12, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x63,
	0x72, 0x6f, 0x6c, 0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x41, 0x74, 0x10, 0x13, 0x12, 0x12, 0x0a, 0x0e,
	0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x42, 0x6f, 0x74, 0x74, 0x6f, 0x6d, 0x10, 0x14,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x10,
	0x15, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55,
	0x70, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x50, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x10, 0x17, 0x12, 0x14, 0x0a, 0x10, 0x48, 0x61, 0x6c, 0x66, 0x50,
	0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x55, 0x70, 0x10, 0x18, 0x12, 0x16, 0x0a,
	0x12, 0x48, 0x61, 0x6c, 0x66, 0x50, 0x61, 0x67, 0x65, 0x53, 0x63, 0x72, 0x6f, 0x6c, 0x6c, 0x44,
	0x6f, 0x77, 0x6e, 0x10, 0x19, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46,
	0x6f, 0x63, 0x75, 0x73, 0x46, 0x75, 0x6c, 0x6c, 0x73, 0x63, 0x72, 0x65, 0x65, 0x6e, 0x10, 0x1a,
	0x12, 0x14, 0x0a, 0x10, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x73, 0x10, 0x1b, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x53, 0x79, 0x6e, 0x63, 0x54, 0x61, 0x62, 0x10, 0x1c, 0x12,
	0x0b, 0x0a, 0x07, 0x4e, 0x65, 0x77, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x1d, 0x12, 0x0c, 0x0a, 0x08,
	0x45, 0x64, 0x69, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x10, 0x1e, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x65,
	0x77, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x1f, 0x12,
	0x10, 0x0a, 0x0c, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64, 0x50, 0x61, 0x6e, 0x65, 0x10,
	0x20, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x45,
	0x6d, 0x62, 0x65, 0x64, 0x4f, 0x72, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x21,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x50, 0x61, 0x6e, 0x65, 0x73, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x46, 0x6f, 0x63, 0x75, 0x73, 0x10, 0x23, 0x12, 0x11, 0x0a, 0x0d, 0x50, 0x61, 0x6e,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x24, 0x12, 0x12, 0x0a, 0x0e,
	0x55, 0x6e, 0x64, 0x6f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x25,
	0x12, 0x0a, 0x0a, 0x06, 0x4e, 0x65, 0x77, 0x54, 0x61, 0x62, 0x10, 0x26, 0x12, 0x08, 0x0a, 0x04,
	0x4e, 0x6f, 0x4f, 0x70, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x6f, 0x54, 0x6f, 0x4e, 0x65,
	0x78, 0x74, 0x54, 0x61, 0x62, 0x10, 0x28, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x6f, 0x54, 0x6f, 0x50,
	0x72, 0x65, 0x76, 0x69, 0x6f, 0x75, 0x73, 0x54, 0x61, 0x62, 0x10, 0x29, 0x12, 0x0c, 0x0a, 0x08,
	0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x61, 0x62, 0x10, 0x2a, 0x12, 0x0b, 0x0a, 0x07, 0x47, 0x6f,
	0x54, 0x6f, 0x54, 0x61, 0x62, 0x10, 0x2b, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x6f, 0x54, 0x6f, 0x54,
	0x61, 0x62, 0x4e, 0x61, 0x6d, 0x65, 0x10, 0x2c, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x6f, 0x67, 0x67,
	0x6c, 0x65, 0x54, 0x61, 0x62, 0x10, 0x2d, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x61, 0x62, 0x4e, 0x61,
	0x6d, 0x65, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x2e, 0x12, 0x11, 0x0a, 0x0d, 0x55, 0x6e, 0x64,
	0x6f, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x10, 0x2f, 0x12, 0x07, 0x0a, 0x03,
	0x52, 0x75, 0x6e, 0x10, 0x30, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x65, 0x74, 0x61, 0x63, 0x68, 0x10,
	0x31, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x65, 0x66, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x32,
	0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x69, 0x67, 0x68, 0x74, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10, 0x33,
	0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x43, 0x6c, 0x69, 0x63, 0x6b, 0x10,
	0x34, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x61, 0x75, 0x6e, 0x63, 0x68, 0x4f, 0x72, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x35, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x65,
	0x66, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x36,
	0x12, 0x15, 0x0a, 0x11, 0x52, 0x69, 0x67, 0x68, 0x74, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x37, 0x12, 0x16, 0x0a, 0x12, 0x4d, 0x69, 0x64, 0x64, 0x6c,
	0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x10, 0x38, 0x12,
	0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x4c, 0x65, 0x66, 0x74,
	0x10, 0x39, 0x12, 0x12, 0x0a, 0x0e, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x48, 0x6f, 0x6c, 0x64, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x4d, 0x69, 0x64, 0x64, 0x6c, 0x65, 0x10, 0x3b, 0x12, 0x0f, 0x0a, 0x0b, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x10, 0x3c, 0x12, 0x0a, 0x0a, 0x06,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x10, 0x3d, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x65, 0x61, 0x72,
	0x63, 0x68, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x3e,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x6f, 0x67, 0x67, 0x6c, 0x65, 0x4d, 0x6f, 0x75, 0x73, 0x65, 0x4d,
	0x6f, 0x64, 0x65, 0x10, 0x3f, 0x12, 0x16, 0x0a, 0x12, 0x50, 0x72, 0x65, 0x76, 0x69, 0x6f, 0x75,
	0x73, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x10, 0x40, 0x12, 0x12, 0x0a,
	0x0e, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x77, 0x61, 0x70, 0x4c, 0x61, 0x79, 0x6f, 0x75, 0x74, 0x10,
	0x41, 0x12, 0x11, 0x0a, 0x0d, 0x51, 0x75, 0x65, 0x72, 0x79, 0x54, 0x61, 0x62, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x10, 0x42, 0x12, 0x16, 0x0a, 0x12, 0x4e, 0x65, 0x77, 0x54, 0x69, 0x6c, 0x65, 0x64,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x43, 0x12, 0x19, 0x0a, 0x15,
	0x4e, 0x65, 0x77, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x50, 0x6c, 0x75, 0x67, 0x69,
	0x6e, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x44, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4f, 0x72, 0x52, 0x65, 0x6c, 0x6f, 0x61, 0x64, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x45,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61,
	0x6c, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x46, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x47, 0x12, 0x1b, 0x0a, 0x17,
	0x46, 0x6f, 0x63, 0x75, 0x73, 0x54, 0x65, 0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x49, 0x64, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15, 0x46, 0x6f, 0x63,
	0x75, 0x73, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x64, 0x10, 0x49, 0x12, 0x16, 0x0a, 0x12, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x65,
	0x72, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x4a, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x50, 0x61, 0x6e, 0x65,
	0x10, 0x4b, 0x12, 0x0d, 0x0a, 0x09, 0x52, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x54, 0x61, 0x62, 0x10,
	0x4c, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x10, 0x4d,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x61, 0x6e, 0x65, 0x52, 0x69, 0x67,
	0x68, 0x74, 0x10, 0x4e, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x50, 0x61, 0x6e,
	0x65, 0x4c, 0x65, 0x66, 0x74, 0x10, 0x4f, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x65, 0x6e, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x50, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x61,
	0x75, 0x6e, 0x63, 0x68, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x10, 0x51, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_action_proto_rawDescOnce sync.Once
	file_action_proto_rawDescData = file_action_proto_rawDesc
)

func file_action_proto_rawDescGZIP() []byte {
	file_action_proto_rawDescOnce.Do(func() {
		file_action_proto_rawDescData = protoimpl.X.CompressGZIP(file_action_proto_rawDescData)
	})
	return file_action_proto_rawDescData
}

var file_action_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_action_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_action_proto_goTypes = []interface{}{
	(SearchDirection)(0),               // 0: api.action.SearchDirection
	(SearchOption)(0),                  // 1: api.action.SearchOption
	(ActionName)(0),                    // 2: api.action.ActionName
	(*Action)(nil),                     // 3: api.action.Action
	(*IdAndName)(nil),                  // 4: api.action.IdAndName
	(*PaneIdAndShouldFloat)(nil),       // 5: api.action.PaneIdAndShouldFloat
	(*NewPluginPanePayload)(nil),       // 6: api.action.NewPluginPanePayload
	(*LaunchOrFocusPluginPayload)(nil), // 7: api.action.LaunchOrFocusPluginPayload
	(*GoToTabNamePayload)(nil),         // 8: api.action.GoToTabNamePayload
	(*NewFloatingPanePayload)(nil),     // 9: api.action.NewFloatingPanePayload
	(*NewTiledPanePayload)(nil),        // 10: api.action.NewTiledPanePayload
	(*MovePanePayload)(nil),            // 11: api.action.MovePanePayload
	(*EditFilePayload)(nil),            // 12: api.action.EditFilePayload
	(*ScrollAtPayload)(nil),            // 13: api.action.ScrollAtPayload
	(*NewPanePayload)(nil),             // 14: api.action.NewPanePayload
	(*SwitchToModePayload)(nil),        // 15: api.action.SwitchToModePayload
	(*WritePayload)(nil),               // 16: api.action.WritePayload
	(*WriteCharsPayload)(nil),          // 17: api.action.WriteCharsPayload
	(*DumpScreenPayload)(nil),          // 18: api.action.DumpScreenPayload
	(*Position)(nil),                   // 19: api.action.Position
	(*RunCommandAction)(nil),           // 20: api.action.RunCommandAction
	(*PluginConfiguration)(nil),        // 21: api.action.PluginConfiguration
	(*NameAndValue)(nil),               // 22: api.action.NameAndValue
	(*Resize)(nil),                     // 23: api.resize.Resize
	(ResizeDirection)(0),               // 24: api.resize.ResizeDirection
	(InputMode)(0),                     // 25: api.input_mode.InputMode
}
var file_action_proto_depIdxs = []int32{
	2,  // 0: api.action.Action.name:type_name -> api.action.ActionName
	15, // 1: api.action.Action.switch_to_mode_payload:type_name -> api.action.SwitchToModePayload
	16, // 2: api.action.Action.write_payload:type_name -> api.action.WritePayload
	17, // 3: api.action.Action.write_chars_payload:type_name -> api.action.WriteCharsPayload
	15, // 4: api.action.Action.switch_mode_for_all_clients_payload:type_name -> api.action.SwitchToModePayload
	23, // 5: api.action.Action.resize_payload:type_name -> api.resize.Resize
	24, // 6: api.action.Action.move_focus_payload:type_name -> api.resize.ResizeDirection
	24, // 7: api.action.Action.move_focus_or_tab_payload:type_name -> api.resize.ResizeDirection
	11, // 8: api.action.Action.move_pane_payload:type_name -> api.action.MovePanePayload
	18, // 9: api.action.Action.dump_screen_payload:type_name -> api.action.DumpScreenPayload
	13, // 10: api.action.Action.scroll_up_at_payload:type_name -> api.action.ScrollAtPayload
	13, // 11: api.action.Action.scroll_down_at_payload:type_name -> api.action.ScrollAtPayload
	14, // 12: api.action.Action.new_pane_payload:type_name -> api.action.NewPanePayload
	12, // 13: api.action.Action.edit_file_payload:type_name -> api.action.EditFilePayload
	9,  // 14: api.action.Action.new_floating_pane_payload:type_name -> api.action.NewFloatingPanePayload
	10, // 15: api.action.Action.new_tiled_pane_payload:type_name -> api.action.NewTiledPanePayload
	8,  // 16: api.action.Action.go_to_tab_name_payload:type_name -> api.action.GoToTabNamePayload
	20, // 17: api.action.Action.run_payload:type_name -> api.action.RunCommandAction
	19, // 18: api.action.Action.left_click_payload:type_name -> api.action.Position
	19, // 19: api.action.Action.right_click_payload:type_name -> api.action.Position
	19, // 20: api.action.Action.middle_click_payload:type_name -> api.action.Position
	7,  // 21: api.action.Action.launch_or_focus_plugin_payload:type_name -> api.action.LaunchOrFocusPluginPayload
	19, // 22: api.action.Action.left_mouse_release_payload:type_name -> api.action.Position
	19, // 23: api.action.Action.right_mouse_release_payload:type_name -> api.action.Position
	19, // 24: api.action.Action.middle_mouse_release_payload:type_name -> api.action.Position
	19, // 25: api.action.Action.mouse_hold_left_payload:type_name -> api.action.Position
	19, // 26: api.action.Action.mouse_hold_right_payload:type_name -> api.action.Position
	19, // 27: api.action.Action.mouse_hold_middle_payload:type_name -> api.action.Position
	0,  // 28: api.action.Action.search_payload:type_name -> api.action.SearchDirection
	1,  // 29: api.action.Action.search_toggle_option_payload:type_name -> api.action.SearchOption
	6,  // 30: api.action.Action.new_tiled_plugin_pane_payload:type_name -> api.action.NewPluginPanePayload
	6,  // 31: api.action.Action.new_floating_plugin_pane_payload:type_name -> api.action.NewPluginPanePayload
	5,  // 32: api.action.Action.focus_terminal_pane_with_id_payload:type_name -> api.action.PaneIdAndShouldFloat
	5,  // 33: api.action.Action.focus_plugin_pane_with_id_payload:type_name -> api.action.PaneIdAndShouldFloat
	4,  // 34: api.action.Action.rename_terminal_pane_payload:type_name -> api.action.IdAndName
	4,  // 35: api.action.Action.rename_plugin_pane_payload:type_name -> api.action.IdAndName
	4,  // 36: api.action.Action.rename_tab_payload:type_name -> api.action.IdAndName
	7,  // 37: api.action.Action.launch_plugin_payload:type_name -> api.action.LaunchOrFocusPluginPayload
	21, // 38: api.action.LaunchOrFocusPluginPayload.plugin_configuration:type_name -> api.action.PluginConfiguration
	20, // 39: api.action.NewFloatingPanePayload.command:type_name -> api.action.RunCommandAction
	20, // 40: api.action.NewTiledPanePayload.command:type_name -> api.action.RunCommandAction
	24, // 41: api.action.NewTiledPanePayload.direction:type_name -> api.resize.ResizeDirection
	24, // 42: api.action.MovePanePayload.direction:type_name -> api.resize.ResizeDirection
	24, // 43: api.action.EditFilePayload.direction:type_name -> api.resize.ResizeDirection
	19, // 44: api.action.ScrollAtPayload.position:type_name -> api.action.Position
	24, // 45: api.action.NewPanePayload.direction:type_name -> api.resize.ResizeDirection
	25, // 46: api.action.SwitchToModePayload.input_mode:type_name -> api.input_mode.InputMode
	24, // 47: api.action.RunCommandAction.direction:type_name -> api.resize.ResizeDirection
	22, // 48: api.action.PluginConfiguration.name_and_value:type_name -> api.action.NameAndValue
	49, // [49:49] is the sub-list for method output_type
	49, // [49:49] is the sub-list for method input_type
	49, // [49:49] is the sub-list for extension type_name
	49, // [49:49] is the sub-list for extension extendee
	0,  // [0:49] is the sub-list for field type_name
}

func init() { file_action_proto_init() }
func file_action_proto_init() {
	if File_action_proto != nil {
		return
	}
	file_input_mode_proto_init()
	file_resize_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_action_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Action); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdAndName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PaneIdAndShouldFloat); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPluginPanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LaunchOrFocusPluginPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GoToTabNamePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewFloatingPanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewTiledPanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MovePanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EditFilePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScrollAtPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewPanePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SwitchToModePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WritePayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WriteCharsPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DumpScreenPayload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Position); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RunCommandAction); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_action_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameAndValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_action_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Action_SwitchToModePayload)(nil),
		(*Action_WritePayload)(nil),
		(*Action_WriteCharsPayload)(nil),
		(*Action_SwitchModeForAllClientsPayload)(nil),
		(*Action_ResizePayload)(nil),
		(*Action_MoveFocusPayload)(nil),
		(*Action_MoveFocusOrTabPayload)(nil),
		(*Action_MovePanePayload)(nil),
		(*Action_DumpScreenPayload)(nil),
		(*Action_ScrollUpAtPayload)(nil),
		(*Action_ScrollDownAtPayload)(nil),
		(*Action_NewPanePayload)(nil),
		(*Action_EditFilePayload)(nil),
		(*Action_NewFloatingPanePayload)(nil),
		(*Action_NewTiledPanePayload)(nil),
		(*Action_PaneNameInputPayload)(nil),
		(*Action_GoToTabPayload)(nil),
		(*Action_GoToTabNamePayload)(nil),
		(*Action_TabNameInputPayload)(nil),
		(*Action_RunPayload)(nil),
		(*Action_LeftClickPayload)(nil),
		(*Action_RightClickPayload)(nil),
		(*Action_MiddleClickPayload)(nil),
		(*Action_LaunchOrFocusPluginPayload)(nil),
		(*Action_LeftMouseReleasePayload)(nil),
		(*Action_RightMouseReleasePayload)(nil),
		(*Action_MiddleMouseReleasePayload)(nil),
		(*Action_MouseHoldLeftPayload)(nil),
		(*Action_MouseHoldRightPayload)(nil),
		(*Action_MouseHoldMiddlePayload)(nil),
		(*Action_SearchInputPayload)(nil),
		(*Action_SearchPayload)(nil),
		(*Action_SearchToggleOptionPayload)(nil),
		(*Action_NewTiledPluginPanePayload)(nil),
		(*Action_NewFloatingPluginPanePayload)(nil),
		(*Action_StartOrReloadPluginPayload)(nil),
		(*Action_CloseTerminalPanePayload)(nil),
		(*Action_ClosePluginPanePayload)(nil),
		(*Action_FocusTerminalPaneWithIdPayload)(nil),
		(*Action_FocusPluginPaneWithIdPayload)(nil),
		(*Action_RenameTerminalPanePayload)(nil),
		(*Action_RenamePluginPanePayload)(nil),
		(*Action_RenameTabPayload)(nil),
		(*Action_RenameSessionPayload)(nil),
		(*Action_LaunchPluginPayload)(nil),
	}
	file_action_proto_msgTypes[3].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[4].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[6].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[7].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[8].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[11].OneofWrappers = []interface{}{}
	file_action_proto_msgTypes[17].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_action_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_action_proto_goTypes,
		DependencyIndexes: file_action_proto_depIdxs,
		EnumInfos:         file_action_proto_enumTypes,
		MessageInfos:      file_action_proto_msgTypes,
	}.Build()
	File_action_proto = out.File
	file_action_proto_rawDesc = nil
	file_action_proto_goTypes = nil
	file_action_proto_depIdxs = nil
}
